
carProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000022c  00800100  00006312  000063a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006312  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003f5  0080032c  0080032c  000065d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000065d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006604  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000378  00000000  00000000  00006644  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d9e7  00000000  00000000  000069bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a99  00000000  00000000  000143a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004469  00000000  00000000  00015e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000de0  00000000  00000000  0001a2a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000212a  00000000  00000000  0001b088  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d9bb  00000000  00000000  0001d1b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002020  00000000  00000000  0002ab6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	77 c0       	rjmp	.+238    	; 0xf0 <__dtors_end>
       2:	00 00       	nop
       4:	9d c0       	rjmp	.+314    	; 0x140 <__bad_interrupt>
       6:	00 00       	nop
       8:	9b c0       	rjmp	.+310    	; 0x140 <__bad_interrupt>
       a:	00 00       	nop
       c:	99 c0       	rjmp	.+306    	; 0x140 <__bad_interrupt>
       e:	00 00       	nop
      10:	97 c0       	rjmp	.+302    	; 0x140 <__bad_interrupt>
      12:	00 00       	nop
      14:	95 c0       	rjmp	.+298    	; 0x140 <__bad_interrupt>
      16:	00 00       	nop
      18:	93 c0       	rjmp	.+294    	; 0x140 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	91 c0       	rjmp	.+290    	; 0x140 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8f c0       	rjmp	.+286    	; 0x140 <__bad_interrupt>
      22:	00 00       	nop
      24:	8d c0       	rjmp	.+282    	; 0x140 <__bad_interrupt>
      26:	00 00       	nop
      28:	8b c0       	rjmp	.+278    	; 0x140 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	89 c0       	rjmp	.+274    	; 0x140 <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c0       	rjmp	.+270    	; 0x140 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__vector_13>
      38:	83 c0       	rjmp	.+262    	; 0x140 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	81 c0       	rjmp	.+258    	; 0x140 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7f c0       	rjmp	.+254    	; 0x140 <__bad_interrupt>
      42:	00 00       	nop
      44:	7d c0       	rjmp	.+250    	; 0x140 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__vector_18>
      4c:	79 c0       	rjmp	.+242    	; 0x140 <__bad_interrupt>
      4e:	00 00       	nop
      50:	77 c0       	rjmp	.+238    	; 0x140 <__bad_interrupt>
      52:	00 00       	nop
      54:	75 c0       	rjmp	.+234    	; 0x140 <__bad_interrupt>
      56:	00 00       	nop
      58:	73 c0       	rjmp	.+230    	; 0x140 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	71 c0       	rjmp	.+226    	; 0x140 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6f c0       	rjmp	.+222    	; 0x140 <__bad_interrupt>
      62:	00 00       	nop
      64:	6d c0       	rjmp	.+218    	; 0x140 <__bad_interrupt>
      66:	00 00       	nop
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <_ZN3GPS11getLatitudeEv+0x24c>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__ctors_start>:
      ea:	d0 08       	sbc	r13, r0
      ec:	db 26       	eor	r13, r27

000000ee <__ctors_end>:
      ee:	24 2a       	or	r2, r20

000000f0 <__dtors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d8 e0       	ldi	r29, 0x08	; 8
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61

000000fc <__do_copy_data>:
      fc:	13 e0       	ldi	r17, 0x03	; 3
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	e2 e1       	ldi	r30, 0x12	; 18
     104:	f3 e6       	ldi	r31, 0x63	; 99
     106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x10>
     108:	05 90       	lpm	r0, Z+
     10a:	0d 92       	st	X+, r0
     10c:	ac 32       	cpi	r26, 0x2C	; 44
     10e:	b1 07       	cpc	r27, r17
     110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0xc>

00000112 <__do_clear_bss>:
     112:	27 e0       	ldi	r18, 0x07	; 7
     114:	ac e2       	ldi	r26, 0x2C	; 44
     116:	b3 e0       	ldi	r27, 0x03	; 3
     118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
     11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
     11c:	a1 32       	cpi	r26, 0x21	; 33
     11e:	b2 07       	cpc	r27, r18
     120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>

00000122 <__do_global_ctors>:
     122:	10 e0       	ldi	r17, 0x00	; 0
     124:	c7 e7       	ldi	r28, 0x77	; 119
     126:	d0 e0       	ldi	r29, 0x00	; 0
     128:	04 c0       	rjmp	.+8      	; 0x132 <__do_global_ctors+0x10>
     12a:	21 97       	sbiw	r28, 0x01	; 1
     12c:	fe 01       	movw	r30, r28
     12e:	0e 94 4d 31 	call	0x629a	; 0x629a <__tablejump2__>
     132:	c5 37       	cpi	r28, 0x75	; 117
     134:	d1 07       	cpc	r29, r17
     136:	c9 f7       	brne	.-14     	; 0x12a <__do_global_ctors+0x8>
     138:	0e 94 a6 10 	call	0x214c	; 0x214c <main>
     13c:	0c 94 7d 31 	jmp	0x62fa	; 0x62fa <__do_global_dtors>

00000140 <__bad_interrupt>:
     140:	5f cf       	rjmp	.-322    	; 0x0 <__vectors>

00000142 <_ZN3GPS7getPartEc>:
		else if(!gpsSignal())
		{
			return 0;
		}
		return speed;
	}
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	dc 01       	movw	r26, r24
     148:	c6 2f       	mov	r28, r22
     14a:	d0 e0       	ldi	r29, 0x00	; 0
     14c:	1c 16       	cp	r1, r28
     14e:	1d 06       	cpc	r1, r29
     150:	4c f5       	brge	.+82     	; 0x1a4 <_ZN3GPS7getPartEc+0x62>
     152:	61 e0       	ldi	r22, 0x01	; 1
     154:	70 e0       	ldi	r23, 0x00	; 0
     156:	20 e0       	ldi	r18, 0x00	; 0
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	a9 01       	movw	r20, r18
     15c:	4f 5f       	subi	r20, 0xFF	; 255
     15e:	5f 4f       	sbci	r21, 0xFF	; 255
     160:	fd 01       	movw	r30, r26
     162:	e4 0f       	add	r30, r20
     164:	f5 1f       	adc	r31, r21
     166:	80 81       	ld	r24, Z
     168:	8c 32       	cpi	r24, 0x2C	; 44
     16a:	99 f0       	breq	.+38     	; 0x192 <_ZN3GPS7getPartEc+0x50>
     16c:	4a 35       	cpi	r20, 0x5A	; 90
     16e:	51 05       	cpc	r21, r1
     170:	94 f4       	brge	.+36     	; 0x196 <_ZN3GPS7getPartEc+0x54>
     172:	2e 5f       	subi	r18, 0xFE	; 254
     174:	3f 4f       	sbci	r19, 0xFF	; 255
     176:	fd 01       	movw	r30, r26
     178:	e2 0f       	add	r30, r18
     17a:	f3 1f       	adc	r31, r19
     17c:	9a 01       	movw	r18, r20
     17e:	03 c0       	rjmp	.+6      	; 0x186 <_ZN3GPS7getPartEc+0x44>
     180:	2a 35       	cpi	r18, 0x5A	; 90
     182:	31 05       	cpc	r19, r1
     184:	49 f0       	breq	.+18     	; 0x198 <_ZN3GPS7getPartEc+0x56>
     186:	2f 5f       	subi	r18, 0xFF	; 255
     188:	3f 4f       	sbci	r19, 0xFF	; 255
     18a:	91 91       	ld	r25, Z+
     18c:	9c 32       	cpi	r25, 0x2C	; 44
     18e:	c1 f7       	brne	.-16     	; 0x180 <_ZN3GPS7getPartEc+0x3e>
     190:	03 c0       	rjmp	.+6      	; 0x198 <_ZN3GPS7getPartEc+0x56>
     192:	9a 01       	movw	r18, r20
     194:	01 c0       	rjmp	.+2      	; 0x198 <_ZN3GPS7getPartEc+0x56>
     196:	9a 01       	movw	r18, r20
     198:	6f 5f       	subi	r22, 0xFF	; 255
     19a:	7f 4f       	sbci	r23, 0xFF	; 255
     19c:	c6 17       	cp	r28, r22
     19e:	d7 07       	cpc	r29, r23
     1a0:	e4 f6       	brge	.-72     	; 0x15a <_ZN3GPS7getPartEc+0x18>
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <_ZN3GPS7getPartEc+0x66>
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	c9 01       	movw	r24, r18
     1aa:	01 96       	adiw	r24, 0x01	; 1
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	08 95       	ret

000001b2 <_ZN3GPS3cmpEPcPKc>:
     1b2:	a6 2f       	mov	r26, r22
     1b4:	b7 2f       	mov	r27, r23
     1b6:	e4 2f       	mov	r30, r20
     1b8:	f5 2f       	mov	r31, r21
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	8d 91       	ld	r24, X+
     1c0:	81 11       	cpse	r24, r1
     1c2:	04 c0       	rjmp	.+8      	; 0x1cc <_ZN3GPS3cmpEPcPKc+0x1a>
     1c4:	80 81       	ld	r24, Z
     1c6:	81 11       	cpse	r24, r1
     1c8:	05 c0       	rjmp	.+10     	; 0x1d4 <_ZN3GPS3cmpEPcPKc+0x22>
     1ca:	07 c0       	rjmp	.+14     	; 0x1da <_ZN3GPS3cmpEPcPKc+0x28>
     1cc:	20 81       	ld	r18, Z
     1ce:	82 13       	cpse	r24, r18
     1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <_ZN3GPS3cmpEPcPKc+0x22>
     1d2:	3f 5f       	subi	r19, 0xFF	; 255
     1d4:	9f 5f       	subi	r25, 0xFF	; 255
     1d6:	31 96       	adiw	r30, 0x01	; 1
     1d8:	f2 cf       	rjmp	.-28     	; 0x1be <_ZN3GPS3cmpEPcPKc+0xc>
     1da:	41 e0       	ldi	r20, 0x01	; 1
     1dc:	50 e0       	ldi	r21, 0x00	; 0
     1de:	39 17       	cp	r19, r25
     1e0:	11 f0       	breq	.+4      	; 0x1e6 <_ZN3GPS3cmpEPcPKc+0x34>
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	ca 01       	movw	r24, r20
     1e8:	08 95       	ret

000001ea <_ZN3GPS4readEv>:
     1ea:	cf 92       	push	r12
     1ec:	df 92       	push	r13
     1ee:	ef 92       	push	r14
     1f0:	ff 92       	push	r15
     1f2:	0f 93       	push	r16
     1f4:	1f 93       	push	r17
     1f6:	cf 93       	push	r28
     1f8:	df 93       	push	r29
     1fa:	7c 01       	movw	r14, r24
     1fc:	8c e2       	ldi	r24, 0x2C	; 44
     1fe:	93 e0       	ldi	r25, 0x03	; 3
     200:	0e 94 8e 2c 	call	0x591c	; 0x591c <_ZN8SoftUart19SoftUartReceiveDataEv>
     204:	84 32       	cpi	r24, 0x24	; 36
     206:	d1 f7       	brne	.-12     	; 0x1fc <_ZN3GPS4readEv+0x12>
     208:	67 01       	movw	r12, r14
     20a:	00 e0       	ldi	r16, 0x00	; 0
     20c:	10 e0       	ldi	r17, 0x00	; 0
     20e:	04 c0       	rjmp	.+8      	; 0x218 <_ZN3GPS4readEv+0x2e>
     210:	8a 35       	cpi	r24, 0x5A	; 90
     212:	91 05       	cpc	r25, r1
     214:	91 f1       	breq	.+100    	; 0x27a <_ZN3GPS4readEv+0x90>
     216:	8c 01       	movw	r16, r24
     218:	8c e2       	ldi	r24, 0x2C	; 44
     21a:	93 e0       	ldi	r25, 0x03	; 3
     21c:	0e 94 8e 2c 	call	0x591c	; 0x591c <_ZN8SoftUart19SoftUartReceiveDataEv>
     220:	c8 2f       	mov	r28, r24
     222:	f6 01       	movw	r30, r12
     224:	81 93       	st	Z+, r24
     226:	6f 01       	movw	r12, r30
     228:	c8 01       	movw	r24, r16
     22a:	01 96       	adiw	r24, 0x01	; 1
     22c:	cc 32       	cpi	r28, 0x2C	; 44
     22e:	81 f7       	brne	.-32     	; 0x210 <_ZN3GPS4readEv+0x26>
     230:	f7 01       	movw	r30, r14
     232:	e0 0f       	add	r30, r16
     234:	f1 1f       	adc	r31, r17
     236:	10 82       	st	Z, r1
     238:	4f e0       	ldi	r20, 0x0F	; 15
     23a:	51 e0       	ldi	r21, 0x01	; 1
     23c:	b7 01       	movw	r22, r14
     23e:	c7 01       	movw	r24, r14
     240:	b8 df       	rcall	.-144    	; 0x1b2 <_ZN3GPS3cmpEPcPKc>
     242:	00 97       	sbiw	r24, 0x00	; 0
     244:	31 f5       	brne	.+76     	; 0x292 <_ZN3GPS4readEv+0xa8>
     246:	2e c0       	rjmp	.+92     	; 0x2a4 <_ZN3GPS4readEv+0xba>
     248:	ca 32       	cpi	r28, 0x2A	; 42
     24a:	19 f5       	brne	.+70     	; 0x292 <_ZN3GPS4readEv+0xa8>
     24c:	0d c0       	rjmp	.+26     	; 0x268 <_ZN3GPS4readEv+0x7e>
     24e:	8a 32       	cpi	r24, 0x2A	; 42
     250:	69 f0       	breq	.+26     	; 0x26c <_ZN3GPS4readEv+0x82>
     252:	8c e2       	ldi	r24, 0x2C	; 44
     254:	93 e0       	ldi	r25, 0x03	; 3
     256:	0e 94 8e 2c 	call	0x591c	; 0x591c <_ZN8SoftUart19SoftUartReceiveDataEv>
     25a:	89 93       	st	Y+, r24
     25c:	0f 5f       	subi	r16, 0xFF	; 255
     25e:	1f 4f       	sbci	r17, 0xFF	; 255
     260:	09 35       	cpi	r16, 0x59	; 89
     262:	11 05       	cpc	r17, r1
     264:	a1 f7       	brne	.-24     	; 0x24e <_ZN3GPS4readEv+0x64>
     266:	02 c0       	rjmp	.+4      	; 0x26c <_ZN3GPS4readEv+0x82>
     268:	00 e0       	ldi	r16, 0x00	; 0
     26a:	10 e0       	ldi	r17, 0x00	; 0
     26c:	f7 01       	movw	r30, r14
     26e:	e0 0f       	add	r30, r16
     270:	f1 1f       	adc	r31, r17
     272:	10 82       	st	Z, r1
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	15 c0       	rjmp	.+42     	; 0x2a4 <_ZN3GPS4readEv+0xba>
     27a:	f7 01       	movw	r30, r14
     27c:	e0 0f       	add	r30, r16
     27e:	f1 1f       	adc	r31, r17
     280:	10 82       	st	Z, r1
     282:	4f e0       	ldi	r20, 0x0F	; 15
     284:	51 e0       	ldi	r21, 0x01	; 1
     286:	b7 01       	movw	r22, r14
     288:	c7 01       	movw	r24, r14
     28a:	93 df       	rcall	.-218    	; 0x1b2 <_ZN3GPS3cmpEPcPKc>
     28c:	00 97       	sbiw	r24, 0x00	; 0
     28e:	e1 f6       	brne	.-72     	; 0x248 <_ZN3GPS4readEv+0x5e>
     290:	09 c0       	rjmp	.+18     	; 0x2a4 <_ZN3GPS4readEv+0xba>
     292:	8c e2       	ldi	r24, 0x2C	; 44
     294:	93 e0       	ldi	r25, 0x03	; 3
     296:	0e 94 8e 2c 	call	0x591c	; 0x591c <_ZN8SoftUart19SoftUartReceiveDataEv>
     29a:	e7 01       	movw	r28, r14
     29c:	89 93       	st	Y+, r24
     29e:	01 e0       	ldi	r16, 0x01	; 1
     2a0:	10 e0       	ldi	r17, 0x00	; 0
     2a2:	d5 cf       	rjmp	.-86     	; 0x24e <_ZN3GPS4readEv+0x64>
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	1f 91       	pop	r17
     2aa:	0f 91       	pop	r16
     2ac:	ff 90       	pop	r15
     2ae:	ef 90       	pop	r14
     2b0:	df 90       	pop	r13
     2b2:	cf 90       	pop	r12
     2b4:	08 95       	ret

000002b6 <_ZN3GPS7readGpsEv>:
     2b6:	0f 93       	push	r16
     2b8:	1f 93       	push	r17
     2ba:	cf 93       	push	r28
     2bc:	8c 01       	movw	r16, r24
     2be:	cf e1       	ldi	r28, 0x1F	; 31
     2c0:	c8 01       	movw	r24, r16
     2c2:	93 df       	rcall	.-218    	; 0x1ea <_ZN3GPS4readEv>
     2c4:	00 97       	sbiw	r24, 0x00	; 0
     2c6:	19 f4       	brne	.+6      	; 0x2ce <_ZN3GPS7readGpsEv+0x18>
     2c8:	c1 50       	subi	r28, 0x01	; 1
     2ca:	d1 f7       	brne	.-12     	; 0x2c0 <_ZN3GPS7readGpsEv+0xa>
     2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <_ZN3GPS7readGpsEv+0x1c>
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	cf 91       	pop	r28
     2d4:	1f 91       	pop	r17
     2d6:	0f 91       	pop	r16
     2d8:	08 95       	ret

000002da <_ZN3GPS25aountOfNumberTillThePointEc>:
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	ec 01       	movw	r28, r24
     2e0:	30 df       	rcall	.-416    	; 0x142 <_ZN3GPS7getPartEc>
     2e2:	fe 01       	movw	r30, r28
     2e4:	e8 0f       	add	r30, r24
     2e6:	f9 1f       	adc	r31, r25
     2e8:	20 81       	ld	r18, Z
     2ea:	2e 32       	cpi	r18, 0x2E	; 46
     2ec:	a1 f0       	breq	.+40     	; 0x316 <_ZN3GPS25aountOfNumberTillThePointEc+0x3c>
     2ee:	8a 35       	cpi	r24, 0x5A	; 90
     2f0:	91 05       	cpc	r25, r1
     2f2:	9c f4       	brge	.+38     	; 0x31a <_ZN3GPS25aountOfNumberTillThePointEc+0x40>
     2f4:	01 96       	adiw	r24, 0x01	; 1
     2f6:	fe 01       	movw	r30, r28
     2f8:	e8 0f       	add	r30, r24
     2fa:	f9 1f       	adc	r31, r25
     2fc:	ae 01       	movw	r20, r28
     2fe:	45 5a       	subi	r20, 0xA5	; 165
     300:	5f 4f       	sbci	r21, 0xFF	; 255
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	03 c0       	rjmp	.+6      	; 0x30c <_ZN3GPS25aountOfNumberTillThePointEc+0x32>
     306:	e4 17       	cp	r30, r20
     308:	f5 07       	cpc	r31, r21
     30a:	41 f0       	breq	.+16     	; 0x31c <_ZN3GPS25aountOfNumberTillThePointEc+0x42>
     30c:	8f 5f       	subi	r24, 0xFF	; 255
     30e:	21 91       	ld	r18, Z+
     310:	2e 32       	cpi	r18, 0x2E	; 46
     312:	c9 f7       	brne	.-14     	; 0x306 <_ZN3GPS25aountOfNumberTillThePointEc+0x2c>
     314:	03 c0       	rjmp	.+6      	; 0x31c <_ZN3GPS25aountOfNumberTillThePointEc+0x42>
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	01 c0       	rjmp	.+2      	; 0x31c <_ZN3GPS25aountOfNumberTillThePointEc+0x42>
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	08 95       	ret

00000324 <_ZN3GPS21sizeOfChrechterInPartEc>:
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	ec 01       	movw	r28, r24
     32a:	0b df       	rcall	.-490    	; 0x142 <_ZN3GPS7getPartEc>
     32c:	fe 01       	movw	r30, r28
     32e:	e8 0f       	add	r30, r24
     330:	f9 1f       	adc	r31, r25
     332:	20 81       	ld	r18, Z
     334:	2c 32       	cpi	r18, 0x2C	; 44
     336:	a1 f0       	breq	.+40     	; 0x360 <_ZN3GPS21sizeOfChrechterInPartEc+0x3c>
     338:	8a 35       	cpi	r24, 0x5A	; 90
     33a:	91 05       	cpc	r25, r1
     33c:	9c f4       	brge	.+38     	; 0x364 <_ZN3GPS21sizeOfChrechterInPartEc+0x40>
     33e:	01 96       	adiw	r24, 0x01	; 1
     340:	fe 01       	movw	r30, r28
     342:	e8 0f       	add	r30, r24
     344:	f9 1f       	adc	r31, r25
     346:	ae 01       	movw	r20, r28
     348:	45 5a       	subi	r20, 0xA5	; 165
     34a:	5f 4f       	sbci	r21, 0xFF	; 255
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	03 c0       	rjmp	.+6      	; 0x356 <_ZN3GPS21sizeOfChrechterInPartEc+0x32>
     350:	e4 17       	cp	r30, r20
     352:	f5 07       	cpc	r31, r21
     354:	41 f0       	breq	.+16     	; 0x366 <_ZN3GPS21sizeOfChrechterInPartEc+0x42>
     356:	8f 5f       	subi	r24, 0xFF	; 255
     358:	21 91       	ld	r18, Z+
     35a:	2c 32       	cpi	r18, 0x2C	; 44
     35c:	c9 f7       	brne	.-14     	; 0x350 <_ZN3GPS21sizeOfChrechterInPartEc+0x2c>
     35e:	03 c0       	rjmp	.+6      	; 0x366 <_ZN3GPS21sizeOfChrechterInPartEc+0x42>
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	01 c0       	rjmp	.+2      	; 0x366 <_ZN3GPS21sizeOfChrechterInPartEc+0x42>
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	df 91       	pop	r29
     36a:	cf 91       	pop	r28
     36c:	08 95       	ret

0000036e <_ZN3GPS13degCalculatorEcm>:
     36e:	8f 92       	push	r8
     370:	9f 92       	push	r9
     372:	af 92       	push	r10
     374:	bf 92       	push	r11
     376:	cf 92       	push	r12
     378:	df 92       	push	r13
     37a:	ef 92       	push	r14
     37c:	ff 92       	push	r15
     37e:	cf 93       	push	r28
     380:	c6 2f       	mov	r28, r22
     382:	25 36       	cpi	r18, 0x65	; 101
     384:	31 05       	cpc	r19, r1
     386:	41 05       	cpc	r20, r1
     388:	51 05       	cpc	r21, r1
     38a:	f8 f0       	brcs	.+62     	; 0x3ca <_ZN3GPS13degCalculatorEcm+0x5c>
     38c:	0f 2e       	mov	r0, r31
     38e:	f4 e6       	ldi	r31, 0x64	; 100
     390:	cf 2e       	mov	r12, r31
     392:	d1 2c       	mov	r13, r1
     394:	e1 2c       	mov	r14, r1
     396:	f1 2c       	mov	r15, r1
     398:	f0 2d       	mov	r31, r0
     39a:	cc 0c       	add	r12, r12
     39c:	dd 1c       	adc	r13, r13
     39e:	ee 1c       	adc	r14, r14
     3a0:	ff 1c       	adc	r15, r15
     3a2:	d7 01       	movw	r26, r14
     3a4:	c6 01       	movw	r24, r12
     3a6:	88 0f       	add	r24, r24
     3a8:	99 1f       	adc	r25, r25
     3aa:	aa 1f       	adc	r26, r26
     3ac:	bb 1f       	adc	r27, r27
     3ae:	88 0f       	add	r24, r24
     3b0:	99 1f       	adc	r25, r25
     3b2:	aa 1f       	adc	r26, r26
     3b4:	bb 1f       	adc	r27, r27
     3b6:	c8 0e       	add	r12, r24
     3b8:	d9 1e       	adc	r13, r25
     3ba:	ea 1e       	adc	r14, r26
     3bc:	fb 1e       	adc	r15, r27
     3be:	c2 16       	cp	r12, r18
     3c0:	d3 06       	cpc	r13, r19
     3c2:	e4 06       	cpc	r14, r20
     3c4:	f5 06       	cpc	r15, r21
     3c6:	48 f3       	brcs	.-46     	; 0x39a <_ZN3GPS13degCalculatorEcm+0x2c>
     3c8:	07 c0       	rjmp	.+14     	; 0x3d8 <_ZN3GPS13degCalculatorEcm+0x6a>
     3ca:	0f 2e       	mov	r0, r31
     3cc:	f4 e6       	ldi	r31, 0x64	; 100
     3ce:	cf 2e       	mov	r12, r31
     3d0:	d1 2c       	mov	r13, r1
     3d2:	e1 2c       	mov	r14, r1
     3d4:	f1 2c       	mov	r15, r1
     3d6:	f0 2d       	mov	r31, r0
     3d8:	ca 01       	movw	r24, r20
     3da:	b9 01       	movw	r22, r18
     3dc:	0e 94 9a 2e 	call	0x5d34	; 0x5d34 <__floatunsisf>
     3e0:	4b 01       	movw	r8, r22
     3e2:	5c 01       	movw	r10, r24
     3e4:	c7 01       	movw	r24, r14
     3e6:	b6 01       	movw	r22, r12
     3e8:	0e 94 9a 2e 	call	0x5d34	; 0x5d34 <__floatunsisf>
     3ec:	9b 01       	movw	r18, r22
     3ee:	ac 01       	movw	r20, r24
     3f0:	c5 01       	movw	r24, r10
     3f2:	b4 01       	movw	r22, r8
     3f4:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <__divsf3>
     3f8:	6b 01       	movw	r12, r22
     3fa:	7c 01       	movw	r14, r24
     3fc:	6c 2f       	mov	r22, r28
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 9c 2e 	call	0x5d38	; 0x5d38 <__floatsisf>
     408:	a7 01       	movw	r20, r14
     40a:	96 01       	movw	r18, r12
     40c:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <__addsf3>
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	40 e7       	ldi	r20, 0x70	; 112
     416:	52 e4       	ldi	r21, 0x42	; 66
     418:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <__divsf3>
     41c:	20 e8       	ldi	r18, 0x80	; 128
     41e:	36 e9       	ldi	r19, 0x96	; 150
     420:	48 e1       	ldi	r20, 0x18	; 24
     422:	5b e4       	ldi	r21, 0x4B	; 75
     424:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <__mulsf3>
     428:	0e 94 6e 2e 	call	0x5cdc	; 0x5cdc <__fixunssfsi>
     42c:	cf 91       	pop	r28
     42e:	ff 90       	pop	r15
     430:	ef 90       	pop	r14
     432:	df 90       	pop	r13
     434:	cf 90       	pop	r12
     436:	bf 90       	pop	r11
     438:	af 90       	pop	r10
     43a:	9f 90       	pop	r9
     43c:	8f 90       	pop	r8
     43e:	08 95       	ret

00000440 <_ZN3GPS9gpsSignalEv>:
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	ec 01       	movw	r28, r24
     446:	61 e0       	ldi	r22, 0x01	; 1
     448:	7c de       	rcall	.-776    	; 0x142 <_ZN3GPS7getPartEc>
     44a:	c8 0f       	add	r28, r24
     44c:	d9 1f       	adc	r29, r25
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	98 81       	ld	r25, Y
     452:	96 35       	cpi	r25, 0x56	; 86
     454:	09 f4       	brne	.+2      	; 0x458 <_ZN3GPS9gpsSignalEv+0x18>
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	08 95       	ret

0000045e <_ZN3GPS12getLongitudeEv>:
     45e:	8f 92       	push	r8
     460:	9f 92       	push	r9
     462:	af 92       	push	r10
     464:	bf 92       	push	r11
     466:	cf 92       	push	r12
     468:	df 92       	push	r13
     46a:	ef 92       	push	r14
     46c:	ff 92       	push	r15
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	8c 01       	movw	r16, r24
     478:	64 e0       	ldi	r22, 0x04	; 4
     47a:	63 de       	rcall	.-826    	; 0x142 <_ZN3GPS7getPartEc>
     47c:	7c 01       	movw	r14, r24
     47e:	64 e0       	ldi	r22, 0x04	; 4
     480:	c8 01       	movw	r24, r16
     482:	50 df       	rcall	.-352    	; 0x324 <_ZN3GPS21sizeOfChrechterInPartEc>
     484:	d8 2e       	mov	r13, r24
     486:	64 e0       	ldi	r22, 0x04	; 4
     488:	c8 01       	movw	r24, r16
     48a:	27 df       	rcall	.-434    	; 0x2da <_ZN3GPS25aountOfNumberTillThePointEc>
     48c:	99 27       	eor	r25, r25
     48e:	f7 01       	movw	r30, r14
     490:	e8 0f       	add	r30, r24
     492:	f9 1f       	adc	r31, r25
     494:	9f 01       	movw	r18, r30
     496:	22 50       	subi	r18, 0x02	; 2
     498:	31 09       	sbc	r19, r1
     49a:	e2 16       	cp	r14, r18
     49c:	f3 06       	cpc	r15, r19
     49e:	5c f5       	brge	.+86     	; 0x4f6 <_ZN3GPS12getLongitudeEv+0x98>
     4a0:	2a e5       	ldi	r18, 0x5A	; 90
     4a2:	e2 16       	cp	r14, r18
     4a4:	f1 04       	cpc	r15, r1
     4a6:	54 f5       	brge	.+84     	; 0x4fc <_ZN3GPS12getLongitudeEv+0x9e>
     4a8:	d8 01       	movw	r26, r16
     4aa:	ae 0d       	add	r26, r14
     4ac:	bf 1d       	adc	r27, r15
     4ae:	af 01       	movw	r20, r30
     4b0:	43 50       	subi	r20, 0x03	; 3
     4b2:	51 09       	sbc	r21, r1
     4b4:	40 0f       	add	r20, r16
     4b6:	51 1f       	adc	r21, r17
     4b8:	b8 01       	movw	r22, r16
     4ba:	66 5a       	subi	r22, 0xA6	; 166
     4bc:	7f 4f       	sbci	r23, 0xFF	; 255
     4be:	c0 e0       	ldi	r28, 0x00	; 0
     4c0:	d0 e0       	ldi	r29, 0x00	; 0
     4c2:	04 c0       	rjmp	.+8      	; 0x4cc <_ZN3GPS12getLongitudeEv+0x6e>
     4c4:	11 96       	adiw	r26, 0x01	; 1
     4c6:	a6 17       	cp	r26, r22
     4c8:	b7 07       	cpc	r27, r23
     4ca:	d1 f0       	breq	.+52     	; 0x500 <_ZN3GPS12getLongitudeEv+0xa2>
     4cc:	9e 01       	movw	r18, r28
     4ce:	22 0f       	add	r18, r18
     4d0:	33 1f       	adc	r19, r19
     4d2:	cc 0f       	add	r28, r28
     4d4:	dd 1f       	adc	r29, r29
     4d6:	cc 0f       	add	r28, r28
     4d8:	dd 1f       	adc	r29, r29
     4da:	cc 0f       	add	r28, r28
     4dc:	dd 1f       	adc	r29, r29
     4de:	c2 0f       	add	r28, r18
     4e0:	d3 1f       	adc	r29, r19
     4e2:	2c 91       	ld	r18, X
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	20 53       	subi	r18, 0x30	; 48
     4e8:	31 09       	sbc	r19, r1
     4ea:	c2 0f       	add	r28, r18
     4ec:	d3 1f       	adc	r29, r19
     4ee:	a4 17       	cp	r26, r20
     4f0:	b5 07       	cpc	r27, r21
     4f2:	41 f7       	brne	.-48     	; 0x4c4 <_ZN3GPS12getLongitudeEv+0x66>
     4f4:	05 c0       	rjmp	.+10     	; 0x500 <_ZN3GPS12getLongitudeEv+0xa2>
     4f6:	c0 e0       	ldi	r28, 0x00	; 0
     4f8:	d0 e0       	ldi	r29, 0x00	; 0
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <_ZN3GPS12getLongitudeEv+0xa2>
     4fc:	c0 e0       	ldi	r28, 0x00	; 0
     4fe:	d0 e0       	ldi	r29, 0x00	; 0
     500:	d8 01       	movw	r26, r16
     502:	a0 56       	subi	r26, 0x60	; 96
     504:	bf 4f       	sbci	r27, 0xFF	; 255
     506:	cd 93       	st	X+, r28
     508:	dc 93       	st	X, r29
     50a:	dc 01       	movw	r26, r24
     50c:	12 97       	sbiw	r26, 0x02	; 2
     50e:	ae 0d       	add	r26, r14
     510:	bf 1d       	adc	r27, r15
     512:	ae 17       	cp	r26, r30
     514:	bf 07       	cpc	r27, r31
     516:	44 f5       	brge	.+80     	; 0x568 <_ZN3GPS12getLongitudeEv+0x10a>
     518:	aa 35       	cpi	r26, 0x5A	; 90
     51a:	b1 05       	cpc	r27, r1
     51c:	44 f5       	brge	.+80     	; 0x56e <_ZN3GPS12getLongitudeEv+0x110>
     51e:	a0 0f       	add	r26, r16
     520:	b1 1f       	adc	r27, r17
     522:	cf 01       	movw	r24, r30
     524:	01 97       	sbiw	r24, 0x01	; 1
     526:	80 0f       	add	r24, r16
     528:	91 1f       	adc	r25, r17
     52a:	a8 01       	movw	r20, r16
     52c:	46 5a       	subi	r20, 0xA6	; 166
     52e:	5f 4f       	sbci	r21, 0xFF	; 255
     530:	60 e0       	ldi	r22, 0x00	; 0
     532:	70 e0       	ldi	r23, 0x00	; 0
     534:	04 c0       	rjmp	.+8      	; 0x53e <_ZN3GPS12getLongitudeEv+0xe0>
     536:	11 96       	adiw	r26, 0x01	; 1
     538:	a4 17       	cp	r26, r20
     53a:	b5 07       	cpc	r27, r21
     53c:	d1 f0       	breq	.+52     	; 0x572 <_ZN3GPS12getLongitudeEv+0x114>
     53e:	9b 01       	movw	r18, r22
     540:	22 0f       	add	r18, r18
     542:	33 1f       	adc	r19, r19
     544:	66 0f       	add	r22, r22
     546:	77 1f       	adc	r23, r23
     548:	66 0f       	add	r22, r22
     54a:	77 1f       	adc	r23, r23
     54c:	66 0f       	add	r22, r22
     54e:	77 1f       	adc	r23, r23
     550:	62 0f       	add	r22, r18
     552:	73 1f       	adc	r23, r19
     554:	2c 91       	ld	r18, X
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	20 53       	subi	r18, 0x30	; 48
     55a:	31 09       	sbc	r19, r1
     55c:	62 0f       	add	r22, r18
     55e:	73 1f       	adc	r23, r19
     560:	8a 17       	cp	r24, r26
     562:	9b 07       	cpc	r25, r27
     564:	41 f7       	brne	.-48     	; 0x536 <_ZN3GPS12getLongitudeEv+0xd8>
     566:	05 c0       	rjmp	.+10     	; 0x572 <_ZN3GPS12getLongitudeEv+0x114>
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	02 c0       	rjmp	.+4      	; 0x572 <_ZN3GPS12getLongitudeEv+0x114>
     56e:	60 e0       	ldi	r22, 0x00	; 0
     570:	70 e0       	ldi	r23, 0x00	; 0
     572:	ed 0c       	add	r14, r13
     574:	f1 1c       	adc	r15, r1
     576:	cf 01       	movw	r24, r30
     578:	01 96       	adiw	r24, 0x01	; 1
     57a:	8e 15       	cp	r24, r14
     57c:	9f 05       	cpc	r25, r15
     57e:	0c f0       	brlt	.+2      	; 0x582 <_ZN3GPS12getLongitudeEv+0x124>
     580:	59 c0       	rjmp	.+178    	; 0x634 <_ZN3GPS12getLongitudeEv+0x1d6>
     582:	fc 01       	movw	r30, r24
     584:	e0 0f       	add	r30, r16
     586:	f1 1f       	adc	r31, r17
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	e8 1a       	sub	r14, r24
     58c:	f1 08       	sbc	r15, r1
     58e:	c8 01       	movw	r24, r16
     590:	8e 0d       	add	r24, r14
     592:	9f 1d       	adc	r25, r15
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	a9 01       	movw	r20, r18
     59a:	09 c0       	rjmp	.+18     	; 0x5ae <_ZN3GPS12getLongitudeEv+0x150>
     59c:	31 96       	adiw	r30, 0x01	; 1
     59e:	20 3a       	cpi	r18, 0xA0	; 160
     5a0:	a6 e8       	ldi	r26, 0x86	; 134
     5a2:	3a 07       	cpc	r19, r26
     5a4:	a1 e0       	ldi	r26, 0x01	; 1
     5a6:	4a 07       	cpc	r20, r26
     5a8:	51 05       	cpc	r21, r1
     5aa:	08 f0       	brcs	.+2      	; 0x5ae <_ZN3GPS12getLongitudeEv+0x150>
     5ac:	46 c0       	rjmp	.+140    	; 0x63a <_ZN3GPS12getLongitudeEv+0x1dc>
     5ae:	49 01       	movw	r8, r18
     5b0:	5a 01       	movw	r10, r20
     5b2:	88 0c       	add	r8, r8
     5b4:	99 1c       	adc	r9, r9
     5b6:	aa 1c       	adc	r10, r10
     5b8:	bb 1c       	adc	r11, r11
     5ba:	75 01       	movw	r14, r10
     5bc:	64 01       	movw	r12, r8
     5be:	cc 0c       	add	r12, r12
     5c0:	dd 1c       	adc	r13, r13
     5c2:	ee 1c       	adc	r14, r14
     5c4:	ff 1c       	adc	r15, r15
     5c6:	cc 0c       	add	r12, r12
     5c8:	dd 1c       	adc	r13, r13
     5ca:	ee 1c       	adc	r14, r14
     5cc:	ff 1c       	adc	r15, r15
     5ce:	8c 0c       	add	r8, r12
     5d0:	9d 1c       	adc	r9, r13
     5d2:	ae 1c       	adc	r10, r14
     5d4:	bf 1c       	adc	r11, r15
     5d6:	c0 80       	ld	r12, Z
     5d8:	d1 2c       	mov	r13, r1
     5da:	20 e3       	ldi	r18, 0x30	; 48
     5dc:	c2 1a       	sub	r12, r18
     5de:	d1 08       	sbc	r13, r1
     5e0:	0d 2c       	mov	r0, r13
     5e2:	00 0c       	add	r0, r0
     5e4:	ee 08       	sbc	r14, r14
     5e6:	ff 08       	sbc	r15, r15
     5e8:	a7 01       	movw	r20, r14
     5ea:	96 01       	movw	r18, r12
     5ec:	28 0d       	add	r18, r8
     5ee:	39 1d       	adc	r19, r9
     5f0:	4a 1d       	adc	r20, r10
     5f2:	5b 1d       	adc	r21, r11
     5f4:	8e 17       	cp	r24, r30
     5f6:	9f 07       	cpc	r25, r31
     5f8:	89 f6       	brne	.-94     	; 0x59c <_ZN3GPS12getLongitudeEv+0x13e>
     5fa:	1f c0       	rjmp	.+62     	; 0x63a <_ZN3GPS12getLongitudeEv+0x1dc>
     5fc:	a5 01       	movw	r20, r10
     5fe:	94 01       	movw	r18, r8
     600:	0e 94 2b 31 	call	0x6256	; 0x6256 <__udivmodsi4>
     604:	60 5d       	subi	r22, 0xD0	; 208
     606:	f7 01       	movw	r30, r14
     608:	62 93       	st	-Z, r22
     60a:	7f 01       	movw	r14, r30
     60c:	62 2f       	mov	r22, r18
     60e:	73 2f       	mov	r23, r19
     610:	84 2f       	mov	r24, r20
     612:	95 2f       	mov	r25, r21
     614:	ec 15       	cp	r30, r12
     616:	fd 05       	cpc	r31, r13
     618:	89 f7       	brne	.-30     	; 0x5fc <_ZN3GPS12getLongitudeEv+0x19e>
     61a:	27 c0       	rjmp	.+78     	; 0x66a <_ZN3GPS12getLongitudeEv+0x20c>
     61c:	ce 01       	movw	r24, r28
     61e:	b9 01       	movw	r22, r18
     620:	0e 94 18 31 	call	0x6230	; 0x6230 <__divmodhi4>
     624:	80 5d       	subi	r24, 0xD0	; 208
     626:	82 93       	st	-Z, r24
     628:	c6 2f       	mov	r28, r22
     62a:	d7 2f       	mov	r29, r23
     62c:	e0 17       	cp	r30, r16
     62e:	f1 07       	cpc	r31, r17
     630:	a9 f7       	brne	.-22     	; 0x61c <_ZN3GPS12getLongitudeEv+0x1be>
     632:	25 c0       	rjmp	.+74     	; 0x67e <_ZN3GPS12getLongitudeEv+0x220>
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	a9 01       	movw	r20, r18
     63a:	c8 01       	movw	r24, r16
     63c:	98 de       	rcall	.-720    	; 0x36e <_ZN3GPS13degCalculatorEcm>
     63e:	f8 01       	movw	r30, r16
     640:	ee 55       	subi	r30, 0x5E	; 94
     642:	ff 4f       	sbci	r31, 0xFF	; 255
     644:	60 83       	st	Z, r22
     646:	71 83       	std	Z+1, r23	; 0x01
     648:	82 83       	std	Z+2, r24	; 0x02
     64a:	93 83       	std	Z+3, r25	; 0x03
     64c:	b2 97       	sbiw	r30, 0x22	; 34
     64e:	10 82       	st	Z, r1
     650:	7f 01       	movw	r14, r30
     652:	68 01       	movw	r12, r16
     654:	f9 e7       	ldi	r31, 0x79	; 121
     656:	cf 0e       	add	r12, r31
     658:	d1 1c       	adc	r13, r1
     65a:	0f 2e       	mov	r0, r31
     65c:	fa e0       	ldi	r31, 0x0A	; 10
     65e:	8f 2e       	mov	r8, r31
     660:	91 2c       	mov	r9, r1
     662:	a1 2c       	mov	r10, r1
     664:	b1 2c       	mov	r11, r1
     666:	f0 2d       	mov	r31, r0
     668:	c9 cf       	rjmp	.-110    	; 0x5fc <_ZN3GPS12getLongitudeEv+0x19e>
     66a:	f8 01       	movw	r30, r16
     66c:	e8 58       	subi	r30, 0x88	; 136
     66e:	ff 4f       	sbci	r31, 0xFF	; 255
     670:	8e e2       	ldi	r24, 0x2E	; 46
     672:	80 83       	st	Z, r24
     674:	0b 58       	subi	r16, 0x8B	; 139
     676:	1f 4f       	sbci	r17, 0xFF	; 255
     678:	2a e0       	ldi	r18, 0x0A	; 10
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	cf cf       	rjmp	.-98     	; 0x61c <_ZN3GPS12getLongitudeEv+0x1be>
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	1f 91       	pop	r17
     684:	0f 91       	pop	r16
     686:	ff 90       	pop	r15
     688:	ef 90       	pop	r14
     68a:	df 90       	pop	r13
     68c:	cf 90       	pop	r12
     68e:	bf 90       	pop	r11
     690:	af 90       	pop	r10
     692:	9f 90       	pop	r9
     694:	8f 90       	pop	r8
     696:	08 95       	ret

00000698 <_ZN3GPS11getLatitudeEv>:
     698:	6f 92       	push	r6
     69a:	7f 92       	push	r7
     69c:	8f 92       	push	r8
     69e:	9f 92       	push	r9
     6a0:	af 92       	push	r10
     6a2:	bf 92       	push	r11
     6a4:	cf 92       	push	r12
     6a6:	df 92       	push	r13
     6a8:	ef 92       	push	r14
     6aa:	ff 92       	push	r15
     6ac:	0f 93       	push	r16
     6ae:	1f 93       	push	r17
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	8c 01       	movw	r16, r24
     6b6:	62 e0       	ldi	r22, 0x02	; 2
     6b8:	44 dd       	rcall	.-1400   	; 0x142 <_ZN3GPS7getPartEc>
     6ba:	7c 01       	movw	r14, r24
     6bc:	62 e0       	ldi	r22, 0x02	; 2
     6be:	c8 01       	movw	r24, r16
     6c0:	31 de       	rcall	.-926    	; 0x324 <_ZN3GPS21sizeOfChrechterInPartEc>
     6c2:	d8 2e       	mov	r13, r24
     6c4:	62 e0       	ldi	r22, 0x02	; 2
     6c6:	c8 01       	movw	r24, r16
     6c8:	08 de       	rcall	.-1008   	; 0x2da <_ZN3GPS25aountOfNumberTillThePointEc>
     6ca:	99 27       	eor	r25, r25
     6cc:	f7 01       	movw	r30, r14
     6ce:	e8 0f       	add	r30, r24
     6d0:	f9 1f       	adc	r31, r25
     6d2:	9f 01       	movw	r18, r30
     6d4:	22 50       	subi	r18, 0x02	; 2
     6d6:	31 09       	sbc	r19, r1
     6d8:	e2 16       	cp	r14, r18
     6da:	f3 06       	cpc	r15, r19
     6dc:	5c f5       	brge	.+86     	; 0x734 <_ZN3GPS11getLatitudeEv+0x9c>
     6de:	2a e5       	ldi	r18, 0x5A	; 90
     6e0:	e2 16       	cp	r14, r18
     6e2:	f1 04       	cpc	r15, r1
     6e4:	54 f5       	brge	.+84     	; 0x73a <_ZN3GPS11getLatitudeEv+0xa2>
     6e6:	d8 01       	movw	r26, r16
     6e8:	ae 0d       	add	r26, r14
     6ea:	bf 1d       	adc	r27, r15
     6ec:	af 01       	movw	r20, r30
     6ee:	43 50       	subi	r20, 0x03	; 3
     6f0:	51 09       	sbc	r21, r1
     6f2:	40 0f       	add	r20, r16
     6f4:	51 1f       	adc	r21, r17
     6f6:	b8 01       	movw	r22, r16
     6f8:	66 5a       	subi	r22, 0xA6	; 166
     6fa:	7f 4f       	sbci	r23, 0xFF	; 255
     6fc:	c0 e0       	ldi	r28, 0x00	; 0
     6fe:	d0 e0       	ldi	r29, 0x00	; 0
     700:	04 c0       	rjmp	.+8      	; 0x70a <_ZN3GPS11getLatitudeEv+0x72>
     702:	11 96       	adiw	r26, 0x01	; 1
     704:	a6 17       	cp	r26, r22
     706:	b7 07       	cpc	r27, r23
     708:	d1 f0       	breq	.+52     	; 0x73e <_ZN3GPS11getLatitudeEv+0xa6>
     70a:	9e 01       	movw	r18, r28
     70c:	22 0f       	add	r18, r18
     70e:	33 1f       	adc	r19, r19
     710:	cc 0f       	add	r28, r28
     712:	dd 1f       	adc	r29, r29
     714:	cc 0f       	add	r28, r28
     716:	dd 1f       	adc	r29, r29
     718:	cc 0f       	add	r28, r28
     71a:	dd 1f       	adc	r29, r29
     71c:	c2 0f       	add	r28, r18
     71e:	d3 1f       	adc	r29, r19
     720:	2c 91       	ld	r18, X
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	20 53       	subi	r18, 0x30	; 48
     726:	31 09       	sbc	r19, r1
     728:	c2 0f       	add	r28, r18
     72a:	d3 1f       	adc	r29, r19
     72c:	a4 17       	cp	r26, r20
     72e:	b5 07       	cpc	r27, r21
     730:	41 f7       	brne	.-48     	; 0x702 <_ZN3GPS11getLatitudeEv+0x6a>
     732:	05 c0       	rjmp	.+10     	; 0x73e <_ZN3GPS11getLatitudeEv+0xa6>
     734:	c0 e0       	ldi	r28, 0x00	; 0
     736:	d0 e0       	ldi	r29, 0x00	; 0
     738:	02 c0       	rjmp	.+4      	; 0x73e <_ZN3GPS11getLatitudeEv+0xa6>
     73a:	c0 e0       	ldi	r28, 0x00	; 0
     73c:	d0 e0       	ldi	r29, 0x00	; 0
     73e:	d8 01       	movw	r26, r16
     740:	a2 56       	subi	r26, 0x62	; 98
     742:	bf 4f       	sbci	r27, 0xFF	; 255
     744:	cd 93       	st	X+, r28
     746:	dc 93       	st	X, r29
     748:	dc 01       	movw	r26, r24
     74a:	12 97       	sbiw	r26, 0x02	; 2
     74c:	ae 0d       	add	r26, r14
     74e:	bf 1d       	adc	r27, r15
     750:	ae 17       	cp	r26, r30
     752:	bf 07       	cpc	r27, r31
     754:	44 f5       	brge	.+80     	; 0x7a6 <_ZN3GPS11getLatitudeEv+0x10e>
     756:	aa 35       	cpi	r26, 0x5A	; 90
     758:	b1 05       	cpc	r27, r1
     75a:	44 f5       	brge	.+80     	; 0x7ac <_ZN3GPS11getLatitudeEv+0x114>
     75c:	a0 0f       	add	r26, r16
     75e:	b1 1f       	adc	r27, r17
     760:	cf 01       	movw	r24, r30
     762:	01 97       	sbiw	r24, 0x01	; 1
     764:	80 0f       	add	r24, r16
     766:	91 1f       	adc	r25, r17
     768:	a8 01       	movw	r20, r16
     76a:	46 5a       	subi	r20, 0xA6	; 166
     76c:	5f 4f       	sbci	r21, 0xFF	; 255
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	04 c0       	rjmp	.+8      	; 0x77c <_ZN3GPS11getLatitudeEv+0xe4>
     774:	11 96       	adiw	r26, 0x01	; 1
     776:	a4 17       	cp	r26, r20
     778:	b5 07       	cpc	r27, r21
     77a:	d1 f0       	breq	.+52     	; 0x7b0 <_ZN3GPS11getLatitudeEv+0x118>
     77c:	9b 01       	movw	r18, r22
     77e:	22 0f       	add	r18, r18
     780:	33 1f       	adc	r19, r19
     782:	66 0f       	add	r22, r22
     784:	77 1f       	adc	r23, r23
     786:	66 0f       	add	r22, r22
     788:	77 1f       	adc	r23, r23
     78a:	66 0f       	add	r22, r22
     78c:	77 1f       	adc	r23, r23
     78e:	62 0f       	add	r22, r18
     790:	73 1f       	adc	r23, r19
     792:	2c 91       	ld	r18, X
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	20 53       	subi	r18, 0x30	; 48
     798:	31 09       	sbc	r19, r1
     79a:	62 0f       	add	r22, r18
     79c:	73 1f       	adc	r23, r19
     79e:	8a 17       	cp	r24, r26
     7a0:	9b 07       	cpc	r25, r27
     7a2:	41 f7       	brne	.-48     	; 0x774 <_ZN3GPS11getLatitudeEv+0xdc>
     7a4:	05 c0       	rjmp	.+10     	; 0x7b0 <_ZN3GPS11getLatitudeEv+0x118>
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <_ZN3GPS11getLatitudeEv+0x118>
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	70 e0       	ldi	r23, 0x00	; 0
     7b0:	cf 01       	movw	r24, r30
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	ed 0c       	add	r14, r13
     7b6:	f1 1c       	adc	r15, r1
     7b8:	8e 15       	cp	r24, r14
     7ba:	9f 05       	cpc	r25, r15
     7bc:	0c f0       	brlt	.+2      	; 0x7c0 <_ZN3GPS11getLatitudeEv+0x128>
     7be:	65 c0       	rjmp	.+202    	; 0x88a <_ZN3GPS11getLatitudeEv+0x1f2>
     7c0:	8a 35       	cpi	r24, 0x5A	; 90
     7c2:	91 05       	cpc	r25, r1
     7c4:	0c f0       	brlt	.+2      	; 0x7c8 <_ZN3GPS11getLatitudeEv+0x130>
     7c6:	65 c0       	rjmp	.+202    	; 0x892 <_ZN3GPS11getLatitudeEv+0x1fa>
     7c8:	fc 01       	movw	r30, r24
     7ca:	e0 0f       	add	r30, r16
     7cc:	f1 1f       	adc	r31, r17
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	e8 1a       	sub	r14, r24
     7d2:	f1 08       	sbc	r15, r1
     7d4:	c8 01       	movw	r24, r16
     7d6:	8e 0d       	add	r24, r14
     7d8:	9f 1d       	adc	r25, r15
     7da:	38 01       	movw	r6, r16
     7dc:	aa e5       	ldi	r26, 0x5A	; 90
     7de:	6a 0e       	add	r6, r26
     7e0:	71 1c       	adc	r7, r1
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	a9 01       	movw	r20, r18
     7e8:	0d c0       	rjmp	.+26     	; 0x804 <_ZN3GPS11getLatitudeEv+0x16c>
     7ea:	20 3a       	cpi	r18, 0xA0	; 160
     7ec:	a6 e8       	ldi	r26, 0x86	; 134
     7ee:	3a 07       	cpc	r19, r26
     7f0:	a1 e0       	ldi	r26, 0x01	; 1
     7f2:	4a 07       	cpc	r20, r26
     7f4:	51 05       	cpc	r21, r1
     7f6:	08 f0       	brcs	.+2      	; 0x7fa <_ZN3GPS11getLatitudeEv+0x162>
     7f8:	4f c0       	rjmp	.+158    	; 0x898 <_ZN3GPS11getLatitudeEv+0x200>
     7fa:	31 96       	adiw	r30, 0x01	; 1
     7fc:	6e 16       	cp	r6, r30
     7fe:	7f 06       	cpc	r7, r31
     800:	09 f4       	brne	.+2      	; 0x804 <_ZN3GPS11getLatitudeEv+0x16c>
     802:	4a c0       	rjmp	.+148    	; 0x898 <_ZN3GPS11getLatitudeEv+0x200>
     804:	49 01       	movw	r8, r18
     806:	5a 01       	movw	r10, r20
     808:	88 0c       	add	r8, r8
     80a:	99 1c       	adc	r9, r9
     80c:	aa 1c       	adc	r10, r10
     80e:	bb 1c       	adc	r11, r11
     810:	75 01       	movw	r14, r10
     812:	64 01       	movw	r12, r8
     814:	cc 0c       	add	r12, r12
     816:	dd 1c       	adc	r13, r13
     818:	ee 1c       	adc	r14, r14
     81a:	ff 1c       	adc	r15, r15
     81c:	cc 0c       	add	r12, r12
     81e:	dd 1c       	adc	r13, r13
     820:	ee 1c       	adc	r14, r14
     822:	ff 1c       	adc	r15, r15
     824:	8c 0c       	add	r8, r12
     826:	9d 1c       	adc	r9, r13
     828:	ae 1c       	adc	r10, r14
     82a:	bf 1c       	adc	r11, r15
     82c:	c0 80       	ld	r12, Z
     82e:	d1 2c       	mov	r13, r1
     830:	20 e3       	ldi	r18, 0x30	; 48
     832:	c2 1a       	sub	r12, r18
     834:	d1 08       	sbc	r13, r1
     836:	0d 2c       	mov	r0, r13
     838:	00 0c       	add	r0, r0
     83a:	ee 08       	sbc	r14, r14
     83c:	ff 08       	sbc	r15, r15
     83e:	a7 01       	movw	r20, r14
     840:	96 01       	movw	r18, r12
     842:	28 0d       	add	r18, r8
     844:	39 1d       	adc	r19, r9
     846:	4a 1d       	adc	r20, r10
     848:	5b 1d       	adc	r21, r11
     84a:	8e 17       	cp	r24, r30
     84c:	9f 07       	cpc	r25, r31
     84e:	69 f6       	brne	.-102    	; 0x7ea <_ZN3GPS11getLatitudeEv+0x152>
     850:	23 c0       	rjmp	.+70     	; 0x898 <_ZN3GPS11getLatitudeEv+0x200>
     852:	a5 01       	movw	r20, r10
     854:	94 01       	movw	r18, r8
     856:	0e 94 2b 31 	call	0x6256	; 0x6256 <__udivmodsi4>
     85a:	60 5d       	subi	r22, 0xD0	; 208
     85c:	f7 01       	movw	r30, r14
     85e:	62 93       	st	-Z, r22
     860:	7f 01       	movw	r14, r30
     862:	62 2f       	mov	r22, r18
     864:	73 2f       	mov	r23, r19
     866:	84 2f       	mov	r24, r20
     868:	95 2f       	mov	r25, r21
     86a:	ce 16       	cp	r12, r30
     86c:	df 06       	cpc	r13, r31
     86e:	89 f7       	brne	.-30     	; 0x852 <_ZN3GPS11getLatitudeEv+0x1ba>
     870:	2b c0       	rjmp	.+86     	; 0x8c8 <_ZN3GPS11getLatitudeEv+0x230>
     872:	ce 01       	movw	r24, r28
     874:	b9 01       	movw	r22, r18
     876:	0e 94 18 31 	call	0x6230	; 0x6230 <__divmodhi4>
     87a:	80 5d       	subi	r24, 0xD0	; 208
     87c:	82 93       	st	-Z, r24
     87e:	c6 2f       	mov	r28, r22
     880:	d7 2f       	mov	r29, r23
     882:	e0 17       	cp	r30, r16
     884:	f1 07       	cpc	r31, r17
     886:	a9 f7       	brne	.-22     	; 0x872 <_ZN3GPS11getLatitudeEv+0x1da>
     888:	29 c0       	rjmp	.+82     	; 0x8dc <_ZN3GPS11getLatitudeEv+0x244>
     88a:	20 e0       	ldi	r18, 0x00	; 0
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	a9 01       	movw	r20, r18
     890:	03 c0       	rjmp	.+6      	; 0x898 <_ZN3GPS11getLatitudeEv+0x200>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	a9 01       	movw	r20, r18
     898:	c8 01       	movw	r24, r16
     89a:	69 dd       	rcall	.-1326   	; 0x36e <_ZN3GPS13degCalculatorEcm>
     89c:	f8 01       	movw	r30, r16
     89e:	ea 55       	subi	r30, 0x5A	; 90
     8a0:	ff 4f       	sbci	r31, 0xFF	; 255
     8a2:	60 83       	st	Z, r22
     8a4:	71 83       	std	Z+1, r23	; 0x01
     8a6:	82 83       	std	Z+2, r24	; 0x02
     8a8:	93 83       	std	Z+3, r25	; 0x03
     8aa:	f4 97       	sbiw	r30, 0x34	; 52
     8ac:	10 82       	st	Z, r1
     8ae:	7f 01       	movw	r14, r30
     8b0:	68 01       	movw	r12, r16
     8b2:	fb e6       	ldi	r31, 0x6B	; 107
     8b4:	cf 0e       	add	r12, r31
     8b6:	d1 1c       	adc	r13, r1
     8b8:	0f 2e       	mov	r0, r31
     8ba:	fa e0       	ldi	r31, 0x0A	; 10
     8bc:	8f 2e       	mov	r8, r31
     8be:	91 2c       	mov	r9, r1
     8c0:	a1 2c       	mov	r10, r1
     8c2:	b1 2c       	mov	r11, r1
     8c4:	f0 2d       	mov	r31, r0
     8c6:	c5 cf       	rjmp	.-118    	; 0x852 <_ZN3GPS11getLatitudeEv+0x1ba>
     8c8:	f8 01       	movw	r30, r16
     8ca:	e6 59       	subi	r30, 0x96	; 150
     8cc:	ff 4f       	sbci	r31, 0xFF	; 255
     8ce:	8e e2       	ldi	r24, 0x2E	; 46
     8d0:	80 83       	st	Z, r24
     8d2:	09 59       	subi	r16, 0x99	; 153
     8d4:	1f 4f       	sbci	r17, 0xFF	; 255
     8d6:	2a e0       	ldi	r18, 0x0A	; 10
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	cb cf       	rjmp	.-106    	; 0x872 <_ZN3GPS11getLatitudeEv+0x1da>
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	1f 91       	pop	r17
     8e2:	0f 91       	pop	r16
     8e4:	ff 90       	pop	r15
     8e6:	ef 90       	pop	r14
     8e8:	df 90       	pop	r13
     8ea:	cf 90       	pop	r12
     8ec:	bf 90       	pop	r11
     8ee:	af 90       	pop	r10
     8f0:	9f 90       	pop	r9
     8f2:	8f 90       	pop	r8
     8f4:	7f 90       	pop	r7
     8f6:	6f 90       	pop	r6
     8f8:	08 95       	ret

000008fa <_ZN3GPS8gpsSpeedEv>:
     8fa:	4f 92       	push	r4
     8fc:	5f 92       	push	r5
     8fe:	6f 92       	push	r6
     900:	7f 92       	push	r7
     902:	8f 92       	push	r8
     904:	9f 92       	push	r9
     906:	af 92       	push	r10
     908:	bf 92       	push	r11
     90a:	cf 92       	push	r12
     90c:	df 92       	push	r13
     90e:	ef 92       	push	r14
     910:	ff 92       	push	r15
     912:	0f 93       	push	r16
     914:	1f 93       	push	r17
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	8c 01       	movw	r16, r24
     91c:	66 e0       	ldi	r22, 0x06	; 6
     91e:	11 dc       	rcall	.-2014   	; 0x142 <_ZN3GPS7getPartEc>
     920:	ec 01       	movw	r28, r24
     922:	66 e0       	ldi	r22, 0x06	; 6
     924:	c8 01       	movw	r24, r16
     926:	d9 dc       	rcall	.-1614   	; 0x2da <_ZN3GPS25aountOfNumberTillThePointEc>
     928:	7e 01       	movw	r14, r28
     92a:	e8 0e       	add	r14, r24
     92c:	f1 1c       	adc	r15, r1
     92e:	ce 15       	cp	r28, r14
     930:	df 05       	cpc	r29, r15
     932:	84 f5       	brge	.+96     	; 0x994 <__stack+0x95>
     934:	ca 35       	cpi	r28, 0x5A	; 90
     936:	d1 05       	cpc	r29, r1
     938:	8c f5       	brge	.+98     	; 0x99c <__stack+0x9d>
     93a:	c0 0f       	add	r28, r16
     93c:	d1 1f       	adc	r29, r17
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	e8 1a       	sub	r14, r24
     942:	f1 08       	sbc	r15, r1
     944:	e0 0e       	add	r14, r16
     946:	f1 1e       	adc	r15, r17
     948:	68 01       	movw	r12, r16
     94a:	8a e5       	ldi	r24, 0x5A	; 90
     94c:	c8 0e       	add	r12, r24
     94e:	d1 1c       	adc	r13, r1
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	cb 01       	movw	r24, r22
     956:	04 c0       	rjmp	.+8      	; 0x960 <__stack+0x61>
     958:	21 96       	adiw	r28, 0x01	; 1
     95a:	cc 15       	cp	r28, r12
     95c:	dd 05       	cpc	r29, r13
     95e:	09 f1       	breq	.+66     	; 0x9a2 <__stack+0xa3>
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	40 e2       	ldi	r20, 0x20	; 32
     966:	51 e4       	ldi	r21, 0x41	; 65
     968:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <__mulsf3>
     96c:	4b 01       	movw	r8, r22
     96e:	5c 01       	movw	r10, r24
     970:	68 81       	ld	r22, Y
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	60 53       	subi	r22, 0x30	; 48
     976:	71 09       	sbc	r23, r1
     978:	07 2e       	mov	r0, r23
     97a:	00 0c       	add	r0, r0
     97c:	88 0b       	sbc	r24, r24
     97e:	99 0b       	sbc	r25, r25
     980:	0e 94 9c 2e 	call	0x5d38	; 0x5d38 <__floatsisf>
     984:	a5 01       	movw	r20, r10
     986:	94 01       	movw	r18, r8
     988:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <__addsf3>
     98c:	ce 15       	cp	r28, r14
     98e:	df 05       	cpc	r29, r15
     990:	19 f7       	brne	.-58     	; 0x958 <__stack+0x59>
     992:	07 c0       	rjmp	.+14     	; 0x9a2 <__stack+0xa3>
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	cb 01       	movw	r24, r22
     99a:	03 c0       	rjmp	.+6      	; 0x9a2 <__stack+0xa3>
     99c:	60 e0       	ldi	r22, 0x00	; 0
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	cb 01       	movw	r24, r22
     9a2:	2d ec       	ldi	r18, 0xCD	; 205
     9a4:	3c ec       	ldi	r19, 0xCC	; 204
     9a6:	4c ee       	ldi	r20, 0xEC	; 236
     9a8:	5f e3       	ldi	r21, 0x3F	; 63
     9aa:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <__mulsf3>
     9ae:	0e 94 69 2e 	call	0x5cd2	; 0x5cd2 <__fixsfsi>
     9b2:	7b 01       	movw	r14, r22
     9b4:	f8 01       	movw	r30, r16
     9b6:	e4 56       	subi	r30, 0x64	; 100
     9b8:	ff 4f       	sbci	r31, 0xFF	; 255
     9ba:	71 83       	std	Z+1, r23	; 0x01
     9bc:	60 83       	st	Z, r22
     9be:	c1 e0       	ldi	r28, 0x01	; 1
     9c0:	2b 01       	movw	r4, r22
     9c2:	77 0f       	add	r23, r23
     9c4:	66 08       	sbc	r6, r6
     9c6:	77 08       	sbc	r7, r7
     9c8:	6c 2f       	mov	r22, r28
     9ca:	70 e0       	ldi	r23, 0x00	; 0
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	0e 94 9a 2e 	call	0x5d34	; 0x5d34 <__floatunsisf>
     9d4:	9b 01       	movw	r18, r22
     9d6:	ac 01       	movw	r20, r24
     9d8:	60 e0       	ldi	r22, 0x00	; 0
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	80 e2       	ldi	r24, 0x20	; 32
     9de:	91 e4       	ldi	r25, 0x41	; 65
     9e0:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <pow>
     9e4:	4b 01       	movw	r8, r22
     9e6:	5c 01       	movw	r10, r24
     9e8:	c3 01       	movw	r24, r6
     9ea:	b2 01       	movw	r22, r4
     9ec:	0e 94 9c 2e 	call	0x5d38	; 0x5d38 <__floatsisf>
     9f0:	a5 01       	movw	r20, r10
     9f2:	94 01       	movw	r18, r8
     9f4:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <__gesf2>
     9f8:	18 16       	cp	r1, r24
     9fa:	14 f4       	brge	.+4      	; 0xa00 <__stack+0x101>
     9fc:	cf 5f       	subi	r28, 0xFF	; 255
     9fe:	e4 cf       	rjmp	.-56     	; 0x9c8 <__stack+0xc9>
     a00:	f8 01       	movw	r30, r16
     a02:	ec 0f       	add	r30, r28
     a04:	f1 1d       	adc	r31, r1
     a06:	ed 59       	subi	r30, 0x9D	; 157
     a08:	ff 4f       	sbci	r31, 0xFF	; 255
     a0a:	10 82       	st	Z, r1
     a0c:	cc 23       	and	r28, r28
     a0e:	91 f0       	breq	.+36     	; 0xa34 <__stack+0x135>
     a10:	2a e0       	ldi	r18, 0x0A	; 10
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	c1 50       	subi	r28, 0x01	; 1
     a16:	f8 01       	movw	r30, r16
     a18:	ec 0f       	add	r30, r28
     a1a:	f1 1d       	adc	r31, r1
     a1c:	ed 59       	subi	r30, 0x9D	; 157
     a1e:	ff 4f       	sbci	r31, 0xFF	; 255
     a20:	c7 01       	movw	r24, r14
     a22:	b9 01       	movw	r22, r18
     a24:	0e 94 18 31 	call	0x6230	; 0x6230 <__divmodhi4>
     a28:	80 5d       	subi	r24, 0xD0	; 208
     a2a:	80 83       	st	Z, r24
     a2c:	e6 2e       	mov	r14, r22
     a2e:	f7 2e       	mov	r15, r23
     a30:	c1 11       	cpse	r28, r1
     a32:	f0 cf       	rjmp	.-32     	; 0xa14 <__stack+0x115>
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	1f 91       	pop	r17
     a3a:	0f 91       	pop	r16
     a3c:	ff 90       	pop	r15
     a3e:	ef 90       	pop	r14
     a40:	df 90       	pop	r13
     a42:	cf 90       	pop	r12
     a44:	bf 90       	pop	r11
     a46:	af 90       	pop	r10
     a48:	9f 90       	pop	r9
     a4a:	8f 90       	pop	r8
     a4c:	7f 90       	pop	r7
     a4e:	6f 90       	pop	r6
     a50:	5f 90       	pop	r5
     a52:	4f 90       	pop	r4
     a54:	08 95       	ret

00000a56 <_ZN3GPS23getLongitudeAndLatitudeEv>:
     a56:	ef 92       	push	r14
     a58:	ff 92       	push	r15
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	ec 01       	movw	r28, r24
     a64:	28 dc       	rcall	.-1968   	; 0x2b6 <_ZN3GPS7readGpsEv>
     a66:	89 2b       	or	r24, r25
     a68:	99 f1       	breq	.+102    	; 0xad0 <_ZN3GPS23getLongitudeAndLatitudeEv+0x7a>
     a6a:	ce 01       	movw	r24, r28
     a6c:	e9 dc       	rcall	.-1582   	; 0x440 <_ZN3GPS9gpsSignalEv>
     a6e:	88 23       	and	r24, r24
     a70:	91 f1       	breq	.+100    	; 0xad6 <_ZN3GPS23getLongitudeAndLatitudeEv+0x80>
     a72:	ce 01       	movw	r24, r28
     a74:	f4 dc       	rcall	.-1560   	; 0x45e <_ZN3GPS12getLongitudeEv>
     a76:	ce 01       	movw	r24, r28
     a78:	0f de       	rcall	.-994    	; 0x698 <_ZN3GPS11getLatitudeEv>
     a7a:	ce 01       	movw	r24, r28
     a7c:	3e df       	rcall	.-388    	; 0x8fa <_ZN3GPS8gpsSpeedEv>
     a7e:	7e 01       	movw	r14, r28
     a80:	87 e6       	ldi	r24, 0x67	; 103
     a82:	e8 0e       	add	r14, r24
     a84:	f1 1c       	adc	r15, r1
     a86:	8e 01       	movw	r16, r28
     a88:	0d 57       	subi	r16, 0x7D	; 125
     a8a:	1f 4f       	sbci	r17, 0xFF	; 255
     a8c:	b7 01       	movw	r22, r14
     a8e:	c8 01       	movw	r24, r16
     a90:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
     a94:	f7 01       	movw	r30, r14
     a96:	01 90       	ld	r0, Z+
     a98:	00 20       	and	r0, r0
     a9a:	e9 f7       	brne	.-6      	; 0xa96 <_ZN3GPS23getLongitudeAndLatitudeEv+0x40>
     a9c:	31 97       	sbiw	r30, 0x01	; 1
     a9e:	ee 19       	sub	r30, r14
     aa0:	ff 09       	sbc	r31, r15
     aa2:	ec 0f       	add	r30, r28
     aa4:	fd 1f       	adc	r31, r29
     aa6:	ed 57       	subi	r30, 0x7D	; 125
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	8c e2       	ldi	r24, 0x2C	; 44
     aac:	80 83       	st	Z, r24
     aae:	f7 01       	movw	r30, r14
     ab0:	01 90       	ld	r0, Z+
     ab2:	00 20       	and	r0, r0
     ab4:	e9 f7       	brne	.-6      	; 0xab0 <_ZN3GPS23getLongitudeAndLatitudeEv+0x5a>
     ab6:	be 01       	movw	r22, r28
     ab8:	6b 58       	subi	r22, 0x8B	; 139
     aba:	7f 4f       	sbci	r23, 0xFF	; 255
     abc:	cf 01       	movw	r24, r30
     abe:	8e 19       	sub	r24, r14
     ac0:	9f 09       	sbc	r25, r15
     ac2:	80 0f       	add	r24, r16
     ac4:	91 1f       	adc	r25, r17
     ac6:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
     aca:	80 2f       	mov	r24, r16
     acc:	91 2f       	mov	r25, r17
     ace:	05 c0       	rjmp	.+10     	; 0xada <_ZN3GPS23getLongitudeAndLatitudeEv+0x84>
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	02 c0       	rjmp	.+4      	; 0xada <_ZN3GPS23getLongitudeAndLatitudeEv+0x84>
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	08 95       	ret

00000ae8 <_ZN3GPS11getDegLatitEv>:
	int GPS::getDegLatit()
	{
		return _degLatitude;
     ae8:	82 56       	subi	r24, 0x62	; 98
     aea:	9f 4f       	sbci	r25, 0xFF	; 255
	}
     aec:	fc 01       	movw	r30, r24
     aee:	80 81       	ld	r24, Z
     af0:	91 81       	ldd	r25, Z+1	; 0x01
     af2:	08 95       	ret

00000af4 <_ZN3GPS12getDegLongitEv>:
	int GPS::getDegLongit()
	{
		return _deglongitude;
     af4:	80 56       	subi	r24, 0x60	; 96
     af6:	9f 4f       	sbci	r25, 0xFF	; 255
	}
     af8:	fc 01       	movw	r30, r24
     afa:	80 81       	ld	r24, Z
     afc:	91 81       	ldd	r25, Z+1	; 0x01
     afe:	08 95       	ret

00000b00 <_ZN3GPS8getLatitEv>:
	unsigned long int GPS::getLatit()
	{
		return _latitude;
     b00:	8a 55       	subi	r24, 0x5A	; 90
     b02:	9f 4f       	sbci	r25, 0xFF	; 255
     b04:	fc 01       	movw	r30, r24
     b06:	60 81       	ld	r22, Z
     b08:	71 81       	ldd	r23, Z+1	; 0x01
     b0a:	82 81       	ldd	r24, Z+2	; 0x02
     b0c:	93 81       	ldd	r25, Z+3	; 0x03
	}
     b0e:	08 95       	ret

00000b10 <_ZN3GPS9getLongitEv>:
	unsigned long int GPS::getLongit()
	{
		return _longitude;
     b10:	8e 55       	subi	r24, 0x5E	; 94
     b12:	9f 4f       	sbci	r25, 0xFF	; 255
     b14:	fc 01       	movw	r30, r24
     b16:	60 81       	ld	r22, Z
     b18:	71 81       	ldd	r23, Z+1	; 0x01
     b1a:	82 81       	ldd	r24, Z+2	; 0x02
     b1c:	93 81       	ldd	r25, Z+3	; 0x03
	}
     b1e:	08 95       	ret

00000b20 <_ZN3GPS11getSpeedKphEv>:
	int GPS::getSpeedKph()
	{
		return _speedInKph;
     b20:	84 56       	subi	r24, 0x64	; 100
     b22:	9f 4f       	sbci	r25, 0xFF	; 255
	}
     b24:	fc 01       	movw	r30, r24
     b26:	80 81       	ld	r24, Z
     b28:	91 81       	ldd	r25, Z+1	; 0x01
     b2a:	08 95       	ret

00000b2c <_ZN17MovedFromLocation14updateLocationEv>:
			_longitude = _latitude = 0;
		}
	char* MovedFromLocation::getLongitudeAndLatitude()
	{
		return Location.getLongitudeAndLatitude();
	}
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	ec 01       	movw	r28, r24
     b32:	82 ea       	ldi	r24, 0xA2	; 162
     b34:	93 e0       	ldi	r25, 0x03	; 3
     b36:	d8 df       	rcall	.-80     	; 0xae8 <_ZN3GPS11getDegLatitEv>
     b38:	fe 01       	movw	r30, r28
     b3a:	ee 52       	subi	r30, 0x2E	; 46
     b3c:	ff 4f       	sbci	r31, 0xFF	; 255
     b3e:	91 83       	std	Z+1, r25	; 0x01
     b40:	80 83       	st	Z, r24
     b42:	82 ea       	ldi	r24, 0xA2	; 162
     b44:	93 e0       	ldi	r25, 0x03	; 3
     b46:	d6 df       	rcall	.-84     	; 0xaf4 <_ZN3GPS12getDegLongitEv>
     b48:	fe 01       	movw	r30, r28
     b4a:	e0 53       	subi	r30, 0x30	; 48
     b4c:	ff 4f       	sbci	r31, 0xFF	; 255
     b4e:	91 83       	std	Z+1, r25	; 0x01
     b50:	80 83       	st	Z, r24
     b52:	82 ea       	ldi	r24, 0xA2	; 162
     b54:	93 e0       	ldi	r25, 0x03	; 3
     b56:	d4 df       	rcall	.-88     	; 0xb00 <_ZN3GPS8getLatitEv>
     b58:	fe 01       	movw	r30, r28
     b5a:	e4 53       	subi	r30, 0x34	; 52
     b5c:	ff 4f       	sbci	r31, 0xFF	; 255
     b5e:	60 83       	st	Z, r22
     b60:	71 83       	std	Z+1, r23	; 0x01
     b62:	82 83       	std	Z+2, r24	; 0x02
     b64:	93 83       	std	Z+3, r25	; 0x03
     b66:	82 ea       	ldi	r24, 0xA2	; 162
     b68:	93 e0       	ldi	r25, 0x03	; 3
     b6a:	d2 df       	rcall	.-92     	; 0xb10 <_ZN3GPS9getLongitEv>
     b6c:	c8 53       	subi	r28, 0x38	; 56
     b6e:	df 4f       	sbci	r29, 0xFF	; 255
     b70:	68 83       	st	Y, r22
     b72:	79 83       	std	Y+1, r23	; 0x01
     b74:	8a 83       	std	Y+2, r24	; 0x02
     b76:	9b 83       	std	Y+3, r25	; 0x03
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	08 95       	ret

00000b7e <_ZN17MovedFromLocation12storeNewDataEv>:
     b7e:	cf 92       	push	r12
     b80:	df 92       	push	r13
     b82:	ef 92       	push	r14
     b84:	ff 92       	push	r15
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	fc 01       	movw	r30, r24
     b8c:	ec 52       	subi	r30, 0x2C	; 44
     b8e:	ff 4f       	sbci	r31, 0xFF	; 255
     b90:	20 81       	ld	r18, Z
     b92:	31 81       	ldd	r19, Z+1	; 0x01
     b94:	23 31       	cpi	r18, 0x13	; 19
     b96:	31 05       	cpc	r19, r1
     b98:	14 f0       	brlt	.+4      	; 0xb9e <_ZN17MovedFromLocation12storeNewDataEv+0x20>
     b9a:	11 82       	std	Z+1, r1	; 0x01
     b9c:	10 82       	st	Z, r1
     b9e:	fc 01       	movw	r30, r24
     ba0:	ec 52       	subi	r30, 0x2C	; 44
     ba2:	ff 4f       	sbci	r31, 0xFF	; 255
     ba4:	40 81       	ld	r20, Z
     ba6:	51 81       	ldd	r21, Z+1	; 0x01
     ba8:	dc 01       	movw	r26, r24
     baa:	a4 53       	subi	r26, 0x34	; 52
     bac:	bf 4f       	sbci	r27, 0xFF	; 255
     bae:	cd 90       	ld	r12, X+
     bb0:	dd 90       	ld	r13, X+
     bb2:	ed 90       	ld	r14, X+
     bb4:	fc 90       	ld	r15, X
     bb6:	9a 01       	movw	r18, r20
     bb8:	22 0f       	add	r18, r18
     bba:	33 1f       	adc	r19, r19
     bbc:	22 0f       	add	r18, r18
     bbe:	33 1f       	adc	r19, r19
     bc0:	28 0f       	add	r18, r24
     bc2:	39 1f       	adc	r19, r25
     bc4:	d9 01       	movw	r26, r18
     bc6:	a8 52       	subi	r26, 0x28	; 40
     bc8:	bf 4f       	sbci	r27, 0xFF	; 255
     bca:	cd 92       	st	X+, r12
     bcc:	dd 92       	st	X+, r13
     bce:	ed 92       	st	X+, r14
     bd0:	fc 92       	st	X, r15
     bd2:	13 97       	sbiw	r26, 0x03	; 3
     bd4:	dc 01       	movw	r26, r24
     bd6:	a8 53       	subi	r26, 0x38	; 56
     bd8:	bf 4f       	sbci	r27, 0xFF	; 255
     bda:	8d 91       	ld	r24, X+
     bdc:	9d 91       	ld	r25, X+
     bde:	0d 90       	ld	r0, X+
     be0:	bc 91       	ld	r27, X
     be2:	a0 2d       	mov	r26, r0
     be4:	e9 01       	movw	r28, r18
     be6:	cc 5d       	subi	r28, 0xDC	; 220
     be8:	de 4f       	sbci	r29, 0xFE	; 254
     bea:	88 83       	st	Y, r24
     bec:	99 83       	std	Y+1, r25	; 0x01
     bee:	aa 83       	std	Y+2, r26	; 0x02
     bf0:	bb 83       	std	Y+3, r27	; 0x03
     bf2:	4f 5f       	subi	r20, 0xFF	; 255
     bf4:	5f 4f       	sbci	r21, 0xFF	; 255
     bf6:	51 83       	std	Z+1, r21	; 0x01
     bf8:	40 83       	st	Z, r20
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	ff 90       	pop	r15
     c00:	ef 90       	pop	r14
     c02:	df 90       	pop	r13
     c04:	cf 90       	pop	r12
     c06:	08 95       	ret

00000c08 <_ZN17MovedFromLocation16avrageCalculatorEi>:
     c08:	0f 93       	push	r16
     c0a:	1f 93       	push	r17
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	8b 01       	movw	r16, r22
     c12:	2c e4       	ldi	r18, 0x4C	; 76
     c14:	26 9f       	mul	r18, r22
     c16:	e0 01       	movw	r28, r0
     c18:	27 9f       	mul	r18, r23
     c1a:	d0 0d       	add	r29, r0
     c1c:	11 24       	eor	r1, r1
     c1e:	fe 01       	movw	r30, r28
     c20:	e8 52       	subi	r30, 0x28	; 40
     c22:	ff 4f       	sbci	r31, 0xFF	; 255
     c24:	e8 0f       	add	r30, r24
     c26:	f9 1f       	adc	r31, r25
     c28:	c0 5e       	subi	r28, 0xE0	; 224
     c2a:	de 4f       	sbci	r29, 0xFE	; 254
     c2c:	c8 0f       	add	r28, r24
     c2e:	d9 1f       	adc	r29, r25
     c30:	a0 e0       	ldi	r26, 0x00	; 0
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	41 91       	ld	r20, Z+
     c36:	51 91       	ld	r21, Z+
     c38:	61 91       	ld	r22, Z+
     c3a:	71 91       	ld	r23, Z+
     c3c:	20 81       	ld	r18, Z
     c3e:	31 81       	ldd	r19, Z+1	; 0x01
     c40:	42 1b       	sub	r20, r18
     c42:	53 0b       	sbc	r21, r19
     c44:	9a 01       	movw	r18, r20
     c46:	22 f4       	brpl	.+8      	; 0xc50 <_ZN17MovedFromLocation16avrageCalculatorEi+0x48>
     c48:	22 27       	eor	r18, r18
     c4a:	33 27       	eor	r19, r19
     c4c:	24 1b       	sub	r18, r20
     c4e:	35 0b       	sbc	r19, r21
     c50:	a2 0f       	add	r26, r18
     c52:	b3 1f       	adc	r27, r19
     c54:	ec 17       	cp	r30, r28
     c56:	fd 07       	cpc	r31, r29
     c58:	69 f7       	brne	.-38     	; 0xc34 <_ZN17MovedFromLocation16avrageCalculatorEi+0x2c>
     c5a:	4c e4       	ldi	r20, 0x4C	; 76
     c5c:	40 9f       	mul	r20, r16
     c5e:	90 01       	movw	r18, r0
     c60:	41 9f       	mul	r20, r17
     c62:	30 0d       	add	r19, r0
     c64:	11 24       	eor	r1, r1
     c66:	82 0f       	add	r24, r18
     c68:	93 1f       	adc	r25, r19
     c6a:	fc 01       	movw	r30, r24
     c6c:	e8 52       	subi	r30, 0x28	; 40
     c6e:	ff 4f       	sbci	r31, 0xFF	; 255
     c70:	ec 01       	movw	r28, r24
     c72:	c0 5e       	subi	r28, 0xE0	; 224
     c74:	de 4f       	sbci	r29, 0xFE	; 254
     c76:	20 81       	ld	r18, Z
     c78:	31 81       	ldd	r19, Z+1	; 0x01
     c7a:	88 81       	ld	r24, Y
     c7c:	99 81       	ldd	r25, Y+1	; 0x01
     c7e:	28 1b       	sub	r18, r24
     c80:	39 0b       	sbc	r19, r25
     c82:	c9 01       	movw	r24, r18
     c84:	99 23       	and	r25, r25
     c86:	24 f4       	brge	.+8      	; 0xc90 <_ZN17MovedFromLocation16avrageCalculatorEi+0x88>
     c88:	88 27       	eor	r24, r24
     c8a:	99 27       	eor	r25, r25
     c8c:	82 1b       	sub	r24, r18
     c8e:	93 0b       	sbc	r25, r19
     c90:	8a 0f       	add	r24, r26
     c92:	9b 1f       	adc	r25, r27
     c94:	63 e1       	ldi	r22, 0x13	; 19
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	0e 94 18 31 	call	0x6230	; 0x6230 <__divmodhi4>
     c9c:	cb 01       	movw	r24, r22
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	08 95       	ret

00000ca8 <_ZN17MovedFromLocation11firstAvrageEv>:
     ca8:	ef 92       	push	r14
     caa:	ff 92       	push	r15
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	9c 01       	movw	r18, r24
     cb6:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <_ZZN17MovedFromLocation11firstAvrageEvE13firstLearning>
     cba:	81 11       	cpse	r24, r1
     cbc:	28 c0       	rjmp	.+80     	; 0xd0e <_ZN17MovedFromLocation11firstAvrageEv+0x66>
     cbe:	f9 01       	movw	r30, r18
     cc0:	ec 52       	subi	r30, 0x2C	; 44
     cc2:	ff 4f       	sbci	r31, 0xFF	; 255
     cc4:	40 81       	ld	r20, Z
     cc6:	51 81       	ldd	r21, Z+1	; 0x01
     cc8:	42 31       	cpi	r20, 0x12	; 18
     cca:	51 05       	cpc	r21, r1
     ccc:	0c f1       	brlt	.+66     	; 0xd10 <_ZN17MovedFromLocation11firstAvrageEv+0x68>
     cce:	e9 01       	movw	r28, r18
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	c9 01       	movw	r24, r18
     cd6:	98 df       	rcall	.-208    	; 0xc08 <_ZN17MovedFromLocation16avrageCalculatorEi>
     cd8:	8c 01       	movw	r16, r24
     cda:	7e 01       	movw	r14, r28
     cdc:	80 e9       	ldi	r24, 0x90	; 144
     cde:	e8 1a       	sub	r14, r24
     ce0:	8e ef       	ldi	r24, 0xFE	; 254
     ce2:	f8 0a       	sbc	r15, r24
     ce4:	f7 01       	movw	r30, r14
     ce6:	11 83       	std	Z+1, r17	; 0x01
     ce8:	00 83       	st	Z, r16
     cea:	61 e0       	ldi	r22, 0x01	; 1
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	ce 01       	movw	r24, r28
     cf0:	8b df       	rcall	.-234    	; 0xc08 <_ZN17MovedFromLocation16avrageCalculatorEi>
     cf2:	80 0f       	add	r24, r16
     cf4:	91 1f       	adc	r25, r17
     cf6:	99 23       	and	r25, r25
     cf8:	0c f4       	brge	.+2      	; 0xcfc <_ZN17MovedFromLocation11firstAvrageEv+0x54>
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	95 95       	asr	r25
     cfe:	87 95       	ror	r24
     d00:	f7 01       	movw	r30, r14
     d02:	91 83       	std	Z+1, r25	; 0x01
     d04:	80 83       	st	Z, r24
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <_ZZN17MovedFromLocation11firstAvrageEvE13firstLearning>
     d0c:	01 c0       	rjmp	.+2      	; 0xd10 <_ZN17MovedFromLocation11firstAvrageEv+0x68>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	1f 91       	pop	r17
     d16:	0f 91       	pop	r16
     d18:	ff 90       	pop	r15
     d1a:	ef 90       	pop	r14
     d1c:	08 95       	ret

00000d1e <_ZN17MovedFromLocation20checkAvrageOfMovmentEv>:
     d1e:	0f 93       	push	r16
     d20:	1f 93       	push	r17
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	ec 01       	movw	r28, r24
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	6d df       	rcall	.-294    	; 0xc08 <_ZN17MovedFromLocation16avrageCalculatorEi>
     d2e:	8c 01       	movw	r16, r24
     d30:	61 e0       	ldi	r22, 0x01	; 1
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	ce 01       	movw	r24, r28
     d36:	68 df       	rcall	.-304    	; 0xc08 <_ZN17MovedFromLocation16avrageCalculatorEi>
     d38:	80 0f       	add	r24, r16
     d3a:	91 1f       	adc	r25, r17
     d3c:	99 23       	and	r25, r25
     d3e:	0c f4       	brge	.+2      	; 0xd42 <_ZN17MovedFromLocation20checkAvrageOfMovmentEv+0x24>
     d40:	01 96       	adiw	r24, 0x01	; 1
     d42:	9c 01       	movw	r18, r24
     d44:	35 95       	asr	r19
     d46:	27 95       	ror	r18
     d48:	fe 01       	movw	r30, r28
     d4a:	e0 59       	subi	r30, 0x90	; 144
     d4c:	fe 4f       	sbci	r31, 0xFE	; 254
     d4e:	80 81       	ld	r24, Z
     d50:	91 81       	ldd	r25, Z+1	; 0x01
     d52:	82 0f       	add	r24, r18
     d54:	93 1f       	adc	r25, r19
     d56:	ac 01       	movw	r20, r24
     d58:	99 23       	and	r25, r25
     d5a:	14 f4       	brge	.+4      	; 0xd60 <_ZN17MovedFromLocation20checkAvrageOfMovmentEv+0x42>
     d5c:	4f 5f       	subi	r20, 0xFF	; 255
     d5e:	5f 4f       	sbci	r21, 0xFF	; 255
     d60:	55 95       	asr	r21
     d62:	47 95       	ror	r20
     d64:	c0 59       	subi	r28, 0x90	; 144
     d66:	de 4f       	sbci	r29, 0xFE	; 254
     d68:	59 83       	std	Y+1, r21	; 0x01
     d6a:	48 83       	st	Y, r20
     d6c:	bc 01       	movw	r22, r24
     d6e:	99 23       	and	r25, r25
     d70:	14 f4       	brge	.+4      	; 0xd76 <_ZN17MovedFromLocation20checkAvrageOfMovmentEv+0x58>
     d72:	6d 5f       	subi	r22, 0xFD	; 253
     d74:	7f 4f       	sbci	r23, 0xFF	; 255
     d76:	75 95       	asr	r23
     d78:	67 95       	ror	r22
     d7a:	75 95       	asr	r23
     d7c:	67 95       	ror	r22
     d7e:	46 0f       	add	r20, r22
     d80:	57 1f       	adc	r21, r23
     d82:	42 17       	cp	r20, r18
     d84:	53 07       	cpc	r21, r19
     d86:	1c f4       	brge	.+6      	; 0xd8e <_ZN17MovedFromLocation20checkAvrageOfMovmentEv+0x70>
     d88:	82 2f       	mov	r24, r18
     d8a:	93 2f       	mov	r25, r19
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <_ZN17MovedFromLocation20checkAvrageOfMovmentEv+0x74>
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	1f 91       	pop	r17
     d98:	0f 91       	pop	r16
     d9a:	08 95       	ret

00000d9c <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii>:
     d9c:	cf 92       	push	r12
     d9e:	df 92       	push	r13
     da0:	ef 92       	push	r14
     da2:	ff 92       	push	r15
     da4:	0f 93       	push	r16
     da6:	1f 93       	push	r17
     da8:	cf 93       	push	r28
     daa:	45 2b       	or	r20, r21
     dac:	09 f4       	brne	.+2      	; 0xdb0 <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii+0x14>
     dae:	b6 c0       	rjmp	.+364    	; 0xf1c <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii+0x180>
     db0:	67 34       	cpi	r22, 0x47	; 71
     db2:	71 05       	cpc	r23, r1
     db4:	d4 f4       	brge	.+52     	; 0xdea <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii+0x4e>
     db6:	40 91 69 03 	lds	r20, 0x0369	; 0x800369 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude>
     dba:	50 91 6a 03 	lds	r21, 0x036A	; 0x80036a <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude+0x1>
     dbe:	60 91 6b 03 	lds	r22, 0x036B	; 0x80036b <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude+0x2>
     dc2:	70 91 6c 03 	lds	r23, 0x036C	; 0x80036c <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude+0x3>
     dc6:	41 15       	cp	r20, r1
     dc8:	51 05       	cpc	r21, r1
     dca:	61 05       	cpc	r22, r1
     dcc:	71 05       	cpc	r23, r1
     dce:	69 f0       	breq	.+26     	; 0xdea <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii+0x4e>
     dd0:	00 91 65 03 	lds	r16, 0x0365	; 0x800365 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude>
     dd4:	10 91 66 03 	lds	r17, 0x0366	; 0x800366 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude+0x1>
     dd8:	20 91 67 03 	lds	r18, 0x0367	; 0x800367 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude+0x2>
     ddc:	30 91 68 03 	lds	r19, 0x0368	; 0x800368 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude+0x3>
     de0:	01 15       	cp	r16, r1
     de2:	11 05       	cpc	r17, r1
     de4:	21 05       	cpc	r18, r1
     de6:	31 05       	cpc	r19, r1
     de8:	29 f4       	brne	.+10     	; 0xdf4 <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii+0x58>
     dea:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE11indexMemory>
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	41 c1       	rjmp	.+642    	; 0x1076 <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii+0x2da>
     df4:	c0 91 63 03 	lds	r28, 0x0363	; 0x800363 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8tryTimes>
     df8:	cd 33       	cpi	r28, 0x3D	; 61
     dfa:	08 f0       	brcs	.+2      	; 0xdfe <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii+0x62>
     dfc:	78 c0       	rjmp	.+240    	; 0xeee <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii+0x152>
     dfe:	fc 01       	movw	r30, r24
     e00:	e0 59       	subi	r30, 0x90	; 144
     e02:	fe 4f       	sbci	r31, 0xFE	; 254
     e04:	01 90       	ld	r0, Z+
     e06:	f0 81       	ld	r31, Z
     e08:	e0 2d       	mov	r30, r0
     e0a:	df 01       	movw	r26, r30
     e0c:	ff 23       	and	r31, r31
     e0e:	0c f4       	brge	.+2      	; 0xe12 <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii+0x76>
     e10:	11 96       	adiw	r26, 0x01	; 1
     e12:	b5 95       	asr	r27
     e14:	a7 95       	ror	r26
     e16:	ae 0f       	add	r26, r30
     e18:	bf 1f       	adc	r27, r31
     e1a:	fc 01       	movw	r30, r24
     e1c:	e4 53       	subi	r30, 0x34	; 52
     e1e:	ff 4f       	sbci	r31, 0xFF	; 255
     e20:	01 90       	ld	r0, Z+
     e22:	f0 81       	ld	r31, Z
     e24:	e0 2d       	mov	r30, r0
     e26:	7f 01       	movw	r14, r30
     e28:	e4 1a       	sub	r14, r20
     e2a:	f5 0a       	sbc	r15, r21
     e2c:	b7 01       	movw	r22, r14
     e2e:	22 f4       	brpl	.+8      	; 0xe38 <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii+0x9c>
     e30:	66 27       	eor	r22, r22
     e32:	77 27       	eor	r23, r23
     e34:	6e 19       	sub	r22, r14
     e36:	7f 09       	sbc	r23, r15
     e38:	a6 17       	cp	r26, r22
     e3a:	b7 07       	cpc	r27, r23
     e3c:	94 f0       	brlt	.+36     	; 0xe62 <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii+0xc6>
     e3e:	fc 01       	movw	r30, r24
     e40:	e8 53       	subi	r30, 0x38	; 56
     e42:	ff 4f       	sbci	r31, 0xFF	; 255
     e44:	40 81       	ld	r20, Z
     e46:	51 81       	ldd	r21, Z+1	; 0x01
     e48:	9a 01       	movw	r18, r20
     e4a:	20 1b       	sub	r18, r16
     e4c:	31 0b       	sbc	r19, r17
     e4e:	a9 01       	movw	r20, r18
     e50:	22 f4       	brpl	.+8      	; 0xe5a <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii+0xbe>
     e52:	44 27       	eor	r20, r20
     e54:	55 27       	eor	r21, r21
     e56:	42 1b       	sub	r20, r18
     e58:	53 0b       	sbc	r21, r19
     e5a:	a4 17       	cp	r26, r20
     e5c:	b5 07       	cpc	r27, r21
     e5e:	0c f0       	brlt	.+2      	; 0xe62 <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii+0xc6>
     e60:	05 c1       	rjmp	.+522    	; 0x106c <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii+0x2d0>
     e62:	20 91 61 03 	lds	r18, 0x0361	; 0x800361 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE11degLatitude>
     e66:	30 91 62 03 	lds	r19, 0x0362	; 0x800362 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE11degLatitude+0x1>
     e6a:	fc 01       	movw	r30, r24
     e6c:	ee 52       	subi	r30, 0x2E	; 46
     e6e:	ff 4f       	sbci	r31, 0xFF	; 255
     e70:	40 81       	ld	r20, Z
     e72:	51 81       	ldd	r21, Z+1	; 0x01
     e74:	24 1b       	sub	r18, r20
     e76:	35 0b       	sbc	r19, r21
     e78:	a9 01       	movw	r20, r18
     e7a:	22 f4       	brpl	.+8      	; 0xe84 <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii+0xe8>
     e7c:	44 27       	eor	r20, r20
     e7e:	55 27       	eor	r21, r21
     e80:	42 1b       	sub	r20, r18
     e82:	53 0b       	sbc	r21, r19
     e84:	42 30       	cpi	r20, 0x02	; 2
     e86:	51 05       	cpc	r21, r1
     e88:	ac f4       	brge	.+42     	; 0xeb4 <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii+0x118>
     e8a:	fc 01       	movw	r30, r24
     e8c:	e0 53       	subi	r30, 0x30	; 48
     e8e:	ff 4f       	sbci	r31, 0xFF	; 255
     e90:	20 91 5f 03 	lds	r18, 0x035F	; 0x80035f <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE12degLongitude>
     e94:	30 91 60 03 	lds	r19, 0x0360	; 0x800360 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE12degLongitude+0x1>
     e98:	80 81       	ld	r24, Z
     e9a:	91 81       	ldd	r25, Z+1	; 0x01
     e9c:	a9 01       	movw	r20, r18
     e9e:	48 1b       	sub	r20, r24
     ea0:	59 0b       	sbc	r21, r25
     ea2:	9a 01       	movw	r18, r20
     ea4:	22 f4       	brpl	.+8      	; 0xeae <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii+0x112>
     ea6:	22 27       	eor	r18, r18
     ea8:	33 27       	eor	r19, r19
     eaa:	24 1b       	sub	r18, r20
     eac:	35 0b       	sbc	r19, r21
     eae:	22 30       	cpi	r18, 0x02	; 2
     eb0:	31 05       	cpc	r19, r1
     eb2:	bc f0       	brlt	.+46     	; 0xee2 <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii+0x146>
     eb4:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE4stop>
     eb8:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE11indexMemory>
     ebc:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude>
     ec0:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude+0x1>
     ec4:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude+0x2>
     ec8:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude+0x3>
     ecc:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude>
     ed0:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude+0x1>
     ed4:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude+0x2>
     ed8:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude+0x3>
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	ca c0       	rjmp	.+404    	; 0x1076 <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii+0x2da>
     ee2:	cf 5f       	subi	r28, 0xFF	; 255
     ee4:	c0 93 63 03 	sts	0x0363, r28	; 0x800363 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8tryTimes>
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	c4 c0       	rjmp	.+392    	; 0x1076 <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii+0x2da>
     eee:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE4stop>
     ef2:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE11indexMemory>
     ef6:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude>
     efa:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude+0x1>
     efe:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude+0x2>
     f02:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude+0x3>
     f06:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude>
     f0a:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude+0x1>
     f0e:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude+0x2>
     f12:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude+0x3>
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	ad c0       	rjmp	.+346    	; 0x1076 <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii+0x2da>
     f1c:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8tryTimes>
     f20:	20 91 5e 03 	lds	r18, 0x035E	; 0x80035e <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE4stop>
     f24:	21 11       	cpse	r18, r1
     f26:	a5 c0       	rjmp	.+330    	; 0x1072 <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii+0x2d6>
     f28:	62 30       	cpi	r22, 0x02	; 2
     f2a:	71 05       	cpc	r23, r1
     f2c:	0c f0       	brlt	.+2      	; 0xf30 <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii+0x194>
     f2e:	81 c0       	rjmp	.+258    	; 0x1032 <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii+0x296>
     f30:	fc 01       	movw	r30, r24
     f32:	ee 52       	subi	r30, 0x2E	; 46
     f34:	ff 4f       	sbci	r31, 0xFF	; 255
     f36:	20 81       	ld	r18, Z
     f38:	31 81       	ldd	r19, Z+1	; 0x01
     f3a:	30 93 62 03 	sts	0x0362, r19	; 0x800362 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE11degLatitude+0x1>
     f3e:	20 93 61 03 	sts	0x0361, r18	; 0x800361 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE11degLatitude>
     f42:	32 97       	sbiw	r30, 0x02	; 2
     f44:	20 81       	ld	r18, Z
     f46:	31 81       	ldd	r19, Z+1	; 0x01
     f48:	30 93 60 03 	sts	0x0360, r19	; 0x800360 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE12degLongitude+0x1>
     f4c:	20 93 5f 03 	sts	0x035F, r18	; 0x80035f <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE12degLongitude>
     f50:	20 91 64 03 	lds	r18, 0x0364	; 0x800364 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE11indexMemory>
     f54:	2b 30       	cpi	r18, 0x0B	; 11
     f56:	c0 f5       	brcc	.+112    	; 0xfc8 <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii+0x22c>
     f58:	34 97       	sbiw	r30, 0x04	; 4
     f5a:	c0 90 69 03 	lds	r12, 0x0369	; 0x800369 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude>
     f5e:	d0 90 6a 03 	lds	r13, 0x036A	; 0x80036a <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude+0x1>
     f62:	e0 90 6b 03 	lds	r14, 0x036B	; 0x80036b <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude+0x2>
     f66:	f0 90 6c 03 	lds	r15, 0x036C	; 0x80036c <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude+0x3>
     f6a:	40 81       	ld	r20, Z
     f6c:	51 81       	ldd	r21, Z+1	; 0x01
     f6e:	62 81       	ldd	r22, Z+2	; 0x02
     f70:	73 81       	ldd	r23, Z+3	; 0x03
     f72:	4c 0d       	add	r20, r12
     f74:	5d 1d       	adc	r21, r13
     f76:	6e 1d       	adc	r22, r14
     f78:	7f 1d       	adc	r23, r15
     f7a:	40 93 69 03 	sts	0x0369, r20	; 0x800369 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude>
     f7e:	50 93 6a 03 	sts	0x036A, r21	; 0x80036a <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude+0x1>
     f82:	60 93 6b 03 	sts	0x036B, r22	; 0x80036b <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude+0x2>
     f86:	70 93 6c 03 	sts	0x036C, r23	; 0x80036c <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude+0x3>
     f8a:	34 97       	sbiw	r30, 0x04	; 4
     f8c:	40 91 65 03 	lds	r20, 0x0365	; 0x800365 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude>
     f90:	50 91 66 03 	lds	r21, 0x0366	; 0x800366 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude+0x1>
     f94:	60 91 67 03 	lds	r22, 0x0367	; 0x800367 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude+0x2>
     f98:	70 91 68 03 	lds	r23, 0x0368	; 0x800368 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude+0x3>
     f9c:	80 81       	ld	r24, Z
     f9e:	91 81       	ldd	r25, Z+1	; 0x01
     fa0:	a2 81       	ldd	r26, Z+2	; 0x02
     fa2:	b3 81       	ldd	r27, Z+3	; 0x03
     fa4:	84 0f       	add	r24, r20
     fa6:	95 1f       	adc	r25, r21
     fa8:	a6 1f       	adc	r26, r22
     faa:	b7 1f       	adc	r27, r23
     fac:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude>
     fb0:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude+0x1>
     fb4:	a0 93 67 03 	sts	0x0367, r26	; 0x800367 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude+0x2>
     fb8:	b0 93 68 03 	sts	0x0368, r27	; 0x800368 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude+0x3>
     fbc:	2f 5f       	subi	r18, 0xFF	; 255
     fbe:	20 93 64 03 	sts	0x0364, r18	; 0x800364 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE11indexMemory>
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	57 c0       	rjmp	.+174    	; 0x1076 <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii+0x2da>
     fc8:	60 91 69 03 	lds	r22, 0x0369	; 0x800369 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude>
     fcc:	70 91 6a 03 	lds	r23, 0x036A	; 0x80036a <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude+0x1>
     fd0:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude+0x2>
     fd4:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude+0x3>
     fd8:	0f 2e       	mov	r0, r31
     fda:	fa e0       	ldi	r31, 0x0A	; 10
     fdc:	cf 2e       	mov	r12, r31
     fde:	d1 2c       	mov	r13, r1
     fe0:	e1 2c       	mov	r14, r1
     fe2:	f1 2c       	mov	r15, r1
     fe4:	f0 2d       	mov	r31, r0
     fe6:	a7 01       	movw	r20, r14
     fe8:	96 01       	movw	r18, r12
     fea:	0e 94 2b 31 	call	0x6256	; 0x6256 <__udivmodsi4>
     fee:	20 93 69 03 	sts	0x0369, r18	; 0x800369 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude>
     ff2:	30 93 6a 03 	sts	0x036A, r19	; 0x80036a <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude+0x1>
     ff6:	40 93 6b 03 	sts	0x036B, r20	; 0x80036b <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude+0x2>
     ffa:	50 93 6c 03 	sts	0x036C, r21	; 0x80036c <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude+0x3>
     ffe:	60 91 65 03 	lds	r22, 0x0365	; 0x800365 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude>
    1002:	70 91 66 03 	lds	r23, 0x0366	; 0x800366 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude+0x1>
    1006:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude+0x2>
    100a:	90 91 68 03 	lds	r25, 0x0368	; 0x800368 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude+0x3>
    100e:	a7 01       	movw	r20, r14
    1010:	96 01       	movw	r18, r12
    1012:	0e 94 2b 31 	call	0x6256	; 0x6256 <__udivmodsi4>
    1016:	20 93 65 03 	sts	0x0365, r18	; 0x800365 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude>
    101a:	30 93 66 03 	sts	0x0366, r19	; 0x800366 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude+0x1>
    101e:	40 93 67 03 	sts	0x0367, r20	; 0x800367 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude+0x2>
    1022:	50 93 68 03 	sts	0x0368, r21	; 0x800368 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude+0x3>
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE4stop>
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	22 c0       	rjmp	.+68     	; 0x1076 <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii+0x2da>
    1032:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE11degLatitude+0x1>
    1036:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE11degLatitude>
    103a:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE12degLongitude+0x1>
    103e:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE12degLongitude>
    1042:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude>
    1046:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude+0x1>
    104a:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude+0x2>
    104e:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE8latitude+0x3>
    1052:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude>
    1056:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude+0x1>
    105a:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude+0x2>
    105e:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE9longitude+0x3>
    1062:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <_ZZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEiiE11indexMemory>
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	05 c0       	rjmp	.+10     	; 0x1076 <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii+0x2da>
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii+0x2da>
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	cf 91       	pop	r28
    1078:	1f 91       	pop	r17
    107a:	0f 91       	pop	r16
    107c:	ff 90       	pop	r15
    107e:	ef 90       	pop	r14
    1080:	df 90       	pop	r13
    1082:	cf 90       	pop	r12
    1084:	08 95       	ret

00001086 <_ZN17MovedFromLocationC1Ev>:
    1086:	fc 01       	movw	r30, r24
    1088:	e0 59       	subi	r30, 0x90	; 144
    108a:	fe 4f       	sbci	r31, 0xFE	; 254
    108c:	11 82       	std	Z+1, r1	; 0x01
    108e:	10 82       	st	Z, r1
    1090:	ec 59       	subi	r30, 0x9C	; 156
    1092:	f1 09       	sbc	r31, r1
    1094:	11 82       	std	Z+1, r1	; 0x01
    1096:	10 82       	st	Z, r1
    1098:	32 97       	sbiw	r30, 0x02	; 2
    109a:	11 82       	std	Z+1, r1	; 0x01
    109c:	10 82       	st	Z, r1
    109e:	32 97       	sbiw	r30, 0x02	; 2
    10a0:	11 82       	std	Z+1, r1	; 0x01
    10a2:	10 82       	st	Z, r1
    10a4:	34 97       	sbiw	r30, 0x04	; 4
    10a6:	10 82       	st	Z, r1
    10a8:	11 82       	std	Z+1, r1	; 0x01
    10aa:	12 82       	std	Z+2, r1	; 0x02
    10ac:	13 82       	std	Z+3, r1	; 0x03
    10ae:	34 97       	sbiw	r30, 0x04	; 4
    10b0:	10 82       	st	Z, r1
    10b2:	11 82       	std	Z+1, r1	; 0x01
    10b4:	12 82       	std	Z+2, r1	; 0x02
    10b6:	13 82       	std	Z+3, r1	; 0x03
    10b8:	08 95       	ret

000010ba <_ZN17MovedFromLocation17getGoogleMapsLinkEv>:
	char* MovedFromLocation::getGoogleMapsLink()
	{
    10ba:	ef 92       	push	r14
    10bc:	ff 92       	push	r15
    10be:	0f 93       	push	r16
    10c0:	1f 93       	push	r17
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	c0 55       	subi	r28, 0x50	; 80
    10cc:	d1 09       	sbc	r29, r1
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	8c 01       	movw	r16, r24
		char arr[80];
	    strcpy(arr,"www.google.co.il/maps/place/");
    10da:	8d e1       	ldi	r24, 0x1D	; 29
    10dc:	e5 e1       	ldi	r30, 0x15	; 21
    10de:	f1 e0       	ldi	r31, 0x01	; 1
    10e0:	9e 01       	movw	r18, r28
    10e2:	2f 5f       	subi	r18, 0xFF	; 255
    10e4:	3f 4f       	sbci	r19, 0xFF	; 255
    10e6:	79 01       	movw	r14, r18
    10e8:	d9 01       	movw	r26, r18
    10ea:	01 90       	ld	r0, Z+
    10ec:	0d 92       	st	X+, r0
    10ee:	8a 95       	dec	r24
    10f0:	e1 f7       	brne	.-8      	; 0x10ea <_ZN17MovedFromLocation17getGoogleMapsLinkEv+0x30>
			_degLongitude = _degLatitude = 0;
			_longitude = _latitude = 0;
		}
	char* MovedFromLocation::getLongitudeAndLatitude()
	{
		return Location.getLongitudeAndLatitude();
    10f2:	82 ea       	ldi	r24, 0xA2	; 162
    10f4:	93 e0       	ldi	r25, 0x03	; 3
    10f6:	af dc       	rcall	.-1698   	; 0xa56 <_ZN3GPS23getLongitudeAndLatitudeEv>
	}
	char* MovedFromLocation::getGoogleMapsLink()
	{
		char arr[80];
	    strcpy(arr,"www.google.co.il/maps/place/");
		strcpy(arr+strlen(arr),getLongitudeAndLatitude());
    10f8:	f7 01       	movw	r30, r14
    10fa:	01 90       	ld	r0, Z+
    10fc:	00 20       	and	r0, r0
    10fe:	e9 f7       	brne	.-6      	; 0x10fa <_ZN17MovedFromLocation17getGoogleMapsLinkEv+0x40>
    1100:	bc 01       	movw	r22, r24
    1102:	cf 01       	movw	r24, r30
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
		strcpy(_locationData+50,arr);
    110a:	0e 5c       	subi	r16, 0xCE	; 206
    110c:	1f 4f       	sbci	r17, 0xFF	; 255
    110e:	b7 01       	movw	r22, r14
    1110:	c8 01       	movw	r24, r16
    1112:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
	    return _locationData+50;
	}
    1116:	c8 01       	movw	r24, r16
    1118:	c0 5b       	subi	r28, 0xB0	; 176
    111a:	df 4f       	sbci	r29, 0xFF	; 255
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	de bf       	out	0x3e, r29	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	1f 91       	pop	r17
    112c:	0f 91       	pop	r16
    112e:	ff 90       	pop	r15
    1130:	ef 90       	pop	r14
    1132:	08 95       	ret

00001134 <_ZN17MovedFromLocation12checkIfMovedEv>:
    /*it is checking if the speed of GPS is bigger then 2 Kph, if so it will        */
    /*compare the current location with the memory stored location.                 */
    /********************************************************************************/
    //return 1 for car moving, 0 if it is not moving
	char MovedFromLocation::checkIfMoved()
	{
    1134:	0f 93       	push	r16
    1136:	1f 93       	push	r17
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
    113c:	ec 01       	movw	r28, r24
		int speed = 0, average = 0; 
		//check if there is any data or maybe there is no signal. NULL = no data
		if (Location.getLongitudeAndLatitude())
    113e:	82 ea       	ldi	r24, 0xA2	; 162
    1140:	93 e0       	ldi	r25, 0x03	; 3
    1142:	89 dc       	rcall	.-1774   	; 0xa56 <_ZN3GPS23getLongitudeAndLatitudeEv>
    1144:	89 2b       	or	r24, r25
    1146:	31 f1       	breq	.+76     	; 0x1194 <_ZN17MovedFromLocation12checkIfMovedEv+0x60>
		{
		    
			speed = Location.getSpeedKph();
    1148:	82 ea       	ldi	r24, 0xA2	; 162
    114a:	93 e0       	ldi	r25, 0x03	; 3
    114c:	e9 dc       	rcall	.-1582   	; 0xb20 <_ZN3GPS11getSpeedKphEv>
    114e:	8c 01       	movw	r16, r24
			if (speed > 2)
    1150:	83 30       	cpi	r24, 0x03	; 3
    1152:	91 05       	cpc	r25, r1
    1154:	34 f0       	brlt	.+12     	; 0x1162 <_ZN17MovedFromLocation12checkIfMovedEv+0x2e>
			{
				//checking if the location that stored in the memory is the same one from 
				//the "Location.getLongitudeAndLatitude()", if not, you have 15 chances to 
				//pull it together! other way, a movement massage will be sent.
				return memoriesLastGoodLocationOrCheckSignalInteruption(speed,1);
    1156:	41 e0       	ldi	r20, 0x01	; 1
    1158:	50 e0       	ldi	r21, 0x00	; 0
    115a:	bc 01       	movw	r22, r24
    115c:	ce 01       	movw	r24, r28
    115e:	1e de       	rcall	.-964    	; 0xd9c <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii>
			}
			updateLocation(); //updating the new "Location.getLongitudeAndLatitude()" data
    1160:	1a c0       	rjmp	.+52     	; 0x1196 <_ZN17MovedFromLocation12checkIfMovedEv+0x62>
    1162:	ce 01       	movw	r24, r28
			storeNewData();    //move the new value into the average arr
    1164:	e3 dc       	rcall	.-1594   	; 0xb2c <_ZN17MovedFromLocation14updateLocationEv>
    1166:	ce 01       	movw	r24, r28
    1168:	0a dd       	rcall	.-1516   	; 0xb7e <_ZN17MovedFromLocation12storeNewDataEv>
	
			//before any data is saved, we are calculating the first average witch is the arr
			if (firstAvrage())
    116a:	ce 01       	movw	r24, r28
    116c:	9d dd       	rcall	.-1222   	; 0xca8 <_ZN17MovedFromLocation11firstAvrageEv>
    116e:	88 23       	and	r24, r24
    1170:	51 f0       	breq	.+20     	; 0x1186 <_ZN17MovedFromLocation12checkIfMovedEv+0x52>
			{
				average = checkAvrageOfMovment(); //temporary, just for test. 
    1172:	ce 01       	movw	r24, r28
    1174:	d4 dd       	rcall	.-1112   	; 0xd1e <_ZN17MovedFromLocation20checkAvrageOfMovmentEv>
			}
			if(average)			//original = if(checkAvrageOfMovment())	
    1176:	89 2b       	or	r24, r25
    1178:	31 f0       	breq	.+12     	; 0x1186 <_ZN17MovedFromLocation12checkIfMovedEv+0x52>
			{
				//Move.UARTstring("Check Average Problem... ");
				return memoriesLastGoodLocationOrCheckSignalInteruption(speed,1);
    117a:	41 e0       	ldi	r20, 0x01	; 1
    117c:	50 e0       	ldi	r21, 0x00	; 0
    117e:	b8 01       	movw	r22, r16
    1180:	ce 01       	movw	r24, r28
    1182:	0c de       	rcall	.-1000   	; 0xd9c <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii>
    1184:	08 c0       	rjmp	.+16     	; 0x1196 <_ZN17MovedFromLocation12checkIfMovedEv+0x62>
			}
			else
			{
				memoriesLastGoodLocationOrCheckSignalInteruption(speed);
    1186:	40 e0       	ldi	r20, 0x00	; 0
    1188:	50 e0       	ldi	r21, 0x00	; 0
    118a:	b8 01       	movw	r22, r16
    118c:	ce 01       	movw	r24, r28
    118e:	06 de       	rcall	.-1012   	; 0xd9c <_ZN17MovedFromLocation48memoriesLastGoodLocationOrCheckSignalInteruptionEii>
    1190:	80 e0       	ldi	r24, 0x00	; 0
				return 0;
    1192:	01 c0       	rjmp	.+2      	; 0x1196 <_ZN17MovedFromLocation12checkIfMovedEv+0x62>
    1194:	80 e0       	ldi	r24, 0x00	; 0
			}
		
		}
		return 0;
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	1f 91       	pop	r17
    119c:	0f 91       	pop	r16
    119e:	08 95       	ret

000011a0 <_GLOBAL__sub_I_Location>:
    11a0:	60 e8       	ldi	r22, 0x80	; 128
#include "GpsLocation.h"
#include "UART.h"
#include "Gps.h"

GPS Location;
Uart Move;
    11a2:	75 e2       	ldi	r23, 0x25	; 37
    11a4:	8e e6       	ldi	r24, 0x6E	; 110
    11a6:	93 e0       	ldi	r25, 0x03	; 3
    11a8:	0c 94 f4 2c 	jmp	0x59e8	; 0x59e8 <_ZN4UartC1E8BaudRate>
    11ac:	08 95       	ret

000011ae <_ZN3SMS11sendCommandEPKcb>:
	char _recievedSMS[100];
	int _SMSindex;
	char _1minConterSMSreceived, _10secRestetGSMdelay , _GSMerrorCounter;
	bool _newData, _startTimeCounterSMSreceived, _startTimeCounterGSMreset;
	int _newDataIndex;
	bool sendCommand(const char ptr[], bool checkAck = false){
    11ae:	cf 92       	push	r12
    11b0:	df 92       	push	r13
    11b2:	ef 92       	push	r14
    11b4:	ff 92       	push	r15
    11b6:	0f 93       	push	r16
    11b8:	1f 93       	push	r17
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	2f 97       	sbiw	r28, 0x0f	; 15
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	de bf       	out	0x3e, r29	; 62
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	cd bf       	out	0x3d, r28	; 61
    11ce:	08 2f       	mov	r16, r24
    11d0:	19 2f       	mov	r17, r25
    11d2:	f4 2e       	mov	r15, r20
		int condition;
		gsmSMS.UARTstring(ptr,0);
    11d4:	d8 2e       	mov	r13, r24
    11d6:	c9 2e       	mov	r12, r25
    11d8:	40 e0       	ldi	r20, 0x00	; 0
    11da:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		gsmSMS.UARTsend(13);
    11de:	6d e0       	ldi	r22, 0x0D	; 13
    11e0:	80 2f       	mov	r24, r16
    11e2:	91 2f       	mov	r25, r17
    11e4:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		if (checkAck)
    11e8:	ff 20       	and	r15, r15
    11ea:	09 f4       	brne	.+2      	; 0x11ee <_ZN3SMS11sendCommandEPKcb+0x40>
    11ec:	8c c0       	rjmp	.+280    	; 0x1306 <_ZN3SMS11sendCommandEPKcb+0x158>
		{
			char arr[15] = {0};
    11ee:	fe 01       	movw	r30, r28
    11f0:	31 96       	adiw	r30, 0x01	; 1
    11f2:	8f e0       	ldi	r24, 0x0F	; 15
    11f4:	df 01       	movw	r26, r30
    11f6:	1d 92       	st	X+, r1
    11f8:	8a 95       	dec	r24
    11fa:	e9 f7       	brne	.-6      	; 0x11f6 <_ZN3SMS11sendCommandEPKcb+0x48>
			RXinterruptDisable();
    11fc:	a1 ec       	ldi	r26, 0xC1	; 193
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	8c 91       	ld	r24, X
    1202:	8f 77       	andi	r24, 0x7F	; 127
    1204:	8c 93       	st	X, r24
    1206:	7f 01       	movw	r14, r30
			return false;
		}
		return 0;
	}
	int checkForACkPacket(char getData[], int arrSize){
		int i = 0;
    1208:	00 e0       	ldi	r16, 0x00	; 0
    120a:	10 e0       	ldi	r17, 0x00	; 0
		char data = 0;
		
		do 
		{
			data = gsmSMS.UARTreceive();
    120c:	8d 2d       	mov	r24, r13
    120e:	9c 2d       	mov	r25, r12
    1210:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <_ZN4Uart11UARTreceiveEv>
			getData[i++] = data;
    1214:	0f 5f       	subi	r16, 0xFF	; 255
    1216:	1f 4f       	sbci	r17, 0xFF	; 255
    1218:	f7 01       	movw	r30, r14
    121a:	81 93       	st	Z+, r24
    121c:	7f 01       	movw	r14, r30
		}while(gsmSMS.checkForData() && i < arrSize);
    121e:	8d 2d       	mov	r24, r13
    1220:	9c 2d       	mov	r25, r12
    1222:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <_ZN4Uart12checkForDataEv>
    1226:	88 23       	and	r24, r24
    1228:	09 f4       	brne	.+2      	; 0x122c <_ZN3SMS11sendCommandEPKcb+0x7e>
    122a:	6f c0       	rjmp	.+222    	; 0x130a <_ZN3SMS11sendCommandEPKcb+0x15c>
    122c:	0e 30       	cpi	r16, 0x0E	; 14
    122e:	11 05       	cpc	r17, r1
    1230:	69 f7       	brne	.-38     	; 0x120c <_ZN3SMS11sendCommandEPKcb+0x5e>
    1232:	7b c0       	rjmp	.+246    	; 0x132a <_ZN3SMS11sendCommandEPKcb+0x17c>
    1234:	a8 01       	movw	r20, r16
    1236:	11 23       	and	r17, r17
    1238:	14 f4       	brge	.+4      	; 0x123e <_ZN3SMS11sendCommandEPKcb+0x90>
    123a:	40 e0       	ldi	r20, 0x00	; 0
    123c:	50 e0       	ldi	r21, 0x00	; 0
    123e:	55 27       	eor	r21, r21
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    1240:	14 16       	cp	r1, r20
    1242:	15 06       	cpc	r1, r21
    1244:	0c f0       	brlt	.+2      	; 0x1248 <_ZN3SMS11sendCommandEPKcb+0x9a>
    1246:	53 c0       	rjmp	.+166    	; 0x12ee <_ZN3SMS11sendCommandEPKcb+0x140>
    1248:	02 c0       	rjmp	.+4      	; 0x124e <_ZN3SMS11sendCommandEPKcb+0xa0>
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
			if (*arr != 0)
    124a:	4e e0       	ldi	r20, 0x0E	; 14
    124c:	50 e0       	ldi	r21, 0x00	; 0
    124e:	11 e0       	ldi	r17, 0x01	; 1
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	67 e3       	ldi	r22, 0x37	; 55
    1256:	71 e0       	ldi	r23, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    1258:	00 e0       	ldi	r16, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    125a:	e1 e0       	ldi	r30, 0x01	; 1
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	ec 0f       	add	r30, r28
    1260:	fd 1f       	adc	r31, r29
    1262:	e8 0f       	add	r30, r24
    1264:	f9 1f       	adc	r31, r25
    1266:	20 81       	ld	r18, Z
    1268:	25 34       	cpi	r18, 0x45	; 69
    126a:	61 f4       	brne	.+24     	; 0x1284 <_ZN3SMS11sendCommandEPKcb+0xd6>
    126c:	a2 e3       	ldi	r26, 0x32	; 50
    126e:	b1 e0       	ldi	r27, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    1270:	31 91       	ld	r19, Z+
    1272:	2d 91       	ld	r18, X+
    1274:	32 13       	cpse	r19, r18
					{
						status = false;
    1276:	10 2f       	mov	r17, r16
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    1278:	a6 17       	cp	r26, r22
    127a:	b7 07       	cpc	r27, r23
    127c:	c9 f7       	brne	.-14     	; 0x1270 <_ZN3SMS11sendCommandEPKcb+0xc2>
    127e:	05 96       	adiw	r24, 0x05	; 5
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    1280:	11 11       	cpse	r17, r1
    1282:	3d c0       	rjmp	.+122    	; 0x12fe <_ZN3SMS11sendCommandEPKcb+0x150>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    1284:	01 96       	adiw	r24, 0x01	; 1
    1286:	84 17       	cp	r24, r20
    1288:	95 07       	cpc	r25, r21
    128a:	3c f3       	brlt	.-50     	; 0x125a <_ZN3SMS11sendCommandEPKcb+0xac>
    128c:	31 e0       	ldi	r19, 0x01	; 1
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	90 e0       	ldi	r25, 0x00	; 0
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    1292:	60 e0       	ldi	r22, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    1294:	e1 e0       	ldi	r30, 0x01	; 1
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	ec 0f       	add	r30, r28
    129a:	fd 1f       	adc	r31, r29
    129c:	e8 0f       	add	r30, r24
    129e:	f9 1f       	adc	r31, r25
    12a0:	20 81       	ld	r18, Z
    12a2:	2f 34       	cpi	r18, 0x4F	; 79
    12a4:	61 f4       	brne	.+24     	; 0x12be <_ZN3SMS11sendCommandEPKcb+0x110>
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    12a6:	e2 e0       	ldi	r30, 0x02	; 2
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	ec 0f       	add	r30, r28
    12ac:	fd 1f       	adc	r31, r29
    12ae:	e8 0f       	add	r30, r24
    12b0:	f9 1f       	adc	r31, r25
    12b2:	20 81       	ld	r18, Z
    12b4:	2b 34       	cpi	r18, 0x4B	; 75
    12b6:	b1 f5       	brne	.+108    	; 0x1324 <_ZN3SMS11sendCommandEPKcb+0x176>
    12b8:	02 96       	adiw	r24, 0x02	; 2
					{
						status = false;
					}
				}
				if (status)
    12ba:	31 11       	cpse	r19, r1
    12bc:	22 c0       	rjmp	.+68     	; 0x1302 <_ZN3SMS11sendCommandEPKcb+0x154>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    12be:	01 96       	adiw	r24, 0x01	; 1
    12c0:	84 17       	cp	r24, r20
    12c2:	95 07       	cpc	r25, r21
    12c4:	3c f3       	brlt	.-50     	; 0x1294 <_ZN3SMS11sendCommandEPKcb+0xe6>
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	8e 33       	cpi	r24, 0x3E	; 62
    12ca:	99 f0       	breq	.+38     	; 0x12f2 <_ZN3SMS11sendCommandEPKcb+0x144>
    12cc:	fe 01       	movw	r30, r28
    12ce:	32 96       	adiw	r30, 0x02	; 2
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	8c 0f       	add	r24, r28
    12d6:	9d 1f       	adc	r25, r29
    12d8:	48 0f       	add	r20, r24
    12da:	59 1f       	adc	r21, r25
    12dc:	03 c0       	rjmp	.+6      	; 0x12e4 <_ZN3SMS11sendCommandEPKcb+0x136>
    12de:	81 91       	ld	r24, Z+
    12e0:	8e 33       	cpi	r24, 0x3E	; 62
    12e2:	49 f0       	breq	.+18     	; 0x12f6 <_ZN3SMS11sendCommandEPKcb+0x148>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    12e4:	4e 17       	cp	r20, r30
    12e6:	5f 07       	cpc	r21, r31
    12e8:	d1 f7       	brne	.-12     	; 0x12de <_ZN3SMS11sendCommandEPKcb+0x130>
			if (arr[i] == word)
			{
				return true;
			}
		}
		return false;
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	28 c0       	rjmp	.+80     	; 0x133e <_ZN3SMS11sendCommandEPKcb+0x190>
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	26 c0       	rjmp	.+76     	; 0x133e <_ZN3SMS11sendCommandEPKcb+0x190>
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
			{
				return true;
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	24 c0       	rjmp	.+72     	; 0x133e <_ZN3SMS11sendCommandEPKcb+0x190>
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	22 c0       	rjmp	.+68     	; 0x133e <_ZN3SMS11sendCommandEPKcb+0x190>
		} 
		else
		{
			return false;
		}
		return 0;
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	20 c0       	rjmp	.+64     	; 0x133e <_ZN3SMS11sendCommandEPKcb+0x190>
			RXinterruptEnable();
			if (*arr != 0)
			{
				if (compWordInArr(arr,"ERROR",5,condition))
				{
					return false;
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	1e c0       	rjmp	.+60     	; 0x133e <_ZN3SMS11sendCommandEPKcb+0x190>
				}
				else if (compWordInArr(arr,"OK",2,condition))
				{
					return true;
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	1c c0       	rjmp	.+56     	; 0x133e <_ZN3SMS11sendCommandEPKcb+0x190>
				}
			}
		} 
		else
		{
			return false;
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	1a c0       	rjmp	.+52     	; 0x133e <_ZN3SMS11sendCommandEPKcb+0x190>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    130a:	fe 01       	movw	r30, r28
    130c:	e0 0f       	add	r30, r16
    130e:	f1 1f       	adc	r31, r17
    1310:	11 82       	std	Z+1, r1	; 0x01
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    1312:	e1 ec       	ldi	r30, 0xC1	; 193
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	80 68       	ori	r24, 0x80	; 128
    131a:	80 83       	st	Z, r24
			if (*arr != 0)
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	81 11       	cpse	r24, r1
    1320:	89 cf       	rjmp	.-238    	; 0x1234 <_ZN3SMS11sendCommandEPKcb+0x86>
    1322:	eb cf       	rjmp	.-42     	; 0x12fa <_ZN3SMS11sendCommandEPKcb+0x14c>
    1324:	02 96       	adiw	r24, 0x02	; 2
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    1326:	36 2f       	mov	r19, r22
    1328:	ca cf       	rjmp	.-108    	; 0x12be <_ZN3SMS11sendCommandEPKcb+0x110>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    132a:	1f 86       	std	Y+15, r1	; 0x0f
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    132c:	e1 ec       	ldi	r30, 0xC1	; 193
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	80 68       	ori	r24, 0x80	; 128
    1334:	80 83       	st	Z, r24
			if (*arr != 0)
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	88 23       	and	r24, r24
    133a:	f9 f2       	breq	.-66     	; 0x12fa <_ZN3SMS11sendCommandEPKcb+0x14c>
    133c:	86 cf       	rjmp	.-244    	; 0x124a <_ZN3SMS11sendCommandEPKcb+0x9c>
		else
		{
			return false;
		}
		return 0;
	}
    133e:	2f 96       	adiw	r28, 0x0f	; 15
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	f8 94       	cli
    1344:	de bf       	out	0x3e, r29	; 62
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	cd bf       	out	0x3d, r28	; 61
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	1f 91       	pop	r17
    1350:	0f 91       	pop	r16
    1352:	ff 90       	pop	r15
    1354:	ef 90       	pop	r14
    1356:	df 90       	pop	r13
    1358:	cf 90       	pop	r12
    135a:	08 95       	ret

0000135c <_ZN11mainControl13compWordInArrEPcPKccc>:
			{
				arr[i] = arr[i] + 32;
			}
		}
	}	
	bool compWordInArr(char *arr,const char *word, char wordSize, char arrMaxSize)
    135c:	bf 92       	push	r11
    135e:	cf 92       	push	r12
    1360:	df 92       	push	r13
    1362:	ef 92       	push	r14
    1364:	ff 92       	push	r15
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
			TCCR1A = 0x00;
			TCCR1B = (1<<CS10) | (1<<CS12);;  // Timer mode with 1024 prescler
			TIMSK1 = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
	}
	void changeArrToSmallLeters(char *arr, char arrMaxSize){
		for (int i = 0; i < arrMaxSize; i++)
    136e:	e0 2e       	mov	r14, r16
    1370:	f1 2c       	mov	r15, r1
    1372:	1e 14       	cp	r1, r14
    1374:	1f 04       	cpc	r1, r15
    1376:	0c f0       	brlt	.+2      	; 0x137a <_ZN11mainControl13compWordInArrEPcPKccc+0x1e>
    1378:	3e c0       	rjmp	.+124    	; 0x13f6 <_ZN11mainControl13compWordInArrEPcPKccc+0x9a>
    137a:	fb 01       	movw	r30, r22
    137c:	db 01       	movw	r26, r22
    137e:	a0 0f       	add	r26, r16
    1380:	b1 1d       	adc	r27, r1
		{
			if (arr[i] < 'a' && arr[i] >= 'A')
    1382:	80 81       	ld	r24, Z
    1384:	9f eb       	ldi	r25, 0xBF	; 191
    1386:	98 0f       	add	r25, r24
    1388:	90 32       	cpi	r25, 0x20	; 32
    138a:	10 f4       	brcc	.+4      	; 0x1390 <_ZN11mainControl13compWordInArrEPcPKccc+0x34>
			{
				arr[i] = arr[i] + 32;
    138c:	80 5e       	subi	r24, 0xE0	; 224
    138e:	80 83       	st	Z, r24
    1390:	31 96       	adiw	r30, 0x01	; 1
			TCCR1A = 0x00;
			TCCR1B = (1<<CS10) | (1<<CS12);;  // Timer mode with 1024 prescler
			TIMSK1 = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
	}
	void changeArrToSmallLeters(char *arr, char arrMaxSize){
		for (int i = 0; i < arrMaxSize; i++)
    1392:	ea 17       	cp	r30, r26
    1394:	fb 07       	cpc	r31, r27
    1396:	a9 f7       	brne	.-22     	; 0x1382 <_ZN11mainControl13compWordInArrEPcPKccc+0x26>
	{
		changeArrToSmallLeters(arr,arrMaxSize);
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    1398:	fa 01       	movw	r30, r20
    139a:	b0 80       	ld	r11, Z
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	dd 24       	eor	r13, r13
    13a2:	d3 94       	inc	r13
			{
				for (int j = 0; j < wordSize; j++,i++)
    13a4:	02 2f       	mov	r16, r18
    13a6:	10 e0       	ldi	r17, 0x00	; 0
    13a8:	9a 01       	movw	r18, r20
    13aa:	20 0f       	add	r18, r16
    13ac:	31 1f       	adc	r19, r17
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    13ae:	c1 2c       	mov	r12, r1
	{
		changeArrToSmallLeters(arr,arrMaxSize);
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    13b0:	ec 01       	movw	r28, r24
    13b2:	fb 01       	movw	r30, r22
    13b4:	e8 0f       	add	r30, r24
    13b6:	f9 1f       	adc	r31, r25
    13b8:	e0 81       	ld	r30, Z
    13ba:	eb 11       	cpse	r30, r11
    13bc:	16 c0       	rjmp	.+44     	; 0x13ea <_ZN11mainControl13compWordInArrEPcPKccc+0x8e>
			{
				for (int j = 0; j < wordSize; j++,i++)
    13be:	10 16       	cp	r1, r16
    13c0:	11 06       	cpc	r1, r17
    13c2:	8c f4       	brge	.+34     	; 0x13e6 <_ZN11mainControl13compWordInArrEPcPKccc+0x8a>
    13c4:	01 96       	adiw	r24, 0x01	; 1
    13c6:	db 01       	movw	r26, r22
    13c8:	a8 0f       	add	r26, r24
    13ca:	b9 1f       	adc	r27, r25
    13cc:	fa 01       	movw	r30, r20
    13ce:	31 96       	adiw	r30, 0x01	; 1
    13d0:	04 c0       	rjmp	.+8      	; 0x13da <_ZN11mainControl13compWordInArrEPcPKccc+0x7e>
				{
					if (!(arr[i] == word[j]))
    13d2:	9d 91       	ld	r25, X+
    13d4:	81 91       	ld	r24, Z+
    13d6:	98 13       	cpse	r25, r24
					{
						status = false;
    13d8:	dc 2c       	mov	r13, r12
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    13da:	2e 17       	cp	r18, r30
    13dc:	3f 07       	cpc	r19, r31
    13de:	c9 f7       	brne	.-14     	; 0x13d2 <_ZN11mainControl13compWordInArrEPcPKccc+0x76>
    13e0:	c8 01       	movw	r24, r16
    13e2:	8c 0f       	add	r24, r28
    13e4:	9d 1f       	adc	r25, r29
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    13e6:	d1 10       	cpse	r13, r1
    13e8:	08 c0       	rjmp	.+16     	; 0x13fa <_ZN11mainControl13compWordInArrEPcPKccc+0x9e>
	}	
	bool compWordInArr(char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		changeArrToSmallLeters(arr,arrMaxSize);
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    13ea:	01 96       	adiw	r24, 0x01	; 1
    13ec:	8e 15       	cp	r24, r14
    13ee:	9f 05       	cpc	r25, r15
    13f0:	fc f2       	brlt	.-66     	; 0x13b0 <_ZN11mainControl13compWordInArrEPcPKccc+0x54>
				{
					return status;
				}
			}
		}
		return false;
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	03 c0       	rjmp	.+6      	; 0x13fc <_ZN11mainControl13compWordInArrEPcPKccc+0xa0>
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	01 c0       	rjmp	.+2      	; 0x13fc <_ZN11mainControl13compWordInArrEPcPKccc+0xa0>
    13fa:	81 e0       	ldi	r24, 0x01	; 1
	}	
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	1f 91       	pop	r17
    1402:	0f 91       	pop	r16
    1404:	ff 90       	pop	r15
    1406:	ef 90       	pop	r14
    1408:	df 90       	pop	r13
    140a:	cf 90       	pop	r12
    140c:	bf 90       	pop	r11
    140e:	08 95       	ret

00001410 <__vector_18>:
};

Uart check;
mainControl top;
ISR(USART_RX_vect)
{
    1410:	1f 92       	push	r1
    1412:	0f 92       	push	r0
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	0f 92       	push	r0
    1418:	11 24       	eor	r1, r1
    141a:	2f 92       	push	r2
    141c:	3f 92       	push	r3
    141e:	4f 92       	push	r4
    1420:	5f 92       	push	r5
    1422:	6f 92       	push	r6
    1424:	7f 92       	push	r7
    1426:	8f 92       	push	r8
    1428:	9f 92       	push	r9
    142a:	af 92       	push	r10
    142c:	bf 92       	push	r11
    142e:	cf 92       	push	r12
    1430:	df 92       	push	r13
    1432:	ef 92       	push	r14
    1434:	ff 92       	push	r15
    1436:	0f 93       	push	r16
    1438:	1f 93       	push	r17
    143a:	2f 93       	push	r18
    143c:	3f 93       	push	r19
    143e:	4f 93       	push	r20
    1440:	5f 93       	push	r21
    1442:	6f 93       	push	r22
    1444:	7f 93       	push	r23
    1446:	8f 93       	push	r24
    1448:	9f 93       	push	r25
    144a:	af 93       	push	r26
    144c:	bf 93       	push	r27
    144e:	ef 93       	push	r30
    1450:	ff 93       	push	r31
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	ce 54       	subi	r28, 0x4E	; 78
    145c:	d1 09       	sbc	r29, r1
    145e:	de bf       	out	0x3e, r29	; 62
    1460:	cd bf       	out	0x3d, r28	; 61
	RXinterruptDisable();
    1462:	e1 ec       	ldi	r30, 0xC1	; 193
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	8f 77       	andi	r24, 0x7F	; 127
    146a:	80 83       	st	Z, r24
    146c:	ce 01       	movw	r24, r28
    146e:	01 96       	adiw	r24, 0x01	; 1
    1470:	6c 01       	movw	r12, r24
		_startTimeCounterSMSreceived = true;
		return false;
	}
	void checkStatus(){	
		char checkInterrupt[50];
		int i = 0;
    1472:	00 e0       	ldi	r16, 0x00	; 0
    1474:	10 e0       	ldi	r17, 0x00	; 0
    1476:	01 c0       	rjmp	.+2      	; 0x147a <__vector_18+0x6a>
		char data = 0;
		do
		{
			data = gsmSMS.UARTreceive();
			checkInterrupt[i++] = data;
    1478:	87 01       	movw	r16, r14
		char checkInterrupt[50];
		int i = 0;
		char data = 0;
		do
		{
			data = gsmSMS.UARTreceive();
    147a:	8d e4       	ldi	r24, 0x4D	; 77
    147c:	94 e0       	ldi	r25, 0x04	; 4
    147e:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <_ZN4Uart11UARTreceiveEv>
			checkInterrupt[i++] = data;
    1482:	78 01       	movw	r14, r16
    1484:	9f ef       	ldi	r25, 0xFF	; 255
    1486:	e9 1a       	sub	r14, r25
    1488:	f9 0a       	sbc	r15, r25
    148a:	f6 01       	movw	r30, r12
    148c:	81 93       	st	Z+, r24
    148e:	6f 01       	movw	r12, r30
		}while(gsmSMS.checkForData() && i < 49);
    1490:	8d e4       	ldi	r24, 0x4D	; 77
    1492:	94 e0       	ldi	r25, 0x04	; 4
    1494:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <_ZN4Uart12checkForDataEv>
    1498:	88 23       	and	r24, r24
    149a:	09 f4       	brne	.+2      	; 0x149e <__vector_18+0x8e>
    149c:	61 c2       	rjmp	.+1218   	; 0x1960 <__vector_18+0x550>
    149e:	f1 e3       	ldi	r31, 0x31	; 49
    14a0:	ef 16       	cp	r14, r31
    14a2:	f1 04       	cpc	r15, r1
    14a4:	49 f7       	brne	.-46     	; 0x1478 <__vector_18+0x68>
    14a6:	98 c2       	rjmp	.+1328   	; 0x19d8 <__vector_18+0x5c8>
    14a8:	ff 24       	eor	r15, r15
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    14aa:	1e 14       	cp	r1, r14
    14ac:	1f 04       	cpc	r1, r15
    14ae:	0c f0       	brlt	.+2      	; 0x14b2 <__vector_18+0xa2>
    14b0:	51 c2       	rjmp	.+1186   	; 0x1954 <__vector_18+0x544>
    14b2:	61 e0       	ldi	r22, 0x01	; 1
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	4c e3       	ldi	r20, 0x3C	; 60
    14ba:	51 e0       	ldi	r21, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    14bc:	70 e0       	ldi	r23, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    14be:	e1 e0       	ldi	r30, 0x01	; 1
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	ec 0f       	add	r30, r28
    14c4:	fd 1f       	adc	r31, r29
    14c6:	e8 0f       	add	r30, r24
    14c8:	f9 1f       	adc	r31, r25
    14ca:	20 81       	ld	r18, Z
    14cc:	22 35       	cpi	r18, 0x52	; 82
    14ce:	61 f4       	brne	.+24     	; 0x14e8 <__vector_18+0xd8>
    14d0:	a8 e3       	ldi	r26, 0x38	; 56
    14d2:	b1 e0       	ldi	r27, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    14d4:	31 91       	ld	r19, Z+
    14d6:	2d 91       	ld	r18, X+
    14d8:	32 13       	cpse	r19, r18
					{
						status = false;
    14da:	67 2f       	mov	r22, r23
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    14dc:	a4 17       	cp	r26, r20
    14de:	b5 07       	cpc	r27, r21
    14e0:	c9 f7       	brne	.-14     	; 0x14d4 <__vector_18+0xc4>
    14e2:	04 96       	adiw	r24, 0x04	; 4
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    14e4:	61 11       	cpse	r22, r1
    14e6:	24 c0       	rjmp	.+72     	; 0x1530 <__vector_18+0x120>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    14e8:	01 96       	adiw	r24, 0x01	; 1
    14ea:	8e 15       	cp	r24, r14
    14ec:	9f 05       	cpc	r25, r15
    14ee:	3c f3       	brlt	.-50     	; 0x14be <__vector_18+0xae>
    14f0:	61 e0       	ldi	r22, 0x01	; 1
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	41 e4       	ldi	r20, 0x41	; 65
    14f8:	51 e0       	ldi	r21, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    14fa:	70 e0       	ldi	r23, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    14fc:	e1 e0       	ldi	r30, 0x01	; 1
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	ec 0f       	add	r30, r28
    1502:	fd 1f       	adc	r31, r29
    1504:	e8 0f       	add	r30, r24
    1506:	f9 1f       	adc	r31, r25
    1508:	20 81       	ld	r18, Z
    150a:	23 34       	cpi	r18, 0x43	; 67
    150c:	61 f4       	brne	.+24     	; 0x1526 <__vector_18+0x116>
    150e:	ad e3       	ldi	r26, 0x3D	; 61
    1510:	b1 e0       	ldi	r27, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    1512:	31 91       	ld	r19, Z+
    1514:	2d 91       	ld	r18, X+
    1516:	32 13       	cpse	r19, r18
					{
						status = false;
    1518:	67 2f       	mov	r22, r23
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    151a:	a4 17       	cp	r26, r20
    151c:	b5 07       	cpc	r27, r21
    151e:	c9 f7       	brne	.-14     	; 0x1512 <__vector_18+0x102>
    1520:	04 96       	adiw	r24, 0x04	; 4
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    1522:	61 11       	cpse	r22, r1
    1524:	05 c0       	rjmp	.+10     	; 0x1530 <__vector_18+0x120>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    1526:	01 96       	adiw	r24, 0x01	; 1
    1528:	8e 15       	cp	r24, r14
    152a:	9f 05       	cpc	r25, r15
    152c:	3c f3       	brlt	.-50     	; 0x14fc <__vector_18+0xec>
    152e:	0a c0       	rjmp	.+20     	; 0x1544 <__vector_18+0x134>
		if (i>1)
		{
			if (compWordInArr(checkInterrupt,"RING",4,i)||compWordInArr(checkInterrupt,"CLIP",4,i))
			{
				//gsmSMS.UARTstring("call received");
				_newData = true;
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <top+0x106>
				_newDataIndex = 3;
    1536:	83 e0       	ldi	r24, 0x03	; 3
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	90 93 57 05 	sts	0x0557, r25	; 0x800557 <top+0x10a>
    153e:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <top+0x109>
    1542:	08 c2       	rjmp	.+1040   	; 0x1954 <__vector_18+0x544>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    1544:	61 e0       	ldi	r22, 0x01	; 1
    1546:	80 e0       	ldi	r24, 0x00	; 0
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	46 e4       	ldi	r20, 0x46	; 70
    154c:	51 e0       	ldi	r21, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    154e:	70 e0       	ldi	r23, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    1550:	e1 e0       	ldi	r30, 0x01	; 1
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	ec 0f       	add	r30, r28
    1556:	fd 1f       	adc	r31, r29
    1558:	e8 0f       	add	r30, r24
    155a:	f9 1f       	adc	r31, r25
    155c:	20 81       	ld	r18, Z
    155e:	23 34       	cpi	r18, 0x43	; 67
    1560:	61 f4       	brne	.+24     	; 0x157a <__vector_18+0x16a>
    1562:	a2 e4       	ldi	r26, 0x42	; 66
    1564:	b1 e0       	ldi	r27, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    1566:	31 91       	ld	r19, Z+
    1568:	2d 91       	ld	r18, X+
    156a:	32 13       	cpse	r19, r18
					{
						status = false;
    156c:	67 2f       	mov	r22, r23
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    156e:	a4 17       	cp	r26, r20
    1570:	b5 07       	cpc	r27, r21
    1572:	c9 f7       	brne	.-14     	; 0x1566 <__vector_18+0x156>
    1574:	04 96       	adiw	r24, 0x04	; 4
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    1576:	61 11       	cpse	r22, r1
    1578:	23 c0       	rjmp	.+70     	; 0x15c0 <__vector_18+0x1b0>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    157a:	01 96       	adiw	r24, 0x01	; 1
    157c:	8e 15       	cp	r24, r14
    157e:	9f 05       	cpc	r25, r15
    1580:	3c f3       	brlt	.-50     	; 0x1550 <__vector_18+0x140>
    1582:	31 e0       	ldi	r19, 0x01	; 1
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	90 e0       	ldi	r25, 0x00	; 0
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    1588:	40 e0       	ldi	r20, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    158a:	e1 e0       	ldi	r30, 0x01	; 1
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	ec 0f       	add	r30, r28
    1590:	fd 1f       	adc	r31, r29
    1592:	e8 0f       	add	r30, r24
    1594:	f9 1f       	adc	r31, r25
    1596:	20 81       	ld	r18, Z
    1598:	23 35       	cpi	r18, 0x53	; 83
    159a:	69 f4       	brne	.+26     	; 0x15b6 <__vector_18+0x1a6>
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    159c:	e2 e0       	ldi	r30, 0x02	; 2
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	ec 0f       	add	r30, r28
    15a2:	fd 1f       	adc	r31, r29
    15a4:	e8 0f       	add	r30, r24
    15a6:	f9 1f       	adc	r31, r25
    15a8:	20 81       	ld	r18, Z
    15aa:	2d 34       	cpi	r18, 0x4D	; 77
    15ac:	09 f0       	breq	.+2      	; 0x15b0 <__vector_18+0x1a0>
    15ae:	0e c2       	rjmp	.+1052   	; 0x19cc <__vector_18+0x5bc>
    15b0:	02 96       	adiw	r24, 0x02	; 2
					{
						status = false;
					}
				}
				if (status)
    15b2:	31 11       	cpse	r19, r1
    15b4:	05 c0       	rjmp	.+10     	; 0x15c0 <__vector_18+0x1b0>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    15b6:	01 96       	adiw	r24, 0x01	; 1
    15b8:	8e 15       	cp	r24, r14
    15ba:	9f 05       	cpc	r25, r15
    15bc:	34 f3       	brlt	.-52     	; 0x158a <__vector_18+0x17a>
    15be:	13 c1       	rjmp	.+550    	; 0x17e6 <__vector_18+0x3d6>
			}
			else if (compWordInArr(checkInterrupt,"CMTI",4,i)||compWordInArr(checkInterrupt,"SM",2,i))
			{
				//gsmSMS.UARTstring("S_M_S");
				
				strcpy(_recievedSMS,checkInterrupt);
    15c0:	be 01       	movw	r22, r28
    15c2:	6f 5f       	subi	r22, 0xFF	; 255
    15c4:	7f 4f       	sbci	r23, 0xFF	; 255
    15c6:	8a ee       	ldi	r24, 0xEA	; 234
    15c8:	94 e0       	ldi	r25, 0x04	; 4
    15ca:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
    15ce:	ed ee       	ldi	r30, 0xED	; 237
    15d0:	f4 e0       	ldi	r31, 0x04	; 4
		}
		return false;
	}
	void setSMSindex()
	{
		int index = 3;
    15d2:	23 e0       	ldi	r18, 0x03	; 3
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	01 c0       	rjmp	.+2      	; 0x15da <__vector_18+0x1ca>
		
		while(_recievedSMS[index++] != ',' && index < 99);
    15d8:	9c 01       	movw	r18, r24
    15da:	c9 01       	movw	r24, r18
    15dc:	01 96       	adiw	r24, 0x01	; 1
    15de:	41 91       	ld	r20, Z+
    15e0:	4c 32       	cpi	r20, 0x2C	; 44
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <__vector_18+0x1d6>
    15e4:	c7 c1       	rjmp	.+910    	; 0x1974 <__vector_18+0x564>
    15e6:	83 36       	cpi	r24, 0x63	; 99
    15e8:	91 05       	cpc	r25, r1
    15ea:	b1 f7       	brne	.-20     	; 0x15d8 <__vector_18+0x1c8>
    15ec:	c3 c1       	rjmp	.+902    	; 0x1974 <__vector_18+0x564>
		_SMSindex = _recievedSMS[index++] - '0';
			
		if (_recievedSMS[index]-'0' >= 0 && _recievedSMS[index]-'0' <= 9)
		{
			_SMSindex *= 10;
			_SMSindex += _recievedSMS[index] - '0';
    15ee:	ac 01       	movw	r20, r24
    15f0:	44 0f       	add	r20, r20
    15f2:	55 1f       	adc	r21, r21
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	84 0f       	add	r24, r20
    1602:	95 1f       	adc	r25, r21
    1604:	82 0f       	add	r24, r18
    1606:	93 1f       	adc	r25, r19
    1608:	90 93 4f 05 	sts	0x054F, r25	; 0x80054f <top+0x102>
    160c:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <top+0x101>
		}
		if (_SMSindex > 20)
    1610:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <top+0x101>
    1614:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <top+0x102>
    1618:	85 31       	cpi	r24, 0x15	; 21
    161a:	91 05       	cpc	r25, r1
    161c:	0c f4       	brge	.+2      	; 0x1620 <__vector_18+0x210>
    161e:	d9 c0       	rjmp	.+434    	; 0x17d2 <__vector_18+0x3c2>
		{
			while(_SMSindex != 1)
			{
				deleteSMS(_SMSindex--);	
    1620:	0f 2e       	mov	r0, r31
    1622:	fe e4       	ldi	r31, 0x4E	; 78
    1624:	6f 2e       	mov	r6, r31
    1626:	f5 e0       	ldi	r31, 0x05	; 5
    1628:	7f 2e       	mov	r7, r31
    162a:	f0 2d       	mov	r31, r0
			arr[8] = SMSindex+'0';
		}
		else
		{
			strcpy(arr,"AT+CMGD=  ");
			arr[8] = SMSindex/10+'0';
    162c:	0f 2e       	mov	r0, r31
    162e:	fd ec       	ldi	r31, 0xCD	; 205
    1630:	3f 2e       	mov	r3, r31
    1632:	f0 2d       	mov	r31, r0
		int condition;
		gsmSMS.UARTstring(ptr,0);
		gsmSMS.UARTsend(13);
		if (checkAck)
		{
			char arr[15] = {0};
    1634:	6e 01       	movw	r12, r28
    1636:	23 e3       	ldi	r18, 0x33	; 51
    1638:	c2 0e       	add	r12, r18
    163a:	d1 1c       	adc	r13, r1
			RXinterruptDisable();
    163c:	0f 2e       	mov	r0, r31
    163e:	f1 ec       	ldi	r31, 0xC1	; 193
    1640:	af 2e       	mov	r10, r31
    1642:	b1 2c       	mov	r11, r1
    1644:	f0 2d       	mov	r31, r0
    1646:	21 2c       	mov	r2, r1
    1648:	0f 2e       	mov	r0, r31
    164a:	f7 e3       	ldi	r31, 0x37	; 55
    164c:	8f 2e       	mov	r8, r31
    164e:	f1 e0       	ldi	r31, 0x01	; 1
    1650:	9f 2e       	mov	r9, r31
    1652:	f0 2d       	mov	r31, r0
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
			if (*arr != 0)
    1654:	0f 2e       	mov	r0, r31
    1656:	fe e0       	ldi	r31, 0x0E	; 14
    1658:	4f 2e       	mov	r4, r31
    165a:	f0 2d       	mov	r31, r0
    165c:	51 2c       	mov	r5, r1
		}
		if (_SMSindex > 20)
		{
			while(_SMSindex != 1)
			{
				deleteSMS(_SMSindex--);	
    165e:	9c 01       	movw	r18, r24
    1660:	21 50       	subi	r18, 0x01	; 1
    1662:	31 09       	sbc	r19, r1
    1664:	f3 01       	movw	r30, r6
    1666:	31 83       	std	Z+1, r19	; 0x01
    1668:	20 83       	st	Z, r18
		RXinterruptEnable();
		return true;
	}
	bool deleteSMS(char SMSindex = 1){
		char arr[13];
		if (SMSindex < 10)
    166a:	8a 30       	cpi	r24, 0x0A	; 10
    166c:	78 f4       	brcc	.+30     	; 0x168c <__vector_18+0x27c>
		{
			strcpy(arr,"AT+CMGD= ");
    166e:	9a e0       	ldi	r25, 0x0A	; 10
    1670:	e7 e4       	ldi	r30, 0x47	; 71
    1672:	f1 e0       	ldi	r31, 0x01	; 1
    1674:	de 01       	movw	r26, r28
    1676:	ae 5b       	subi	r26, 0xBE	; 190
    1678:	bf 4f       	sbci	r27, 0xFF	; 255
    167a:	01 90       	ld	r0, Z+
    167c:	0d 92       	st	X+, r0
    167e:	9a 95       	dec	r25
    1680:	e1 f7       	brne	.-8      	; 0x167a <__vector_18+0x26a>
			arr[8] = SMSindex+'0';
    1682:	80 5d       	subi	r24, 0xD0	; 208
    1684:	2b 96       	adiw	r28, 0x0b	; 11
    1686:	8f af       	std	Y+63, r24	; 0x3f
    1688:	2b 97       	sbiw	r28, 0x0b	; 11
    168a:	1f c0       	rjmp	.+62     	; 0x16ca <__vector_18+0x2ba>
		}
		else
		{
			strcpy(arr,"AT+CMGD=  ");
    168c:	9b e0       	ldi	r25, 0x0B	; 11
    168e:	e1 e5       	ldi	r30, 0x51	; 81
    1690:	f1 e0       	ldi	r31, 0x01	; 1
    1692:	de 01       	movw	r26, r28
    1694:	ae 5b       	subi	r26, 0xBE	; 190
    1696:	bf 4f       	sbci	r27, 0xFF	; 255
    1698:	01 90       	ld	r0, Z+
    169a:	0d 92       	st	X+, r0
    169c:	9a 95       	dec	r25
    169e:	e1 f7       	brne	.-8      	; 0x1698 <__vector_18+0x288>
			arr[8] = SMSindex/10+'0';
    16a0:	83 9d       	mul	r24, r3
    16a2:	91 2d       	mov	r25, r1
    16a4:	11 24       	eor	r1, r1
    16a6:	96 95       	lsr	r25
    16a8:	96 95       	lsr	r25
    16aa:	96 95       	lsr	r25
    16ac:	20 e3       	ldi	r18, 0x30	; 48
    16ae:	29 0f       	add	r18, r25
    16b0:	2b 96       	adiw	r28, 0x0b	; 11
    16b2:	2f af       	std	Y+63, r18	; 0x3f
    16b4:	2b 97       	sbiw	r28, 0x0b	; 11
			arr[9] = SMSindex%10+'0';
    16b6:	99 0f       	add	r25, r25
    16b8:	29 2f       	mov	r18, r25
    16ba:	22 0f       	add	r18, r18
    16bc:	22 0f       	add	r18, r18
    16be:	92 0f       	add	r25, r18
    16c0:	89 1b       	sub	r24, r25
    16c2:	80 5d       	subi	r24, 0xD0	; 208
    16c4:	2c 96       	adiw	r28, 0x0c	; 12
    16c6:	8f af       	std	Y+63, r24	; 0x3f
    16c8:	2c 97       	sbiw	r28, 0x0c	; 12
	char _1minConterSMSreceived, _10secRestetGSMdelay , _GSMerrorCounter;
	bool _newData, _startTimeCounterSMSreceived, _startTimeCounterGSMreset;
	int _newDataIndex;
	bool sendCommand(const char ptr[], bool checkAck = false){
		int condition;
		gsmSMS.UARTstring(ptr,0);
    16ca:	40 e0       	ldi	r20, 0x00	; 0
    16cc:	be 01       	movw	r22, r28
    16ce:	6e 5b       	subi	r22, 0xBE	; 190
    16d0:	7f 4f       	sbci	r23, 0xFF	; 255
    16d2:	8d e4       	ldi	r24, 0x4D	; 77
    16d4:	94 e0       	ldi	r25, 0x04	; 4
    16d6:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		gsmSMS.UARTsend(13);
    16da:	6d e0       	ldi	r22, 0x0D	; 13
    16dc:	8d e4       	ldi	r24, 0x4D	; 77
    16de:	94 e0       	ldi	r25, 0x04	; 4
    16e0:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		if (checkAck)
		{
			char arr[15] = {0};
    16e4:	8f e0       	ldi	r24, 0x0F	; 15
    16e6:	f6 01       	movw	r30, r12
    16e8:	11 92       	st	Z+, r1
    16ea:	8a 95       	dec	r24
    16ec:	e9 f7       	brne	.-6      	; 0x16e8 <__vector_18+0x2d8>
			RXinterruptDisable();
    16ee:	f5 01       	movw	r30, r10
    16f0:	80 81       	ld	r24, Z
    16f2:	8f 77       	andi	r24, 0x7F	; 127
    16f4:	80 83       	st	Z, r24
    16f6:	76 01       	movw	r14, r12
			return false;
		}
		return 0;
	}
	int checkForACkPacket(char getData[], int arrSize){
		int i = 0;
    16f8:	00 e0       	ldi	r16, 0x00	; 0
    16fa:	10 e0       	ldi	r17, 0x00	; 0
		char data = 0;
		
		do 
		{
			data = gsmSMS.UARTreceive();
    16fc:	8d e4       	ldi	r24, 0x4D	; 77
    16fe:	94 e0       	ldi	r25, 0x04	; 4
    1700:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <_ZN4Uart11UARTreceiveEv>
			getData[i++] = data;
    1704:	0f 5f       	subi	r16, 0xFF	; 255
    1706:	1f 4f       	sbci	r17, 0xFF	; 255
    1708:	f7 01       	movw	r30, r14
    170a:	81 93       	st	Z+, r24
    170c:	7f 01       	movw	r14, r30
		}while(gsmSMS.checkForData() && i < arrSize);
    170e:	8d e4       	ldi	r24, 0x4D	; 77
    1710:	94 e0       	ldi	r25, 0x04	; 4
    1712:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <_ZN4Uart12checkForDataEv>
    1716:	88 23       	and	r24, r24
    1718:	09 f4       	brne	.+2      	; 0x171c <__vector_18+0x30c>
    171a:	42 c1       	rjmp	.+644    	; 0x19a0 <__vector_18+0x590>
    171c:	0e 30       	cpi	r16, 0x0E	; 14
    171e:	11 05       	cpc	r17, r1
    1720:	69 f7       	brne	.-38     	; 0x16fc <__vector_18+0x2ec>
    1722:	5f c1       	rjmp	.+702    	; 0x19e2 <__vector_18+0x5d2>
    1724:	98 01       	movw	r18, r16
    1726:	11 23       	and	r17, r17
    1728:	14 f4       	brge	.+4      	; 0x172e <__vector_18+0x31e>
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	32 2d       	mov	r19, r2
    172e:	33 27       	eor	r19, r19
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    1730:	12 16       	cp	r1, r18
    1732:	13 06       	cpc	r1, r19
    1734:	0c f0       	brlt	.+2      	; 0x1738 <__vector_18+0x328>
    1736:	46 c0       	rjmp	.+140    	; 0x17c4 <__vector_18+0x3b4>
    1738:	02 c0       	rjmp	.+4      	; 0x173e <__vector_18+0x32e>
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
			if (*arr != 0)
    173a:	24 2d       	mov	r18, r4
    173c:	35 2d       	mov	r19, r5
    173e:	61 e0       	ldi	r22, 0x01	; 1
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	90 e0       	ldi	r25, 0x00	; 0
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    1744:	70 e0       	ldi	r23, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    1746:	f6 01       	movw	r30, r12
    1748:	e8 0f       	add	r30, r24
    174a:	f9 1f       	adc	r31, r25
    174c:	40 81       	ld	r20, Z
    174e:	45 34       	cpi	r20, 0x45	; 69
    1750:	61 f4       	brne	.+24     	; 0x176a <__vector_18+0x35a>
    1752:	a2 e3       	ldi	r26, 0x32	; 50
    1754:	b1 e0       	ldi	r27, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    1756:	51 91       	ld	r21, Z+
    1758:	4d 91       	ld	r20, X+
    175a:	54 13       	cpse	r21, r20
					{
						status = false;
    175c:	67 2f       	mov	r22, r23
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    175e:	8a 16       	cp	r8, r26
    1760:	9b 06       	cpc	r9, r27
    1762:	c9 f7       	brne	.-14     	; 0x1756 <__vector_18+0x346>
    1764:	05 96       	adiw	r24, 0x05	; 5
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    1766:	61 11       	cpse	r22, r1
    1768:	2d c0       	rjmp	.+90     	; 0x17c4 <__vector_18+0x3b4>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    176a:	01 96       	adiw	r24, 0x01	; 1
    176c:	82 17       	cp	r24, r18
    176e:	93 07       	cpc	r25, r19
    1770:	54 f3       	brlt	.-44     	; 0x1746 <__vector_18+0x336>
    1772:	51 e0       	ldi	r21, 0x01	; 1
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	90 e0       	ldi	r25, 0x00	; 0
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    1778:	60 e0       	ldi	r22, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    177a:	f6 01       	movw	r30, r12
    177c:	e8 0f       	add	r30, r24
    177e:	f9 1f       	adc	r31, r25
    1780:	40 81       	ld	r20, Z
    1782:	4f 34       	cpi	r20, 0x4F	; 79
    1784:	69 f4       	brne	.+26     	; 0x17a0 <__vector_18+0x390>
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    1786:	e4 e3       	ldi	r30, 0x34	; 52
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	ec 0f       	add	r30, r28
    178c:	fd 1f       	adc	r31, r29
    178e:	e8 0f       	add	r30, r24
    1790:	f9 1f       	adc	r31, r25
    1792:	40 81       	ld	r20, Z
    1794:	4b 34       	cpi	r20, 0x4B	; 75
    1796:	09 f0       	breq	.+2      	; 0x179a <__vector_18+0x38a>
    1798:	1c c1       	rjmp	.+568    	; 0x19d2 <__vector_18+0x5c2>
    179a:	02 96       	adiw	r24, 0x02	; 2
					{
						status = false;
					}
				}
				if (status)
    179c:	51 11       	cpse	r21, r1
    179e:	12 c0       	rjmp	.+36     	; 0x17c4 <__vector_18+0x3b4>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    17a0:	01 96       	adiw	r24, 0x01	; 1
    17a2:	82 17       	cp	r24, r18
    17a4:	93 07       	cpc	r25, r19
    17a6:	4c f3       	brlt	.-46     	; 0x177a <__vector_18+0x36a>
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    17a8:	8b a9       	ldd	r24, Y+51	; 0x33
    17aa:	8e 33       	cpi	r24, 0x3E	; 62
    17ac:	59 f0       	breq	.+22     	; 0x17c4 <__vector_18+0x3b4>
    17ae:	fe 01       	movw	r30, r28
    17b0:	f4 96       	adiw	r30, 0x34	; 52
    17b2:	2c 0d       	add	r18, r12
    17b4:	3d 1d       	adc	r19, r13
    17b6:	03 c0       	rjmp	.+6      	; 0x17be <__vector_18+0x3ae>
    17b8:	81 91       	ld	r24, Z+
    17ba:	8e 33       	cpi	r24, 0x3E	; 62
    17bc:	19 f0       	breq	.+6      	; 0x17c4 <__vector_18+0x3b4>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    17be:	2e 17       	cp	r18, r30
    17c0:	3f 07       	cpc	r19, r31
    17c2:	d1 f7       	brne	.-12     	; 0x17b8 <__vector_18+0x3a8>
			_SMSindex *= 10;
			_SMSindex += _recievedSMS[index] - '0';
		}
		if (_SMSindex > 20)
		{
			while(_SMSindex != 1)
    17c4:	f3 01       	movw	r30, r6
    17c6:	80 81       	ld	r24, Z
    17c8:	91 81       	ldd	r25, Z+1	; 0x01
    17ca:	81 30       	cpi	r24, 0x01	; 1
    17cc:	91 05       	cpc	r25, r1
    17ce:	09 f0       	breq	.+2      	; 0x17d2 <__vector_18+0x3c2>
    17d0:	46 cf       	rjmp	.-372    	; 0x165e <__vector_18+0x24e>
			{
				//gsmSMS.UARTstring("S_M_S");
				
				strcpy(_recievedSMS,checkInterrupt);
				setSMSindex();
				_newData = true;
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <top+0x106>
				_newDataIndex = 4;
    17d8:	84 e0       	ldi	r24, 0x04	; 4
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	90 93 57 05 	sts	0x0557, r25	; 0x800557 <top+0x10a>
    17e0:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <top+0x109>
    17e4:	b7 c0       	rjmp	.+366    	; 0x1954 <__vector_18+0x544>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    17e6:	61 e0       	ldi	r22, 0x01	; 1
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	42 e6       	ldi	r20, 0x62	; 98
    17ee:	51 e0       	ldi	r21, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    17f0:	70 e0       	ldi	r23, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    17f2:	e1 e0       	ldi	r30, 0x01	; 1
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	ec 0f       	add	r30, r28
    17f8:	fd 1f       	adc	r31, r29
    17fa:	e8 0f       	add	r30, r24
    17fc:	f9 1f       	adc	r31, r25
    17fe:	20 81       	ld	r18, Z
    1800:	2b 32       	cpi	r18, 0x2B	; 43
    1802:	61 f4       	brne	.+24     	; 0x181c <__vector_18+0x40c>
    1804:	ac e5       	ldi	r26, 0x5C	; 92
    1806:	b1 e0       	ldi	r27, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    1808:	31 91       	ld	r19, Z+
    180a:	2d 91       	ld	r18, X+
    180c:	32 13       	cpse	r19, r18
					{
						status = false;
    180e:	67 2f       	mov	r22, r23
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    1810:	a4 17       	cp	r26, r20
    1812:	b5 07       	cpc	r27, r21
    1814:	c9 f7       	brne	.-14     	; 0x1808 <__vector_18+0x3f8>
    1816:	06 96       	adiw	r24, 0x06	; 6
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    1818:	61 11       	cpse	r22, r1
    181a:	24 c0       	rjmp	.+72     	; 0x1864 <__vector_18+0x454>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    181c:	01 96       	adiw	r24, 0x01	; 1
    181e:	8e 15       	cp	r24, r14
    1820:	9f 05       	cpc	r25, r15
    1822:	3c f3       	brlt	.-50     	; 0x17f2 <__vector_18+0x3e2>
    1824:	61 e0       	ldi	r22, 0x01	; 1
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	42 e6       	ldi	r20, 0x62	; 98
    182c:	51 e0       	ldi	r21, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    182e:	70 e0       	ldi	r23, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    1830:	e1 e0       	ldi	r30, 0x01	; 1
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	ec 0f       	add	r30, r28
    1836:	fd 1f       	adc	r31, r29
    1838:	e8 0f       	add	r30, r24
    183a:	f9 1f       	adc	r31, r25
    183c:	20 81       	ld	r18, Z
    183e:	23 34       	cpi	r18, 0x43	; 67
    1840:	61 f4       	brne	.+24     	; 0x185a <__vector_18+0x44a>
    1842:	ad e5       	ldi	r26, 0x5D	; 93
    1844:	b1 e0       	ldi	r27, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    1846:	31 91       	ld	r19, Z+
    1848:	2d 91       	ld	r18, X+
    184a:	32 13       	cpse	r19, r18
					{
						status = false;
    184c:	67 2f       	mov	r22, r23
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    184e:	a4 17       	cp	r26, r20
    1850:	b5 07       	cpc	r27, r21
    1852:	c9 f7       	brne	.-14     	; 0x1846 <__vector_18+0x436>
    1854:	05 96       	adiw	r24, 0x05	; 5
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    1856:	61 11       	cpse	r22, r1
    1858:	05 c0       	rjmp	.+10     	; 0x1864 <__vector_18+0x454>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    185a:	01 96       	adiw	r24, 0x01	; 1
    185c:	8e 15       	cp	r24, r14
    185e:	9f 05       	cpc	r25, r15
    1860:	3c f3       	brlt	.-50     	; 0x1830 <__vector_18+0x420>
    1862:	0e c0       	rjmp	.+28     	; 0x1880 <__vector_18+0x470>
				_newDataIndex = 4;
			}
			else if(compWordInArr(checkInterrupt,"+CMGS:",6,i)||compWordInArr(checkInterrupt,"CMGS:",5,i))
			{
				//gsmSMS.UARTstring("sms SENT\n");
				_newDataIndex = 5;
    1864:	85 e0       	ldi	r24, 0x05	; 5
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	90 93 57 05 	sts	0x0557, r25	; 0x800557 <top+0x10a>
    186c:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <top+0x109>
				_newData = true;
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <top+0x106>
				_startTimeCounterSMSreceived = false;
    1876:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <top+0x107>
				_1minConterSMSreceived = 0;
    187a:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <top+0x103>
    187e:	6a c0       	rjmp	.+212    	; 0x1954 <__vector_18+0x544>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    1880:	61 e0       	ldi	r22, 0x01	; 1
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	47 e6       	ldi	r20, 0x67	; 103
    1888:	51 e0       	ldi	r21, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    188a:	70 e0       	ldi	r23, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    188c:	e1 e0       	ldi	r30, 0x01	; 1
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	ec 0f       	add	r30, r28
    1892:	fd 1f       	adc	r31, r29
    1894:	e8 0f       	add	r30, r24
    1896:	f9 1f       	adc	r31, r25
    1898:	20 81       	ld	r18, Z
    189a:	23 34       	cpi	r18, 0x43	; 67
    189c:	61 f4       	brne	.+24     	; 0x18b6 <__vector_18+0x4a6>
    189e:	a3 e6       	ldi	r26, 0x63	; 99
    18a0:	b1 e0       	ldi	r27, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    18a2:	31 91       	ld	r19, Z+
    18a4:	2d 91       	ld	r18, X+
    18a6:	32 13       	cpse	r19, r18
					{
						status = false;
    18a8:	67 2f       	mov	r22, r23
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    18aa:	a4 17       	cp	r26, r20
    18ac:	b5 07       	cpc	r27, r21
    18ae:	c9 f7       	brne	.-14     	; 0x18a2 <__vector_18+0x492>
    18b0:	04 96       	adiw	r24, 0x04	; 4
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    18b2:	61 11       	cpse	r22, r1
    18b4:	24 c0       	rjmp	.+72     	; 0x18fe <__vector_18+0x4ee>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    18b6:	01 96       	adiw	r24, 0x01	; 1
    18b8:	8e 15       	cp	r24, r14
    18ba:	9f 05       	cpc	r25, r15
    18bc:	3c f3       	brlt	.-50     	; 0x188c <__vector_18+0x47c>
    18be:	61 e0       	ldi	r22, 0x01	; 1
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	4c e6       	ldi	r20, 0x6C	; 108
    18c6:	51 e0       	ldi	r21, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    18c8:	70 e0       	ldi	r23, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    18ca:	e1 e0       	ldi	r30, 0x01	; 1
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	ec 0f       	add	r30, r28
    18d0:	fd 1f       	adc	r31, r29
    18d2:	e8 0f       	add	r30, r24
    18d4:	f9 1f       	adc	r31, r25
    18d6:	20 81       	ld	r18, Z
    18d8:	23 34       	cpi	r18, 0x43	; 67
    18da:	61 f4       	brne	.+24     	; 0x18f4 <__vector_18+0x4e4>
    18dc:	a8 e6       	ldi	r26, 0x68	; 104
    18de:	b1 e0       	ldi	r27, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    18e0:	31 91       	ld	r19, Z+
    18e2:	2d 91       	ld	r18, X+
    18e4:	32 13       	cpse	r19, r18
					{
						status = false;
    18e6:	67 2f       	mov	r22, r23
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    18e8:	4a 17       	cp	r20, r26
    18ea:	5b 07       	cpc	r21, r27
    18ec:	c9 f7       	brne	.-14     	; 0x18e0 <__vector_18+0x4d0>
    18ee:	04 96       	adiw	r24, 0x04	; 4
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    18f0:	61 11       	cpse	r22, r1
    18f2:	05 c0       	rjmp	.+10     	; 0x18fe <__vector_18+0x4ee>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    18f4:	01 96       	adiw	r24, 0x01	; 1
    18f6:	8e 15       	cp	r24, r14
    18f8:	9f 05       	cpc	r25, r15
    18fa:	3c f3       	brlt	.-50     	; 0x18ca <__vector_18+0x4ba>
    18fc:	0a c0       	rjmp	.+20     	; 0x1912 <__vector_18+0x502>
				_startTimeCounterSMSreceived = false;
				_1minConterSMSreceived = 0;
			}
			else if(compWordInArr(checkInterrupt,"CPIN",4,i)||compWordInArr(checkInterrupt,"CFUN",4,i))
			{
				_newDataIndex = 6;
    18fe:	86 e0       	ldi	r24, 0x06	; 6
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	90 93 57 05 	sts	0x0557, r25	; 0x800557 <top+0x10a>
    1906:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <top+0x109>
				_newData = true;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <top+0x106>
    1910:	21 c0       	rjmp	.+66     	; 0x1954 <__vector_18+0x544>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    1912:	61 e0       	ldi	r22, 0x01	; 1
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	46 e7       	ldi	r20, 0x76	; 118
    191a:	51 e0       	ldi	r21, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    191c:	70 e0       	ldi	r23, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    191e:	a1 e0       	ldi	r26, 0x01	; 1
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	ac 0f       	add	r26, r28
    1924:	bd 1f       	adc	r27, r29
    1926:	a2 0f       	add	r26, r18
    1928:	b3 1f       	adc	r27, r19
    192a:	8c 91       	ld	r24, X
    192c:	83 34       	cpi	r24, 0x43	; 67
    192e:	69 f4       	brne	.+26     	; 0x194a <__vector_18+0x53a>
    1930:	ed e6       	ldi	r30, 0x6D	; 109
    1932:	f1 e0       	ldi	r31, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    1934:	9d 91       	ld	r25, X+
    1936:	81 91       	ld	r24, Z+
    1938:	98 13       	cpse	r25, r24
					{
						status = false;
    193a:	67 2f       	mov	r22, r23
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    193c:	4e 17       	cp	r20, r30
    193e:	5f 07       	cpc	r21, r31
    1940:	c9 f7       	brne	.-14     	; 0x1934 <__vector_18+0x524>
    1942:	27 5f       	subi	r18, 0xF7	; 247
    1944:	3f 4f       	sbci	r19, 0xFF	; 255
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    1946:	61 11       	cpse	r22, r1
    1948:	37 c0       	rjmp	.+110    	; 0x19b8 <__vector_18+0x5a8>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    194a:	2f 5f       	subi	r18, 0xFF	; 255
    194c:	3f 4f       	sbci	r19, 0xFF	; 255
    194e:	2e 15       	cp	r18, r14
    1950:	3f 05       	cpc	r19, r15
    1952:	2c f3       	brlt	.-54     	; 0x191e <__vector_18+0x50e>
mainControl top;
ISR(USART_RX_vect)
{
	RXinterruptDisable();
	top.checkStatus();
	RXinterruptEnable();
    1954:	e1 ec       	ldi	r30, 0xC1	; 193
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	80 68       	ori	r24, 0x80	; 128
    195c:	80 83       	st	Z, r24
}
    195e:	4d c0       	rjmp	.+154    	; 0x19fa <__vector_18+0x5ea>
		do
		{
			data = gsmSMS.UARTreceive();
			checkInterrupt[i++] = data;
		}while(gsmSMS.checkForData() && i < 49);
		checkInterrupt[i+1] = 0;
    1960:	fe 01       	movw	r30, r28
    1962:	e0 0f       	add	r30, r16
    1964:	f1 1f       	adc	r31, r17
    1966:	13 82       	std	Z+3, r1	; 0x03
		
		if (i>1)
    1968:	f2 e0       	ldi	r31, 0x02	; 2
    196a:	ef 16       	cp	r14, r31
    196c:	f1 04       	cpc	r15, r1
    196e:	0c f0       	brlt	.+2      	; 0x1972 <__vector_18+0x562>
    1970:	9b cd       	rjmp	.-1226   	; 0x14a8 <__vector_18+0x98>
    1972:	f0 cf       	rjmp	.-32     	; 0x1954 <__vector_18+0x544>
	void setSMSindex()
	{
		int index = 3;
		
		while(_recievedSMS[index++] != ',' && index < 99);
		_SMSindex = _recievedSMS[index++] - '0';
    1974:	fc 01       	movw	r30, r24
    1976:	e6 51       	subi	r30, 0x16	; 22
    1978:	fb 4f       	sbci	r31, 0xFB	; 251
    197a:	80 81       	ld	r24, Z
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	c0 97       	sbiw	r24, 0x30	; 48
    1980:	90 93 4f 05 	sts	0x054F, r25	; 0x80054f <top+0x102>
    1984:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <top+0x101>
			
		if (_recievedSMS[index]-'0' >= 0 && _recievedSMS[index]-'0' <= 9)
    1988:	f9 01       	movw	r30, r18
    198a:	e4 51       	subi	r30, 0x14	; 20
    198c:	fb 4f       	sbci	r31, 0xFB	; 251
    198e:	20 81       	ld	r18, Z
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	20 53       	subi	r18, 0x30	; 48
    1994:	31 09       	sbc	r19, r1
    1996:	2a 30       	cpi	r18, 0x0A	; 10
    1998:	31 05       	cpc	r19, r1
    199a:	08 f4       	brcc	.+2      	; 0x199e <__vector_18+0x58e>
    199c:	28 ce       	rjmp	.-944    	; 0x15ee <__vector_18+0x1de>
    199e:	38 ce       	rjmp	.-912    	; 0x1610 <__vector_18+0x200>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    19a0:	f6 01       	movw	r30, r12
    19a2:	e0 0f       	add	r30, r16
    19a4:	f1 1f       	adc	r31, r17
    19a6:	10 82       	st	Z, r1
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    19a8:	f5 01       	movw	r30, r10
    19aa:	80 81       	ld	r24, Z
    19ac:	80 68       	ori	r24, 0x80	; 128
    19ae:	80 83       	st	Z, r24
			if (*arr != 0)
    19b0:	8b a9       	ldd	r24, Y+51	; 0x33
    19b2:	81 11       	cpse	r24, r1
    19b4:	b7 ce       	rjmp	.-658    	; 0x1724 <__vector_18+0x314>
    19b6:	06 cf       	rjmp	.-500    	; 0x17c4 <__vector_18+0x3b4>
				_newDataIndex = 6;
				_newData = true;
			}
			else if(compWordInArr(checkInterrupt,"CONNECTED",9,i))
			{
				_newDataIndex = 7;
    19b8:	87 e0       	ldi	r24, 0x07	; 7
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	90 93 57 05 	sts	0x0557, r25	; 0x800557 <top+0x10a>
    19c0:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <top+0x109>
				_newData = true;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <top+0x106>
    19ca:	c4 cf       	rjmp	.-120    	; 0x1954 <__vector_18+0x544>
    19cc:	02 96       	adiw	r24, 0x02	; 2
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    19ce:	34 2f       	mov	r19, r20
    19d0:	f2 cd       	rjmp	.-1052   	; 0x15b6 <__vector_18+0x1a6>
    19d2:	02 96       	adiw	r24, 0x02	; 2
    19d4:	56 2f       	mov	r21, r22
    19d6:	e4 ce       	rjmp	.-568    	; 0x17a0 <__vector_18+0x390>
		do
		{
			data = gsmSMS.UARTreceive();
			checkInterrupt[i++] = data;
		}while(gsmSMS.checkForData() && i < 49);
		checkInterrupt[i+1] = 0;
    19d8:	fe 01       	movw	r30, r28
    19da:	e0 0f       	add	r30, r16
    19dc:	f1 1f       	adc	r31, r17
    19de:	13 82       	std	Z+3, r1	; 0x03
    19e0:	63 cd       	rjmp	.-1338   	; 0x14a8 <__vector_18+0x98>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    19e2:	22 96       	adiw	r28, 0x02	; 2
    19e4:	1f ae       	std	Y+63, r1	; 0x3f
    19e6:	22 97       	sbiw	r28, 0x02	; 2
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    19e8:	f5 01       	movw	r30, r10
    19ea:	80 81       	ld	r24, Z
    19ec:	80 68       	ori	r24, 0x80	; 128
    19ee:	80 83       	st	Z, r24
			if (*arr != 0)
    19f0:	8b a9       	ldd	r24, Y+51	; 0x33
    19f2:	88 23       	and	r24, r24
    19f4:	09 f4       	brne	.+2      	; 0x19f8 <__vector_18+0x5e8>
    19f6:	e6 ce       	rjmp	.-564    	; 0x17c4 <__vector_18+0x3b4>
    19f8:	a0 ce       	rjmp	.-704    	; 0x173a <__vector_18+0x32a>
ISR(USART_RX_vect)
{
	RXinterruptDisable();
	top.checkStatus();
	RXinterruptEnable();
}
    19fa:	c2 5b       	subi	r28, 0xB2	; 178
    19fc:	df 4f       	sbci	r29, 0xFF	; 255
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	cd bf       	out	0x3d, r28	; 61
    1a08:	df 91       	pop	r29
    1a0a:	cf 91       	pop	r28
    1a0c:	ff 91       	pop	r31
    1a0e:	ef 91       	pop	r30
    1a10:	bf 91       	pop	r27
    1a12:	af 91       	pop	r26
    1a14:	9f 91       	pop	r25
    1a16:	8f 91       	pop	r24
    1a18:	7f 91       	pop	r23
    1a1a:	6f 91       	pop	r22
    1a1c:	5f 91       	pop	r21
    1a1e:	4f 91       	pop	r20
    1a20:	3f 91       	pop	r19
    1a22:	2f 91       	pop	r18
    1a24:	1f 91       	pop	r17
    1a26:	0f 91       	pop	r16
    1a28:	ff 90       	pop	r15
    1a2a:	ef 90       	pop	r14
    1a2c:	df 90       	pop	r13
    1a2e:	cf 90       	pop	r12
    1a30:	bf 90       	pop	r11
    1a32:	af 90       	pop	r10
    1a34:	9f 90       	pop	r9
    1a36:	8f 90       	pop	r8
    1a38:	7f 90       	pop	r7
    1a3a:	6f 90       	pop	r6
    1a3c:	5f 90       	pop	r5
    1a3e:	4f 90       	pop	r4
    1a40:	3f 90       	pop	r3
    1a42:	2f 90       	pop	r2
    1a44:	0f 90       	pop	r0
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	0f 90       	pop	r0
    1a4a:	1f 90       	pop	r1
    1a4c:	18 95       	reti

00001a4e <__vector_13>:
ISR (TIMER1_OVF_vect){
    1a4e:	1f 92       	push	r1
    1a50:	0f 92       	push	r0
    1a52:	0f b6       	in	r0, 0x3f	; 63
    1a54:	0f 92       	push	r0
    1a56:	11 24       	eor	r1, r1
    1a58:	2f 92       	push	r2
    1a5a:	3f 92       	push	r3
    1a5c:	4f 92       	push	r4
    1a5e:	5f 92       	push	r5
    1a60:	6f 92       	push	r6
    1a62:	7f 92       	push	r7
    1a64:	8f 92       	push	r8
    1a66:	9f 92       	push	r9
    1a68:	af 92       	push	r10
    1a6a:	bf 92       	push	r11
    1a6c:	cf 92       	push	r12
    1a6e:	df 92       	push	r13
    1a70:	ef 92       	push	r14
    1a72:	ff 92       	push	r15
    1a74:	0f 93       	push	r16
    1a76:	1f 93       	push	r17
    1a78:	2f 93       	push	r18
    1a7a:	3f 93       	push	r19
    1a7c:	4f 93       	push	r20
    1a7e:	5f 93       	push	r21
    1a80:	6f 93       	push	r22
    1a82:	7f 93       	push	r23
    1a84:	8f 93       	push	r24
    1a86:	9f 93       	push	r25
    1a88:	af 93       	push	r26
    1a8a:	bf 93       	push	r27
    1a8c:	ef 93       	push	r30
    1a8e:	ff 93       	push	r31
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
    1a98:	cf 55       	subi	r28, 0x5F	; 95
    1a9a:	d1 09       	sbc	r29, r1
    1a9c:	de bf       	out	0x3e, r29	; 62
    1a9e:	cd bf       	out	0x3d, r28	; 61
	TCNT1 = 1;   //interrupt every 5 sec at 16 MHz clock
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1aa8:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
			dest[size] = source[size];
			size++;
		}
	}
	void timerSMSinterrupHandle(){
			if(_startTimeCounterSMSreceived)
    1aac:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <top+0x107>
    1ab0:	88 23       	and	r24, r24
    1ab2:	09 f1       	breq	.+66     	; 0x1af6 <__vector_13+0xa8>
			{
				if (_1minConterSMSreceived > 12)
    1ab4:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <top+0x103>
    1ab8:	8d 30       	cpi	r24, 0x0D	; 13
    1aba:	d0 f0       	brcs	.+52     	; 0x1af0 <__vector_13+0xa2>
				{
					_GSMerrorCounter++;
    1abc:	e2 e5       	ldi	r30, 0x52	; 82
    1abe:	f5 e0       	ldi	r31, 0x05	; 5
    1ac0:	80 81       	ld	r24, Z
    1ac2:	8f 5f       	subi	r24, 0xFF	; 255
    1ac4:	80 83       	st	Z, r24
					_1minConterSMSreceived = 0;
    1ac6:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <top+0x103>
			}
		}
	}
	void resetGSM()
	{
		if (_GSMerrorCounter > 2)
    1aca:	83 30       	cpi	r24, 0x03	; 3
    1acc:	a0 f0       	brcs	.+40     	; 0x1af6 <__vector_13+0xa8>
		{
			PORTD &= ~(1<<5);
    1ace:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ad0:	2f ef       	ldi	r18, 0xFF	; 255
    1ad2:	83 ed       	ldi	r24, 0xD3	; 211
    1ad4:	90 e3       	ldi	r25, 0x30	; 48
    1ad6:	21 50       	subi	r18, 0x01	; 1
    1ad8:	80 40       	sbci	r24, 0x00	; 0
    1ada:	90 40       	sbci	r25, 0x00	; 0
    1adc:	e1 f7       	brne	.-8      	; 0x1ad6 <__vector_13+0x88>
    1ade:	00 c0       	rjmp	.+0      	; 0x1ae0 <__vector_13+0x92>
    1ae0:	00 00       	nop
			_delay_ms(1000);
			PORTD |= (1<<5);
    1ae2:	5d 9a       	sbi	0x0b, 5	; 11
			_startTimeCounterGSMreset = true;
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <top+0x108>
			_GSMerrorCounter = 0;
    1aea:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <top+0x105>
    1aee:	08 c0       	rjmp	.+16     	; 0x1b00 <__vector_13+0xb2>
					_1minConterSMSreceived = 0;
					resetGSM();
				}
				else
				{
					_1minConterSMSreceived++;
    1af0:	8f 5f       	subi	r24, 0xFF	; 255
    1af2:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <top+0x103>
				}
			}
		}
	void timerGSMresetInterrupHandle(){
		if(_startTimeCounterGSMreset)
    1af6:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <top+0x108>
    1afa:	88 23       	and	r24, r24
    1afc:	09 f4       	brne	.+2      	; 0x1b00 <__vector_13+0xb2>
    1afe:	70 c2       	rjmp	.+1248   	; 0x1fe0 <__vector_13+0x592>
		{
			if (_10secRestetGSMdelay > 2)
    1b00:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <top+0x104>
    1b04:	83 30       	cpi	r24, 0x03	; 3
    1b06:	08 f4       	brcc	.+2      	; 0x1b0a <__vector_13+0xbc>
    1b08:	68 c2       	rjmp	.+1232   	; 0x1fda <__vector_13+0x58c>
			{
				_10secRestetGSMdelay = 0;
    1b0a:	10 92 51 05 	sts	0x0551, r1	; 0x800551 <top+0x104>
				_startTimeCounterGSMreset = false;
    1b0e:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <top+0x108>
		gsmSMS.setBaudRate(baud);
	}
	void setup(BaudRate BAUD = BAUD9600){
		//_delay_ms(3000);
		
		gsmSMS.setBaudRate(BAUD);
    1b12:	60 e8       	ldi	r22, 0x80	; 128
    1b14:	75 e2       	ldi	r23, 0x25	; 37
    1b16:	8d e4       	ldi	r24, 0x4D	; 77
    1b18:	94 e0       	ldi	r25, 0x04	; 4
    1b1a:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN4Uart11setBaudRateE8BaudRate>
		char ptr[15] = {'A','T','+','C','S','C','S','=','"','G','S','M','"',0};
    1b1e:	fe 01       	movw	r30, r28
    1b20:	ef 5a       	subi	r30, 0xAF	; 175
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	1f e0       	ldi	r17, 0x0F	; 15
    1b26:	df 01       	movw	r26, r30
    1b28:	21 2f       	mov	r18, r17
    1b2a:	1d 92       	st	X+, r1
    1b2c:	2a 95       	dec	r18
    1b2e:	e9 f7       	brne	.-6      	; 0x1b2a <__vector_13+0xdc>
    1b30:	81 e4       	ldi	r24, 0x41	; 65
    1b32:	80 83       	st	Z, r24
    1b34:	84 e5       	ldi	r24, 0x54	; 84
    1b36:	81 83       	std	Z+1, r24	; 0x01
    1b38:	8b e2       	ldi	r24, 0x2B	; 43
    1b3a:	82 83       	std	Z+2, r24	; 0x02
    1b3c:	93 e4       	ldi	r25, 0x43	; 67
    1b3e:	93 83       	std	Z+3, r25	; 0x03
    1b40:	83 e5       	ldi	r24, 0x53	; 83
    1b42:	84 83       	std	Z+4, r24	; 0x04
    1b44:	95 83       	std	Z+5, r25	; 0x05
    1b46:	86 83       	std	Z+6, r24	; 0x06
    1b48:	9d e3       	ldi	r25, 0x3D	; 61
    1b4a:	97 83       	std	Z+7, r25	; 0x07
    1b4c:	92 e2       	ldi	r25, 0x22	; 34
    1b4e:	90 87       	std	Z+8, r25	; 0x08
    1b50:	27 e4       	ldi	r18, 0x47	; 71
    1b52:	21 87       	std	Z+9, r18	; 0x09
    1b54:	82 87       	std	Z+10, r24	; 0x0a
    1b56:	8d e4       	ldi	r24, 0x4D	; 77
    1b58:	83 87       	std	Z+11, r24	; 0x0b
    1b5a:	94 87       	std	Z+12, r25	; 0x0c
	char _1minConterSMSreceived, _10secRestetGSMdelay , _GSMerrorCounter;
	bool _newData, _startTimeCounterSMSreceived, _startTimeCounterGSMreset;
	int _newDataIndex;
	bool sendCommand(const char ptr[], bool checkAck = false){
		int condition;
		gsmSMS.UARTstring(ptr,0);
    1b5c:	40 e0       	ldi	r20, 0x00	; 0
    1b5e:	bf 01       	movw	r22, r30
    1b60:	8d e4       	ldi	r24, 0x4D	; 77
    1b62:	94 e0       	ldi	r25, 0x04	; 4
    1b64:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		gsmSMS.UARTsend(13);
    1b68:	6d e0       	ldi	r22, 0x0D	; 13
    1b6a:	8d e4       	ldi	r24, 0x4D	; 77
    1b6c:	94 e0       	ldi	r25, 0x04	; 4
    1b6e:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		if (checkAck)
		{
			char arr[15] = {0};
    1b72:	fe 01       	movw	r30, r28
    1b74:	31 96       	adiw	r30, 0x01	; 1
    1b76:	df 01       	movw	r26, r30
    1b78:	1d 92       	st	X+, r1
    1b7a:	1a 95       	dec	r17
    1b7c:	e9 f7       	brne	.-6      	; 0x1b78 <__vector_13+0x12a>
			RXinterruptDisable();
    1b7e:	a1 ec       	ldi	r26, 0xC1	; 193
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	8c 91       	ld	r24, X
    1b84:	8f 77       	andi	r24, 0x7F	; 127
    1b86:	8c 93       	st	X, r24
    1b88:	7f 01       	movw	r14, r30
			return false;
		}
		return 0;
	}
	int checkForACkPacket(char getData[], int arrSize){
		int i = 0;
    1b8a:	00 e0       	ldi	r16, 0x00	; 0
    1b8c:	10 e0       	ldi	r17, 0x00	; 0
		char data = 0;
		
		do 
		{
			data = gsmSMS.UARTreceive();
    1b8e:	8d e4       	ldi	r24, 0x4D	; 77
    1b90:	94 e0       	ldi	r25, 0x04	; 4
    1b92:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <_ZN4Uart11UARTreceiveEv>
			getData[i++] = data;
    1b96:	0f 5f       	subi	r16, 0xFF	; 255
    1b98:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9a:	f7 01       	movw	r30, r14
    1b9c:	81 93       	st	Z+, r24
    1b9e:	7f 01       	movw	r14, r30
		}while(gsmSMS.checkForData() && i < arrSize);
    1ba0:	8d e4       	ldi	r24, 0x4D	; 77
    1ba2:	94 e0       	ldi	r25, 0x04	; 4
    1ba4:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <_ZN4Uart12checkForDataEv>
    1ba8:	88 23       	and	r24, r24
    1baa:	09 f4       	brne	.+2      	; 0x1bae <__vector_13+0x160>
    1bac:	3f c2       	rjmp	.+1150   	; 0x202c <__vector_13+0x5de>
    1bae:	0e 30       	cpi	r16, 0x0E	; 14
    1bb0:	11 05       	cpc	r17, r1
    1bb2:	69 f7       	brne	.-38     	; 0x1b8e <__vector_13+0x140>
    1bb4:	80 c2       	rjmp	.+1280   	; 0x20b6 <__vector_13+0x668>
    1bb6:	a8 01       	movw	r20, r16
    1bb8:	11 23       	and	r17, r17
    1bba:	14 f4       	brge	.+4      	; 0x1bc0 <__vector_13+0x172>
    1bbc:	40 e0       	ldi	r20, 0x00	; 0
    1bbe:	50 e0       	ldi	r21, 0x00	; 0
    1bc0:	55 27       	eor	r21, r21
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    1bc2:	14 16       	cp	r1, r20
    1bc4:	15 06       	cpc	r1, r21
    1bc6:	0c f0       	brlt	.+2      	; 0x1bca <__vector_13+0x17c>
    1bc8:	52 c0       	rjmp	.+164    	; 0x1c6e <__vector_13+0x220>
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <__vector_13+0x182>
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
			if (*arr != 0)
    1bcc:	4e e0       	ldi	r20, 0x0E	; 14
    1bce:	50 e0       	ldi	r21, 0x00	; 0
    1bd0:	11 e0       	ldi	r17, 0x01	; 1
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	67 e3       	ldi	r22, 0x37	; 55
    1bd8:	71 e0       	ldi	r23, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    1bda:	00 e0       	ldi	r16, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    1bdc:	e1 e0       	ldi	r30, 0x01	; 1
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	ec 0f       	add	r30, r28
    1be2:	fd 1f       	adc	r31, r29
    1be4:	e8 0f       	add	r30, r24
    1be6:	f9 1f       	adc	r31, r25
    1be8:	20 81       	ld	r18, Z
    1bea:	25 34       	cpi	r18, 0x45	; 69
    1bec:	61 f4       	brne	.+24     	; 0x1c06 <__vector_13+0x1b8>
    1bee:	a2 e3       	ldi	r26, 0x32	; 50
    1bf0:	b1 e0       	ldi	r27, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    1bf2:	31 91       	ld	r19, Z+
    1bf4:	2d 91       	ld	r18, X+
    1bf6:	32 13       	cpse	r19, r18
					{
						status = false;
    1bf8:	10 2f       	mov	r17, r16
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    1bfa:	6a 17       	cp	r22, r26
    1bfc:	7b 07       	cpc	r23, r27
    1bfe:	c9 f7       	brne	.-14     	; 0x1bf2 <__vector_13+0x1a4>
    1c00:	05 96       	adiw	r24, 0x05	; 5
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    1c02:	11 11       	cpse	r17, r1
    1c04:	34 c0       	rjmp	.+104    	; 0x1c6e <__vector_13+0x220>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    1c06:	01 96       	adiw	r24, 0x01	; 1
    1c08:	84 17       	cp	r24, r20
    1c0a:	95 07       	cpc	r25, r21
    1c0c:	3c f3       	brlt	.-50     	; 0x1bdc <__vector_13+0x18e>
    1c0e:	31 e0       	ldi	r19, 0x01	; 1
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    1c14:	60 e0       	ldi	r22, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    1c16:	e1 e0       	ldi	r30, 0x01	; 1
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	ec 0f       	add	r30, r28
    1c1c:	fd 1f       	adc	r31, r29
    1c1e:	e8 0f       	add	r30, r24
    1c20:	f9 1f       	adc	r31, r25
    1c22:	20 81       	ld	r18, Z
    1c24:	2f 34       	cpi	r18, 0x4F	; 79
    1c26:	69 f4       	brne	.+26     	; 0x1c42 <__vector_13+0x1f4>
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    1c28:	e2 e0       	ldi	r30, 0x02	; 2
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	ec 0f       	add	r30, r28
    1c2e:	fd 1f       	adc	r31, r29
    1c30:	e8 0f       	add	r30, r24
    1c32:	f9 1f       	adc	r31, r25
    1c34:	20 81       	ld	r18, Z
    1c36:	2b 34       	cpi	r18, 0x4B	; 75
    1c38:	09 f0       	breq	.+2      	; 0x1c3c <__vector_13+0x1ee>
    1c3a:	34 c2       	rjmp	.+1128   	; 0x20a4 <__vector_13+0x656>
    1c3c:	02 96       	adiw	r24, 0x02	; 2
					{
						status = false;
					}
				}
				if (status)
    1c3e:	31 11       	cpse	r19, r1
    1c40:	16 c0       	rjmp	.+44     	; 0x1c6e <__vector_13+0x220>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    1c42:	01 96       	adiw	r24, 0x01	; 1
    1c44:	84 17       	cp	r24, r20
    1c46:	95 07       	cpc	r25, r21
    1c48:	34 f3       	brlt	.-52     	; 0x1c16 <__vector_13+0x1c8>
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
    1c4c:	8e 33       	cpi	r24, 0x3E	; 62
    1c4e:	79 f0       	breq	.+30     	; 0x1c6e <__vector_13+0x220>
    1c50:	fe 01       	movw	r30, r28
    1c52:	32 96       	adiw	r30, 0x02	; 2
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	8c 0f       	add	r24, r28
    1c5a:	9d 1f       	adc	r25, r29
    1c5c:	48 0f       	add	r20, r24
    1c5e:	59 1f       	adc	r21, r25
    1c60:	03 c0       	rjmp	.+6      	; 0x1c68 <__vector_13+0x21a>
    1c62:	81 91       	ld	r24, Z+
    1c64:	8e 33       	cpi	r24, 0x3E	; 62
    1c66:	19 f0       	breq	.+6      	; 0x1c6e <__vector_13+0x220>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    1c68:	4e 17       	cp	r20, r30
    1c6a:	5f 07       	cpc	r21, r31
    1c6c:	d1 f7       	brne	.-12     	; 0x1c62 <__vector_13+0x214>
	char _1minConterSMSreceived, _10secRestetGSMdelay , _GSMerrorCounter;
	bool _newData, _startTimeCounterSMSreceived, _startTimeCounterGSMreset;
	int _newDataIndex;
	bool sendCommand(const char ptr[], bool checkAck = false){
		int condition;
		gsmSMS.UARTstring(ptr,0);
    1c6e:	40 e0       	ldi	r20, 0x00	; 0
    1c70:	67 e7       	ldi	r22, 0x77	; 119
    1c72:	71 e0       	ldi	r23, 0x01	; 1
    1c74:	8d e4       	ldi	r24, 0x4D	; 77
    1c76:	94 e0       	ldi	r25, 0x04	; 4
    1c78:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		gsmSMS.UARTsend(13);
    1c7c:	6d e0       	ldi	r22, 0x0D	; 13
    1c7e:	8d e4       	ldi	r24, 0x4D	; 77
    1c80:	94 e0       	ldi	r25, 0x04	; 4
    1c82:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		if (checkAck)
		{
			char arr[15] = {0};
    1c86:	fe 01       	movw	r30, r28
    1c88:	31 96       	adiw	r30, 0x01	; 1
    1c8a:	8f e0       	ldi	r24, 0x0F	; 15
    1c8c:	df 01       	movw	r26, r30
    1c8e:	1d 92       	st	X+, r1
    1c90:	8a 95       	dec	r24
    1c92:	e9 f7       	brne	.-6      	; 0x1c8e <__vector_13+0x240>
			RXinterruptDisable();
    1c94:	a1 ec       	ldi	r26, 0xC1	; 193
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	8c 91       	ld	r24, X
    1c9a:	8f 77       	andi	r24, 0x7F	; 127
    1c9c:	8c 93       	st	X, r24
    1c9e:	7f 01       	movw	r14, r30
			return false;
		}
		return 0;
	}
	int checkForACkPacket(char getData[], int arrSize){
		int i = 0;
    1ca0:	00 e0       	ldi	r16, 0x00	; 0
    1ca2:	10 e0       	ldi	r17, 0x00	; 0
		char data = 0;
		
		do 
		{
			data = gsmSMS.UARTreceive();
    1ca4:	8d e4       	ldi	r24, 0x4D	; 77
    1ca6:	94 e0       	ldi	r25, 0x04	; 4
    1ca8:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <_ZN4Uart11UARTreceiveEv>
			getData[i++] = data;
    1cac:	0f 5f       	subi	r16, 0xFF	; 255
    1cae:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb0:	f7 01       	movw	r30, r14
    1cb2:	81 93       	st	Z+, r24
    1cb4:	7f 01       	movw	r14, r30
		}while(gsmSMS.checkForData() && i < arrSize);
    1cb6:	8d e4       	ldi	r24, 0x4D	; 77
    1cb8:	94 e0       	ldi	r25, 0x04	; 4
    1cba:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <_ZN4Uart12checkForDataEv>
    1cbe:	88 23       	and	r24, r24
    1cc0:	09 f4       	brne	.+2      	; 0x1cc4 <__vector_13+0x276>
    1cc2:	c1 c1       	rjmp	.+898    	; 0x2046 <__vector_13+0x5f8>
    1cc4:	0e 30       	cpi	r16, 0x0E	; 14
    1cc6:	11 05       	cpc	r17, r1
    1cc8:	69 f7       	brne	.-38     	; 0x1ca4 <__vector_13+0x256>
    1cca:	00 c2       	rjmp	.+1024   	; 0x20cc <__vector_13+0x67e>
    1ccc:	a8 01       	movw	r20, r16
    1cce:	11 23       	and	r17, r17
    1cd0:	14 f4       	brge	.+4      	; 0x1cd6 <__vector_13+0x288>
    1cd2:	40 e0       	ldi	r20, 0x00	; 0
    1cd4:	50 e0       	ldi	r21, 0x00	; 0
    1cd6:	55 27       	eor	r21, r21
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    1cd8:	14 16       	cp	r1, r20
    1cda:	15 06       	cpc	r1, r21
    1cdc:	0c f0       	brlt	.+2      	; 0x1ce0 <__vector_13+0x292>
    1cde:	52 c0       	rjmp	.+164    	; 0x1d84 <__vector_13+0x336>
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <__vector_13+0x298>
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
			if (*arr != 0)
    1ce2:	4e e0       	ldi	r20, 0x0E	; 14
    1ce4:	50 e0       	ldi	r21, 0x00	; 0
    1ce6:	11 e0       	ldi	r17, 0x01	; 1
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	67 e3       	ldi	r22, 0x37	; 55
    1cee:	71 e0       	ldi	r23, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    1cf0:	00 e0       	ldi	r16, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    1cf2:	e1 e0       	ldi	r30, 0x01	; 1
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	ec 0f       	add	r30, r28
    1cf8:	fd 1f       	adc	r31, r29
    1cfa:	e8 0f       	add	r30, r24
    1cfc:	f9 1f       	adc	r31, r25
    1cfe:	20 81       	ld	r18, Z
    1d00:	25 34       	cpi	r18, 0x45	; 69
    1d02:	61 f4       	brne	.+24     	; 0x1d1c <__vector_13+0x2ce>
    1d04:	a2 e3       	ldi	r26, 0x32	; 50
    1d06:	b1 e0       	ldi	r27, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    1d08:	31 91       	ld	r19, Z+
    1d0a:	2d 91       	ld	r18, X+
    1d0c:	32 13       	cpse	r19, r18
					{
						status = false;
    1d0e:	10 2f       	mov	r17, r16
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    1d10:	a6 17       	cp	r26, r22
    1d12:	b7 07       	cpc	r27, r23
    1d14:	c9 f7       	brne	.-14     	; 0x1d08 <__vector_13+0x2ba>
    1d16:	05 96       	adiw	r24, 0x05	; 5
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    1d18:	11 11       	cpse	r17, r1
    1d1a:	34 c0       	rjmp	.+104    	; 0x1d84 <__vector_13+0x336>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    1d1c:	01 96       	adiw	r24, 0x01	; 1
    1d1e:	84 17       	cp	r24, r20
    1d20:	95 07       	cpc	r25, r21
    1d22:	3c f3       	brlt	.-50     	; 0x1cf2 <__vector_13+0x2a4>
    1d24:	31 e0       	ldi	r19, 0x01	; 1
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	90 e0       	ldi	r25, 0x00	; 0
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    1d2a:	60 e0       	ldi	r22, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    1d2c:	e1 e0       	ldi	r30, 0x01	; 1
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	ec 0f       	add	r30, r28
    1d32:	fd 1f       	adc	r31, r29
    1d34:	e8 0f       	add	r30, r24
    1d36:	f9 1f       	adc	r31, r25
    1d38:	20 81       	ld	r18, Z
    1d3a:	2f 34       	cpi	r18, 0x4F	; 79
    1d3c:	69 f4       	brne	.+26     	; 0x1d58 <__vector_13+0x30a>
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    1d3e:	e2 e0       	ldi	r30, 0x02	; 2
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	ec 0f       	add	r30, r28
    1d44:	fd 1f       	adc	r31, r29
    1d46:	e8 0f       	add	r30, r24
    1d48:	f9 1f       	adc	r31, r25
    1d4a:	20 81       	ld	r18, Z
    1d4c:	2b 34       	cpi	r18, 0x4B	; 75
    1d4e:	09 f0       	breq	.+2      	; 0x1d52 <__vector_13+0x304>
    1d50:	ac c1       	rjmp	.+856    	; 0x20aa <__vector_13+0x65c>
    1d52:	02 96       	adiw	r24, 0x02	; 2
					{
						status = false;
					}
				}
				if (status)
    1d54:	31 11       	cpse	r19, r1
    1d56:	16 c0       	rjmp	.+44     	; 0x1d84 <__vector_13+0x336>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    1d58:	01 96       	adiw	r24, 0x01	; 1
    1d5a:	84 17       	cp	r24, r20
    1d5c:	95 07       	cpc	r25, r21
    1d5e:	34 f3       	brlt	.-52     	; 0x1d2c <__vector_13+0x2de>
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	8e 33       	cpi	r24, 0x3E	; 62
    1d64:	79 f0       	breq	.+30     	; 0x1d84 <__vector_13+0x336>
    1d66:	fe 01       	movw	r30, r28
    1d68:	32 96       	adiw	r30, 0x02	; 2
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	8c 0f       	add	r24, r28
    1d70:	9d 1f       	adc	r25, r29
    1d72:	48 0f       	add	r20, r24
    1d74:	59 1f       	adc	r21, r25
    1d76:	03 c0       	rjmp	.+6      	; 0x1d7e <__vector_13+0x330>
    1d78:	81 91       	ld	r24, Z+
    1d7a:	8e 33       	cpi	r24, 0x3E	; 62
    1d7c:	19 f0       	breq	.+6      	; 0x1d84 <__vector_13+0x336>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    1d7e:	4e 17       	cp	r20, r30
    1d80:	5f 07       	cpc	r21, r31
    1d82:	d1 f7       	brne	.-12     	; 0x1d78 <__vector_13+0x32a>
	char _1minConterSMSreceived, _10secRestetGSMdelay , _GSMerrorCounter;
	bool _newData, _startTimeCounterSMSreceived, _startTimeCounterGSMreset;
	int _newDataIndex;
	bool sendCommand(const char ptr[], bool checkAck = false){
		int condition;
		gsmSMS.UARTstring(ptr,0);
    1d84:	40 e0       	ldi	r20, 0x00	; 0
    1d86:	61 e8       	ldi	r22, 0x81	; 129
    1d88:	71 e0       	ldi	r23, 0x01	; 1
    1d8a:	8d e4       	ldi	r24, 0x4D	; 77
    1d8c:	94 e0       	ldi	r25, 0x04	; 4
    1d8e:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		gsmSMS.UARTsend(13);
    1d92:	6d e0       	ldi	r22, 0x0D	; 13
    1d94:	8d e4       	ldi	r24, 0x4D	; 77
    1d96:	94 e0       	ldi	r25, 0x04	; 4
    1d98:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		if (checkAck)
		{
			char arr[15] = {0};
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	31 96       	adiw	r30, 0x01	; 1
    1da0:	8f e0       	ldi	r24, 0x0F	; 15
    1da2:	df 01       	movw	r26, r30
    1da4:	1d 92       	st	X+, r1
    1da6:	8a 95       	dec	r24
    1da8:	e9 f7       	brne	.-6      	; 0x1da4 <__vector_13+0x356>
			RXinterruptDisable();
    1daa:	a1 ec       	ldi	r26, 0xC1	; 193
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	8c 91       	ld	r24, X
    1db0:	8f 77       	andi	r24, 0x7F	; 127
    1db2:	8c 93       	st	X, r24
    1db4:	7f 01       	movw	r14, r30
			return false;
		}
		return 0;
	}
	int checkForACkPacket(char getData[], int arrSize){
		int i = 0;
    1db6:	00 e0       	ldi	r16, 0x00	; 0
    1db8:	10 e0       	ldi	r17, 0x00	; 0
		char data = 0;
		
		do 
		{
			data = gsmSMS.UARTreceive();
    1dba:	8d e4       	ldi	r24, 0x4D	; 77
    1dbc:	94 e0       	ldi	r25, 0x04	; 4
    1dbe:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <_ZN4Uart11UARTreceiveEv>
			getData[i++] = data;
    1dc2:	0f 5f       	subi	r16, 0xFF	; 255
    1dc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc6:	f7 01       	movw	r30, r14
    1dc8:	81 93       	st	Z+, r24
    1dca:	7f 01       	movw	r14, r30
		}while(gsmSMS.checkForData() && i < arrSize);
    1dcc:	8d e4       	ldi	r24, 0x4D	; 77
    1dce:	94 e0       	ldi	r25, 0x04	; 4
    1dd0:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <_ZN4Uart12checkForDataEv>
    1dd4:	88 23       	and	r24, r24
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <__vector_13+0x38c>
    1dd8:	43 c1       	rjmp	.+646    	; 0x2060 <__vector_13+0x612>
    1dda:	0e 30       	cpi	r16, 0x0E	; 14
    1ddc:	11 05       	cpc	r17, r1
    1dde:	69 f7       	brne	.-38     	; 0x1dba <__vector_13+0x36c>
    1de0:	80 c1       	rjmp	.+768    	; 0x20e2 <__vector_13+0x694>
    1de2:	a8 01       	movw	r20, r16
    1de4:	11 23       	and	r17, r17
    1de6:	14 f4       	brge	.+4      	; 0x1dec <__vector_13+0x39e>
    1de8:	40 e0       	ldi	r20, 0x00	; 0
    1dea:	50 e0       	ldi	r21, 0x00	; 0
    1dec:	55 27       	eor	r21, r21
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    1dee:	14 16       	cp	r1, r20
    1df0:	15 06       	cpc	r1, r21
    1df2:	0c f0       	brlt	.+2      	; 0x1df6 <__vector_13+0x3a8>
    1df4:	52 c0       	rjmp	.+164    	; 0x1e9a <__vector_13+0x44c>
    1df6:	02 c0       	rjmp	.+4      	; 0x1dfc <__vector_13+0x3ae>
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
			if (*arr != 0)
    1df8:	4e e0       	ldi	r20, 0x0E	; 14
    1dfa:	50 e0       	ldi	r21, 0x00	; 0
    1dfc:	11 e0       	ldi	r17, 0x01	; 1
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	67 e3       	ldi	r22, 0x37	; 55
    1e04:	71 e0       	ldi	r23, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    1e06:	00 e0       	ldi	r16, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    1e08:	e1 e0       	ldi	r30, 0x01	; 1
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	ec 0f       	add	r30, r28
    1e0e:	fd 1f       	adc	r31, r29
    1e10:	e8 0f       	add	r30, r24
    1e12:	f9 1f       	adc	r31, r25
    1e14:	20 81       	ld	r18, Z
    1e16:	25 34       	cpi	r18, 0x45	; 69
    1e18:	61 f4       	brne	.+24     	; 0x1e32 <__vector_13+0x3e4>
    1e1a:	a2 e3       	ldi	r26, 0x32	; 50
    1e1c:	b1 e0       	ldi	r27, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    1e1e:	31 91       	ld	r19, Z+
    1e20:	2d 91       	ld	r18, X+
    1e22:	32 13       	cpse	r19, r18
					{
						status = false;
    1e24:	10 2f       	mov	r17, r16
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    1e26:	6a 17       	cp	r22, r26
    1e28:	7b 07       	cpc	r23, r27
    1e2a:	c9 f7       	brne	.-14     	; 0x1e1e <__vector_13+0x3d0>
    1e2c:	05 96       	adiw	r24, 0x05	; 5
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    1e2e:	11 11       	cpse	r17, r1
    1e30:	34 c0       	rjmp	.+104    	; 0x1e9a <__vector_13+0x44c>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    1e32:	01 96       	adiw	r24, 0x01	; 1
    1e34:	84 17       	cp	r24, r20
    1e36:	95 07       	cpc	r25, r21
    1e38:	3c f3       	brlt	.-50     	; 0x1e08 <__vector_13+0x3ba>
    1e3a:	31 e0       	ldi	r19, 0x01	; 1
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    1e40:	60 e0       	ldi	r22, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    1e42:	e1 e0       	ldi	r30, 0x01	; 1
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	ec 0f       	add	r30, r28
    1e48:	fd 1f       	adc	r31, r29
    1e4a:	e8 0f       	add	r30, r24
    1e4c:	f9 1f       	adc	r31, r25
    1e4e:	20 81       	ld	r18, Z
    1e50:	2f 34       	cpi	r18, 0x4F	; 79
    1e52:	69 f4       	brne	.+26     	; 0x1e6e <__vector_13+0x420>
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    1e54:	e2 e0       	ldi	r30, 0x02	; 2
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	ec 0f       	add	r30, r28
    1e5a:	fd 1f       	adc	r31, r29
    1e5c:	e8 0f       	add	r30, r24
    1e5e:	f9 1f       	adc	r31, r25
    1e60:	20 81       	ld	r18, Z
    1e62:	2b 34       	cpi	r18, 0x4B	; 75
    1e64:	09 f0       	breq	.+2      	; 0x1e68 <__vector_13+0x41a>
    1e66:	24 c1       	rjmp	.+584    	; 0x20b0 <__vector_13+0x662>
    1e68:	02 96       	adiw	r24, 0x02	; 2
					{
						status = false;
					}
				}
				if (status)
    1e6a:	31 11       	cpse	r19, r1
    1e6c:	16 c0       	rjmp	.+44     	; 0x1e9a <__vector_13+0x44c>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    1e6e:	01 96       	adiw	r24, 0x01	; 1
    1e70:	84 17       	cp	r24, r20
    1e72:	95 07       	cpc	r25, r21
    1e74:	34 f3       	brlt	.-52     	; 0x1e42 <__vector_13+0x3f4>
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	8e 33       	cpi	r24, 0x3E	; 62
    1e7a:	79 f0       	breq	.+30     	; 0x1e9a <__vector_13+0x44c>
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	32 96       	adiw	r30, 0x02	; 2
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	8c 0f       	add	r24, r28
    1e86:	9d 1f       	adc	r25, r29
    1e88:	48 0f       	add	r20, r24
    1e8a:	59 1f       	adc	r21, r25
    1e8c:	03 c0       	rjmp	.+6      	; 0x1e94 <__vector_13+0x446>
    1e8e:	81 91       	ld	r24, Z+
    1e90:	8e 33       	cpi	r24, 0x3E	; 62
    1e92:	19 f0       	breq	.+6      	; 0x1e9a <__vector_13+0x44c>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    1e94:	4e 17       	cp	r20, r30
    1e96:	5f 07       	cpc	r21, r31
    1e98:	d1 f7       	brne	.-12     	; 0x1e8e <__vector_13+0x440>
			return sendCommand(arr,true);
		}
		return false;
	}
	void copyPhoneFromSimToRAM(){
		char phoneNum[15] = {0};
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	ee 5b       	subi	r30, 0xBE	; 190
    1e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea0:	8f e0       	ldi	r24, 0x0F	; 15
    1ea2:	df 01       	movw	r26, r30
    1ea4:	1d 92       	st	X+, r1
    1ea6:	8a 95       	dec	r24
    1ea8:	e9 f7       	brne	.-6      	; 0x1ea4 <__vector_13+0x456>
    1eaa:	0f 2e       	mov	r0, r31
    1eac:	fc e8       	ldi	r31, 0x8C	; 140
    1eae:	6f 2e       	mov	r6, r31
    1eb0:	f4 e0       	ldi	r31, 0x04	; 4
    1eb2:	7f 2e       	mov	r7, r31
    1eb4:	f0 2d       	mov	r31, r0
    1eb6:	0f 2e       	mov	r0, r31
    1eb8:	f1 e3       	ldi	r31, 0x31	; 49
    1eba:	3f 2e       	mov	r3, r31
    1ebc:	f0 2d       	mov	r31, r0
		bool newData = _newData;
		_newData = false;
		return newData;
	}
	char *getPhoneBookNumber(char phoneNum[],char index){
		char arrCommand[15] ={"AT+CPBR=X\r\n"};
    1ebe:	0f 2e       	mov	r0, r31
    1ec0:	f3 e0       	ldi	r31, 0x03	; 3
    1ec2:	2f 2e       	mov	r2, r31
    1ec4:	f0 2d       	mov	r31, r0
    1ec6:	2e 01       	movw	r4, r28
    1ec8:	bf e3       	ldi	r27, 0x3F	; 63
    1eca:	4b 0e       	add	r4, r27
    1ecc:	51 1c       	adc	r5, r1
		char dataIn[50] = {0};
    1ece:	e1 54       	subi	r30, 0x41	; 65
    1ed0:	f1 09       	sbc	r31, r1
    1ed2:	4f 01       	movw	r8, r30
		RXinterruptDisable();
    1ed4:	0f 2e       	mov	r0, r31
    1ed6:	f1 ec       	ldi	r31, 0xC1	; 193
    1ed8:	af 2e       	mov	r10, r31
    1eda:	b1 2c       	mov	r11, r1
    1edc:	f0 2d       	mov	r31, r0
    1ede:	6e 01       	movw	r12, r28
    1ee0:	f2 e3       	ldi	r31, 0x32	; 50
    1ee2:	cf 0e       	add	r12, r31
    1ee4:	d1 1c       	adc	r13, r1
		bool newData = _newData;
		_newData = false;
		return newData;
	}
	char *getPhoneBookNumber(char phoneNum[],char index){
		char arrCommand[15] ={"AT+CPBR=X\r\n"};
    1ee6:	8c e0       	ldi	r24, 0x0C	; 12
    1ee8:	e0 e0       	ldi	r30, 0x00	; 0
    1eea:	f1 e0       	ldi	r31, 0x01	; 1
    1eec:	de 01       	movw	r26, r28
    1eee:	d3 96       	adiw	r26, 0x33	; 51
    1ef0:	01 90       	ld	r0, Z+
    1ef2:	0d 92       	st	X+, r0
    1ef4:	8a 95       	dec	r24
    1ef6:	e1 f7       	brne	.-8      	; 0x1ef0 <__vector_13+0x4a2>
    1ef8:	d2 01       	movw	r26, r4
    1efa:	e2 2d       	mov	r30, r2
    1efc:	1d 92       	st	X+, r1
    1efe:	ea 95       	dec	r30
    1f00:	e9 f7       	brne	.-6      	; 0x1efc <__vector_13+0x4ae>
		char dataIn[50] = {0};
    1f02:	d4 01       	movw	r26, r8
    1f04:	e2 e3       	ldi	r30, 0x32	; 50
    1f06:	1d 92       	st	X+, r1
    1f08:	ea 95       	dec	r30
    1f0a:	e9 f7       	brne	.-6      	; 0x1f06 <__vector_13+0x4b8>
		RXinterruptDisable();
    1f0c:	d5 01       	movw	r26, r10
    1f0e:	8c 91       	ld	r24, X
    1f10:	8f 77       	andi	r24, 0x7F	; 127
    1f12:	8c 93       	st	X, r24
		arrCommand[8] = index + '0';
    1f14:	3b ae       	std	Y+59, r3	; 0x3b
		gsmSMS.UARTstring(arrCommand,0);	
    1f16:	40 e0       	ldi	r20, 0x00	; 0
    1f18:	be 01       	movw	r22, r28
    1f1a:	6d 5c       	subi	r22, 0xCD	; 205
    1f1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f1e:	8d e4       	ldi	r24, 0x4D	; 77
    1f20:	94 e0       	ldi	r25, 0x04	; 4
    1f22:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
    1f26:	74 01       	movw	r14, r8
			return false;
		}
		return 0;
	}
	int checkForACkPacket(char getData[], int arrSize){
		int i = 0;
    1f28:	00 e0       	ldi	r16, 0x00	; 0
    1f2a:	10 e0       	ldi	r17, 0x00	; 0
		char data = 0;
		
		do 
		{
			data = gsmSMS.UARTreceive();
    1f2c:	8d e4       	ldi	r24, 0x4D	; 77
    1f2e:	94 e0       	ldi	r25, 0x04	; 4
    1f30:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <_ZN4Uart11UARTreceiveEv>
			getData[i++] = data;
    1f34:	0f 5f       	subi	r16, 0xFF	; 255
    1f36:	1f 4f       	sbci	r17, 0xFF	; 255
    1f38:	f7 01       	movw	r30, r14
    1f3a:	81 93       	st	Z+, r24
    1f3c:	7f 01       	movw	r14, r30
		}while(gsmSMS.checkForData() && i < arrSize);
    1f3e:	8d e4       	ldi	r24, 0x4D	; 77
    1f40:	94 e0       	ldi	r25, 0x04	; 4
    1f42:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <_ZN4Uart12checkForDataEv>
    1f46:	88 23       	and	r24, r24
    1f48:	09 f4       	brne	.+2      	; 0x1f4c <__vector_13+0x4fe>
    1f4a:	97 c0       	rjmp	.+302    	; 0x207a <__vector_13+0x62c>
    1f4c:	01 33       	cpi	r16, 0x31	; 49
    1f4e:	11 05       	cpc	r17, r1
    1f50:	69 f7       	brne	.-38     	; 0x1f2c <__vector_13+0x4de>
    1f52:	93 c0       	rjmp	.+294    	; 0x207a <__vector_13+0x62c>
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    1f54:	81 91       	ld	r24, Z+
    1f56:	82 32       	cpi	r24, 0x22	; 34
    1f58:	09 f4       	brne	.+2      	; 0x1f5c <__vector_13+0x50e>
    1f5a:	9d c0       	rjmp	.+314    	; 0x2096 <__vector_13+0x648>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    1f5c:	ce 16       	cp	r12, r30
    1f5e:	df 06       	cpc	r13, r31
    1f60:	c9 f7       	brne	.-14     	; 0x1f54 <__vector_13+0x506>
    1f62:	28 c0       	rjmp	.+80     	; 0x1fb4 <__vector_13+0x566>
		{
			if (arr[i] == word)
    1f64:	81 91       	ld	r24, Z+
    1f66:	82 32       	cpi	r24, 0x22	; 34
    1f68:	21 f0       	breq	.+8      	; 0x1f72 <__vector_13+0x524>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    1f6a:	ec 15       	cp	r30, r12
    1f6c:	fd 05       	cpc	r31, r13
    1f6e:	d1 f7       	brne	.-12     	; 0x1f64 <__vector_13+0x516>
    1f70:	21 c0       	rjmp	.+66     	; 0x1fb4 <__vector_13+0x566>
		checkForACkPacket(dataIn, 49);
		RXinterruptEnable();
		if (compWordInArr(dataIn,'"',1,49) && compWordInArr(dataIn+15,'"',1,34))
		{
			int counter = 0;
			while(dataIn[counter] != '0' && counter < 15)
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	80 33       	cpi	r24, 0x30	; 48
    1f76:	71 f0       	breq	.+28     	; 0x1f94 <__vector_13+0x546>
    1f78:	fe 01       	movw	r30, r28
    1f7a:	32 96       	adiw	r30, 0x02	; 2
    1f7c:	60 e0       	ldi	r22, 0x00	; 0
    1f7e:	70 e0       	ldi	r23, 0x00	; 0
    1f80:	03 c0       	rjmp	.+6      	; 0x1f88 <__vector_13+0x53a>
    1f82:	6f 30       	cpi	r22, 0x0F	; 15
    1f84:	71 05       	cpc	r23, r1
    1f86:	41 f0       	breq	.+16     	; 0x1f98 <__vector_13+0x54a>
			{
				counter++;
    1f88:	6f 5f       	subi	r22, 0xFF	; 255
    1f8a:	7f 4f       	sbci	r23, 0xFF	; 255
		checkForACkPacket(dataIn, 49);
		RXinterruptEnable();
		if (compWordInArr(dataIn,'"',1,49) && compWordInArr(dataIn+15,'"',1,34))
		{
			int counter = 0;
			while(dataIn[counter] != '0' && counter < 15)
    1f8c:	81 91       	ld	r24, Z+
    1f8e:	80 33       	cpi	r24, 0x30	; 48
    1f90:	c1 f7       	brne	.-16     	; 0x1f82 <__vector_13+0x534>
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <__vector_13+0x54a>
    1f94:	60 e0       	ldi	r22, 0x00	; 0
    1f96:	70 e0       	ldi	r23, 0x00	; 0
			{
				counter++;
			}
			dataIn[counter+10] = '\0';
    1f98:	eb e0       	ldi	r30, 0x0B	; 11
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	ec 0f       	add	r30, r28
    1f9e:	fd 1f       	adc	r31, r29
    1fa0:	e6 0f       	add	r30, r22
    1fa2:	f7 1f       	adc	r31, r23
    1fa4:	10 82       	st	Z, r1
			strcpy(phoneNum,dataIn+counter);
    1fa6:	68 0d       	add	r22, r8
    1fa8:	79 1d       	adc	r23, r9
    1faa:	ce 01       	movw	r24, r28
    1fac:	8e 5b       	subi	r24, 0xBE	; 190
    1fae:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb0:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
	void copyPhoneFromSimToRAM(){
		char phoneNum[15] = {0};
		for(int i = 1; i < 4; i++)
		{
			getPhoneBookNumber(phoneNum,i);
			if (*phoneNum != 0)
    1fb4:	23 96       	adiw	r28, 0x03	; 3
    1fb6:	8f ad       	ldd	r24, Y+63	; 0x3f
    1fb8:	23 97       	sbiw	r28, 0x03	; 3
    1fba:	88 23       	and	r24, r24
    1fbc:	31 f0       	breq	.+12     	; 0x1fca <__vector_13+0x57c>
			{
				strcpy(_phoneBook[i],phoneNum);
    1fbe:	be 01       	movw	r22, r28
    1fc0:	6e 5b       	subi	r22, 0xBE	; 190
    1fc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc4:	c3 01       	movw	r24, r6
    1fc6:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
    1fca:	33 94       	inc	r3
    1fcc:	fb e0       	ldi	r31, 0x0B	; 11
    1fce:	6f 0e       	add	r6, r31
    1fd0:	71 1c       	adc	r7, r1
		}
		return false;
	}
	void copyPhoneFromSimToRAM(){
		char phoneNum[15] = {0};
		for(int i = 1; i < 4; i++)
    1fd2:	24 e3       	ldi	r18, 0x34	; 52
    1fd4:	32 12       	cpse	r3, r18
    1fd6:	87 cf       	rjmp	.-242    	; 0x1ee6 <__vector_13+0x498>
    1fd8:	03 c0       	rjmp	.+6      	; 0x1fe0 <__vector_13+0x592>
				_startTimeCounterGSMreset = false;
				setup(BAUD9600);
			}
			else
			{
				_10secRestetGSMdelay++;
    1fda:	8f 5f       	subi	r24, 0xFF	; 255
    1fdc:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <top+0x104>
		resetPacket();
		Set_RX_Mode();
		timerSetting();
	}
	void timerCarSetToLockedInterrupHandle(){
		if (_startTimeCounterCarAlarm)
    1fe0:	80 91 e7 06 	lds	r24, 0x06E7	; 0x8006e7 <top+0x29a>
    1fe4:	88 23       	and	r24, r24
    1fe6:	79 f0       	breq	.+30     	; 0x2006 <__vector_13+0x5b8>
		{
			if (_10minCounterCarAlarm > 120)
    1fe8:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <top+0x29e>
    1fec:	89 37       	cpi	r24, 0x79	; 121
    1fee:	40 f0       	brcs	.+16     	; 0x2000 <__vector_13+0x5b2>
			{
				_carAlarmTimerOverFlow = true;
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	80 93 e9 06 	sts	0x06E9, r24	; 0x8006e9 <top+0x29c>
				_startTimeCounterCarAlarm = false;
    1ff6:	10 92 e7 06 	sts	0x06E7, r1	; 0x8006e7 <top+0x29a>
				_10minCounterCarAlarm = 0;
    1ffa:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <top+0x29e>
    1ffe:	03 c0       	rjmp	.+6      	; 0x2006 <__vector_13+0x5b8>
			}
			else
			{
				_10minCounterCarAlarm++;
    2000:	8f 5f       	subi	r24, 0xFF	; 255
    2002:	80 93 eb 06 	sts	0x06EB, r24	; 0x8006eb <top+0x29e>
			}
		}
	}
	void timerEmergencyCarLocationInterrupHandle(){
		if (_startTimeCounterEmergencyCarLocation)
    2006:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <top+0x29b>
    200a:	88 23       	and	r24, r24
    200c:	09 f4       	brne	.+2      	; 0x2010 <__vector_13+0x5c2>
    200e:	74 c0       	rjmp	.+232    	; 0x20f8 <__vector_13+0x6aa>
		{
			if (_30secCounterEmergencyCarLocation > 6)
    2010:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <top+0x29f>
    2014:	87 30       	cpi	r24, 0x07	; 7
    2016:	30 f0       	brcs	.+12     	; 0x2024 <__vector_13+0x5d6>
			{
				_emergencyCarLocationTimerOverFlow = true;
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	80 93 ea 06 	sts	0x06EA, r24	; 0x8006ea <top+0x29d>
				_30secCounterEmergencyCarLocation = 0;
    201e:	10 92 ec 06 	sts	0x06EC, r1	; 0x8006ec <top+0x29f>
    2022:	6a c0       	rjmp	.+212    	; 0x20f8 <__vector_13+0x6aa>
			}
			else
			{
				_30secCounterEmergencyCarLocation++;
    2024:	8f 5f       	subi	r24, 0xFF	; 255
    2026:	80 93 ec 06 	sts	0x06EC, r24	; 0x8006ec <top+0x29f>
	TCNT1 = 1;   //interrupt every 5 sec at 16 MHz clock
	top.timerSMSinterrupHandle();
	top.timerGSMresetInterrupHandle();	
	top.timerCarSetToLockedInterrupHandle();
	top.timerEmergencyCarLocationInterrupHandle();
}
    202a:	66 c0       	rjmp	.+204    	; 0x20f8 <__vector_13+0x6aa>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    202c:	fe 01       	movw	r30, r28
    202e:	e0 0f       	add	r30, r16
    2030:	f1 1f       	adc	r31, r17
    2032:	11 82       	std	Z+1, r1	; 0x01
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    2034:	e1 ec       	ldi	r30, 0xC1	; 193
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	80 68       	ori	r24, 0x80	; 128
    203c:	80 83       	st	Z, r24
			if (*arr != 0)
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	81 11       	cpse	r24, r1
    2042:	b9 cd       	rjmp	.-1166   	; 0x1bb6 <__vector_13+0x168>
    2044:	14 ce       	rjmp	.-984    	; 0x1c6e <__vector_13+0x220>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    2046:	fe 01       	movw	r30, r28
    2048:	e0 0f       	add	r30, r16
    204a:	f1 1f       	adc	r31, r17
    204c:	11 82       	std	Z+1, r1	; 0x01
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    204e:	e1 ec       	ldi	r30, 0xC1	; 193
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	80 68       	ori	r24, 0x80	; 128
    2056:	80 83       	st	Z, r24
			if (*arr != 0)
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	81 11       	cpse	r24, r1
    205c:	37 ce       	rjmp	.-914    	; 0x1ccc <__vector_13+0x27e>
    205e:	92 ce       	rjmp	.-732    	; 0x1d84 <__vector_13+0x336>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    2060:	fe 01       	movw	r30, r28
    2062:	e0 0f       	add	r30, r16
    2064:	f1 1f       	adc	r31, r17
    2066:	11 82       	std	Z+1, r1	; 0x01
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    2068:	e1 ec       	ldi	r30, 0xC1	; 193
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	80 68       	ori	r24, 0x80	; 128
    2070:	80 83       	st	Z, r24
			if (*arr != 0)
    2072:	89 81       	ldd	r24, Y+1	; 0x01
    2074:	81 11       	cpse	r24, r1
    2076:	b5 ce       	rjmp	.-662    	; 0x1de2 <__vector_13+0x394>
    2078:	10 cf       	rjmp	.-480    	; 0x1e9a <__vector_13+0x44c>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    207a:	f4 01       	movw	r30, r8
    207c:	e0 0f       	add	r30, r16
    207e:	f1 1f       	adc	r31, r17
    2080:	10 82       	st	Z, r1
		char dataIn[50] = {0};
		RXinterruptDisable();
		arrCommand[8] = index + '0';
		gsmSMS.UARTstring(arrCommand,0);	
		checkForACkPacket(dataIn, 49);
		RXinterruptEnable();
    2082:	d5 01       	movw	r26, r10
    2084:	8c 91       	ld	r24, X
    2086:	80 68       	ori	r24, 0x80	; 128
    2088:	8c 93       	st	X, r24
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    208a:	89 81       	ldd	r24, Y+1	; 0x01
    208c:	82 32       	cpi	r24, 0x22	; 34
    208e:	19 f0       	breq	.+6      	; 0x2096 <__vector_13+0x648>
    2090:	fe 01       	movw	r30, r28
    2092:	32 96       	adiw	r30, 0x02	; 2
    2094:	5f cf       	rjmp	.-322    	; 0x1f54 <__vector_13+0x506>
    2096:	88 89       	ldd	r24, Y+16	; 0x10
    2098:	82 32       	cpi	r24, 0x22	; 34
    209a:	09 f4       	brne	.+2      	; 0x209e <__vector_13+0x650>
    209c:	6a cf       	rjmp	.-300    	; 0x1f72 <__vector_13+0x524>
    209e:	fe 01       	movw	r30, r28
    20a0:	71 96       	adiw	r30, 0x11	; 17
    20a2:	60 cf       	rjmp	.-320    	; 0x1f64 <__vector_13+0x516>
    20a4:	02 96       	adiw	r24, 0x02	; 2
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    20a6:	36 2f       	mov	r19, r22
    20a8:	cc cd       	rjmp	.-1128   	; 0x1c42 <__vector_13+0x1f4>
    20aa:	02 96       	adiw	r24, 0x02	; 2
    20ac:	36 2f       	mov	r19, r22
    20ae:	54 ce       	rjmp	.-856    	; 0x1d58 <__vector_13+0x30a>
    20b0:	02 96       	adiw	r24, 0x02	; 2
    20b2:	36 2f       	mov	r19, r22
    20b4:	dc ce       	rjmp	.-584    	; 0x1e6e <__vector_13+0x420>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    20b6:	1f 86       	std	Y+15, r1	; 0x0f
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    20b8:	e1 ec       	ldi	r30, 0xC1	; 193
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	80 68       	ori	r24, 0x80	; 128
    20c0:	80 83       	st	Z, r24
			if (*arr != 0)
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	88 23       	and	r24, r24
    20c6:	09 f4       	brne	.+2      	; 0x20ca <__vector_13+0x67c>
    20c8:	d2 cd       	rjmp	.-1116   	; 0x1c6e <__vector_13+0x220>
    20ca:	80 cd       	rjmp	.-1280   	; 0x1bcc <__vector_13+0x17e>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    20cc:	1f 86       	std	Y+15, r1	; 0x0f
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    20ce:	e1 ec       	ldi	r30, 0xC1	; 193
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	80 68       	ori	r24, 0x80	; 128
    20d6:	80 83       	st	Z, r24
			if (*arr != 0)
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	88 23       	and	r24, r24
    20dc:	09 f4       	brne	.+2      	; 0x20e0 <__vector_13+0x692>
    20de:	52 ce       	rjmp	.-860    	; 0x1d84 <__vector_13+0x336>
    20e0:	00 ce       	rjmp	.-1024   	; 0x1ce2 <__vector_13+0x294>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    20e2:	1f 86       	std	Y+15, r1	; 0x0f
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    20e4:	e1 ec       	ldi	r30, 0xC1	; 193
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	80 68       	ori	r24, 0x80	; 128
    20ec:	80 83       	st	Z, r24
			if (*arr != 0)
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	88 23       	and	r24, r24
    20f2:	09 f4       	brne	.+2      	; 0x20f6 <__vector_13+0x6a8>
    20f4:	d2 ce       	rjmp	.-604    	; 0x1e9a <__vector_13+0x44c>
    20f6:	80 ce       	rjmp	.-768    	; 0x1df8 <__vector_13+0x3aa>
	TCNT1 = 1;   //interrupt every 5 sec at 16 MHz clock
	top.timerSMSinterrupHandle();
	top.timerGSMresetInterrupHandle();	
	top.timerCarSetToLockedInterrupHandle();
	top.timerEmergencyCarLocationInterrupHandle();
}
    20f8:	c1 5a       	subi	r28, 0xA1	; 161
    20fa:	df 4f       	sbci	r29, 0xFF	; 255
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	f8 94       	cli
    2100:	de bf       	out	0x3e, r29	; 62
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	cd bf       	out	0x3d, r28	; 61
    2106:	df 91       	pop	r29
    2108:	cf 91       	pop	r28
    210a:	ff 91       	pop	r31
    210c:	ef 91       	pop	r30
    210e:	bf 91       	pop	r27
    2110:	af 91       	pop	r26
    2112:	9f 91       	pop	r25
    2114:	8f 91       	pop	r24
    2116:	7f 91       	pop	r23
    2118:	6f 91       	pop	r22
    211a:	5f 91       	pop	r21
    211c:	4f 91       	pop	r20
    211e:	3f 91       	pop	r19
    2120:	2f 91       	pop	r18
    2122:	1f 91       	pop	r17
    2124:	0f 91       	pop	r16
    2126:	ff 90       	pop	r15
    2128:	ef 90       	pop	r14
    212a:	df 90       	pop	r13
    212c:	cf 90       	pop	r12
    212e:	bf 90       	pop	r11
    2130:	af 90       	pop	r10
    2132:	9f 90       	pop	r9
    2134:	8f 90       	pop	r8
    2136:	7f 90       	pop	r7
    2138:	6f 90       	pop	r6
    213a:	5f 90       	pop	r5
    213c:	4f 90       	pop	r4
    213e:	3f 90       	pop	r3
    2140:	2f 90       	pop	r2
    2142:	0f 90       	pop	r0
    2144:	0f be       	out	0x3f, r0	; 63
    2146:	0f 90       	pop	r0
    2148:	1f 90       	pop	r1
    214a:	18 95       	reti

0000214c <main>:
int main(void)
{
    214c:	cf 93       	push	r28
    214e:	df 93       	push	r29
    2150:	cd b7       	in	r28, 0x3d	; 61
    2152:	de b7       	in	r29, 0x3e	; 62
    2154:	c9 5e       	subi	r28, 0xE9	; 233
    2156:	d1 09       	sbc	r29, r1
    2158:	0f b6       	in	r0, 0x3f	; 63
    215a:	f8 94       	cli
    215c:	de bf       	out	0x3e, r29	; 62
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	cd bf       	out	0x3d, r28	; 61
	sei();
    2162:	78 94       	sei
	check.setBaudRate(BAUD9600);
    2164:	60 e8       	ldi	r22, 0x80	; 128
    2166:	75 e2       	ldi	r23, 0x25	; 37
    2168:	8d ee       	ldi	r24, 0xED	; 237
    216a:	96 e0       	ldi	r25, 0x06	; 6
    216c:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN4Uart11setBaudRateE8BaudRate>
	RXinterruptEnable();
    2170:	e1 ec       	ldi	r30, 0xC1	; 193
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	80 68       	ori	r24, 0x80	; 128
    2178:	80 83       	st	Z, r24
		if (*getPhoneNumber(index) == 0)
		{
			return false;
		}
		_delay_ms(50);
		strcpy(command,"AT+CMGS=");											//copy command
    217a:	5e 01       	movw	r10, r28
    217c:	25 e7       	ldi	r18, 0x75	; 117
    217e:	a2 0e       	add	r10, r18
    2180:	b1 1c       	adc	r11, r1
		int condition;
		gsmSMS.UARTstring(ptr,0);
		gsmSMS.UARTsend(13);
		if (checkAck)
		{
			char arr[15] = {0};
    2182:	7e 01       	movw	r14, r28
    2184:	37 ea       	ldi	r19, 0xA7	; 167
    2186:	e3 0e       	add	r14, r19
    2188:	f1 1c       	adc	r15, r1
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    218a:	ca 51       	subi	r28, 0x1A	; 26
    218c:	df 4f       	sbci	r29, 0xFF	; 255
    218e:	e8 82       	st	Y, r14
    2190:	c6 5e       	subi	r28, 0xE6	; 230
    2192:	d0 40       	sbci	r29, 0x00	; 0
    2194:	c9 51       	subi	r28, 0x19	; 25
    2196:	df 4f       	sbci	r29, 0xFF	; 255
    2198:	f8 82       	st	Y, r15
    219a:	c7 5e       	subi	r28, 0xE7	; 231
    219c:	d0 40       	sbci	r29, 0x00	; 0
	}
	bool delPhoneNum(char index){
		if(index >= '1' && index <= '3')
		{
			char arr[14];
			strcpy(arr,"AT+CPBW=X,,,");
    219e:	4e 01       	movw	r8, r28
    21a0:	87 eb       	ldi	r24, 0xB7	; 183
    21a2:	88 0e       	add	r8, r24
    21a4:	91 1c       	adc	r9, r1
		bool newData = _newData;
		_newData = false;
		return newData;
	}
	char *getPhoneBookNumber(char phoneNum[],char index){
		char arrCommand[15] ={"AT+CPBR=X\r\n"};
    21a6:	d4 01       	movw	r26, r8
    21a8:	1c 96       	adiw	r26, 0x0c	; 12
    21aa:	c8 51       	subi	r28, 0x18	; 24
    21ac:	df 4f       	sbci	r29, 0xFF	; 255
    21ae:	b9 83       	std	Y+1, r27	; 0x01
    21b0:	a8 83       	st	Y, r26
    21b2:	c8 5e       	subi	r28, 0xE8	; 232
    21b4:	d0 40       	sbci	r29, 0x00	; 0
    21b6:	15 01       	movw	r2, r10
    21b8:	b1 e3       	ldi	r27, 0x31	; 49
    21ba:	2b 0e       	add	r2, r27
    21bc:	31 1c       	adc	r3, r1
		if(!(*str1 && *str2))
		{
			return false;
		}
		
		for(char i = 0;((*str2 != 0 || *str1 != 0) && (result == true)) && i < 10; i++)
    21be:	0f 2e       	mov	r0, r31
    21c0:	f6 e6       	ldi	r31, 0x66	; 102
    21c2:	4f 2e       	mov	r4, r31
    21c4:	51 2c       	mov	r5, r1
    21c6:	f0 2d       	mov	r31, r0
    21c8:	4c 0e       	add	r4, r28
    21ca:	5d 1e       	adc	r5, r29
    21cc:	ea e0       	ldi	r30, 0x0A	; 10
    21ce:	4e 0e       	add	r4, r30
    21d0:	51 1c       	adc	r5, r1
	char arr[101];
	char SMSrecievedPhoneNumber[15];
    while (1) 
    {
		
		RXinterruptEnable();
    21d2:	e1 ec       	ldi	r30, 0xC1	; 193
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	80 68       	ori	r24, 0x80	; 128
    21da:	80 83       	st	Z, r24
		_sendPacket[0] = 0xEF;
		_sendPacket[1] = 0xAA;
		_sendPacket[2] = _sendPacket[3] = _sendPacket[4] = _sendPacket[5] = 0;
	}
	bool carAlarmed(){
		if (_carAlarmTimerOverFlow)
    21dc:	80 91 e9 06 	lds	r24, 0x06E9	; 0x8006e9 <top+0x29c>
    21e0:	88 23       	and	r24, r24
    21e2:	19 f0       	breq	.+6      	; 0x21ea <main+0x9e>
		{
			_alarmOnOff = true;
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	80 93 e3 06 	sts	0x06E3, r24	; 0x8006e3 <top+0x296>
	}
	void emergencyCallIsanswer(){
		_callOneTimeOnEmergencyMode = false;
	}
	void alarmProtocol(){
		if (_emergencyAlarmON)
    21ea:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <top+0x297>
    21ee:	88 23       	and	r24, r24
    21f0:	09 f4       	brne	.+2      	; 0x21f4 <main+0xa8>
    21f2:	75 c1       	rjmp	.+746    	; 0x24de <main+0x392>
		{
			if (_callOneTimeOnEmergencyMode)
    21f4:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <top+0x299>
    21f8:	88 23       	and	r24, r24
    21fa:	09 f4       	brne	.+2      	; 0x21fe <main+0xb2>
    21fc:	9b c0       	rjmp	.+310    	; 0x2334 <main+0x1e8>
		tempPhone[11] = '\0';
		strcpy(_phoneBook[4],tempPhone);
	}
	bool call(int index){
		char arr[16];
		strcpy(arr,"ATD");
    21fe:	81 e4       	ldi	r24, 0x41	; 65
    2200:	94 e5       	ldi	r25, 0x54	; 84
    2202:	d5 01       	movw	r26, r10
    2204:	11 96       	adiw	r26, 0x01	; 1
    2206:	9c 93       	st	X, r25
    2208:	8e 93       	st	-X, r24
    220a:	84 e4       	ldi	r24, 0x44	; 68
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	13 96       	adiw	r26, 0x03	; 3
    2210:	9c 93       	st	X, r25
    2212:	8e 93       	st	-X, r24
    2214:	12 97       	sbiw	r26, 0x02	; 2
		strcpy(arr+3,getPhoneNumber(1));
    2216:	6c e8       	ldi	r22, 0x8C	; 140
    2218:	74 e0       	ldi	r23, 0x04	; 4
    221a:	c5 01       	movw	r24, r10
    221c:	03 96       	adiw	r24, 0x03	; 3
    221e:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
		arr[13] = ';';
    2222:	8b e3       	ldi	r24, 0x3B	; 59
    2224:	f5 01       	movw	r30, r10
    2226:	85 87       	std	Z+13, r24	; 0x0d
		arr[14] = 0;
    2228:	16 86       	std	Z+14, r1	; 0x0e
	char _1minConterSMSreceived, _10secRestetGSMdelay , _GSMerrorCounter;
	bool _newData, _startTimeCounterSMSreceived, _startTimeCounterGSMreset;
	int _newDataIndex;
	bool sendCommand(const char ptr[], bool checkAck = false){
		int condition;
		gsmSMS.UARTstring(ptr,0);
    222a:	40 e0       	ldi	r20, 0x00	; 0
    222c:	b5 01       	movw	r22, r10
    222e:	8d e4       	ldi	r24, 0x4D	; 77
    2230:	94 e0       	ldi	r25, 0x04	; 4
    2232:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		gsmSMS.UARTsend(13);
    2236:	6d e0       	ldi	r22, 0x0D	; 13
    2238:	8d e4       	ldi	r24, 0x4D	; 77
    223a:	94 e0       	ldi	r25, 0x04	; 4
    223c:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		if (checkAck)
		{
			char arr[15] = {0};
    2240:	8f e0       	ldi	r24, 0x0F	; 15
    2242:	d7 01       	movw	r26, r14
    2244:	1d 92       	st	X+, r1
    2246:	8a 95       	dec	r24
    2248:	e9 f7       	brne	.-6      	; 0x2244 <main+0xf8>
			RXinterruptDisable();
    224a:	e1 ec       	ldi	r30, 0xC1	; 193
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	8f 77       	andi	r24, 0x7F	; 127
    2252:	80 83       	st	Z, r24
    2254:	67 01       	movw	r12, r14
			return false;
		}
		return 0;
	}
	int checkForACkPacket(char getData[], int arrSize){
		int i = 0;
    2256:	00 e0       	ldi	r16, 0x00	; 0
    2258:	10 e0       	ldi	r17, 0x00	; 0
		char data = 0;
		
		do 
		{
			data = gsmSMS.UARTreceive();
    225a:	8d e4       	ldi	r24, 0x4D	; 77
    225c:	94 e0       	ldi	r25, 0x04	; 4
    225e:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <_ZN4Uart11UARTreceiveEv>
			getData[i++] = data;
    2262:	0f 5f       	subi	r16, 0xFF	; 255
    2264:	1f 4f       	sbci	r17, 0xFF	; 255
    2266:	f6 01       	movw	r30, r12
    2268:	81 93       	st	Z+, r24
    226a:	6f 01       	movw	r12, r30
		}while(gsmSMS.checkForData() && i < arrSize);
    226c:	8d e4       	ldi	r24, 0x4D	; 77
    226e:	94 e0       	ldi	r25, 0x04	; 4
    2270:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <_ZN4Uart12checkForDataEv>
    2274:	88 23       	and	r24, r24
    2276:	11 f4       	brne	.+4      	; 0x227c <main+0x130>
    2278:	0c 94 35 22 	jmp	0x446a	; 0x446a <main+0x231e>
    227c:	0e 30       	cpi	r16, 0x0E	; 14
    227e:	11 05       	cpc	r17, r1
    2280:	61 f7       	brne	.-40     	; 0x225a <main+0x10e>
    2282:	0c 94 fd 25 	jmp	0x4bfa	; 0x4bfa <main+0x2aae>
    2286:	98 01       	movw	r18, r16
    2288:	11 23       	and	r17, r17
    228a:	14 f4       	brge	.+4      	; 0x2290 <main+0x144>
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	33 27       	eor	r19, r19
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    2292:	12 16       	cp	r1, r18
    2294:	13 06       	cpc	r1, r19
    2296:	0c f0       	brlt	.+2      	; 0x229a <main+0x14e>
    2298:	22 c1       	rjmp	.+580    	; 0x24de <main+0x392>
    229a:	02 c0       	rjmp	.+4      	; 0x22a0 <main+0x154>
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
			if (*arr != 0)
    229c:	2e e0       	ldi	r18, 0x0E	; 14
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	61 e0       	ldi	r22, 0x01	; 1
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	47 e3       	ldi	r20, 0x37	; 55
    22a8:	51 e0       	ldi	r21, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    22aa:	70 e0       	ldi	r23, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    22ac:	f7 01       	movw	r30, r14
    22ae:	e8 0f       	add	r30, r24
    22b0:	f9 1f       	adc	r31, r25
    22b2:	a0 81       	ld	r26, Z
    22b4:	a5 34       	cpi	r26, 0x45	; 69
    22b6:	61 f4       	brne	.+24     	; 0x22d0 <main+0x184>
    22b8:	a2 e3       	ldi	r26, 0x32	; 50
    22ba:	b1 e0       	ldi	r27, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    22bc:	01 91       	ld	r16, Z+
    22be:	1d 91       	ld	r17, X+
    22c0:	01 13       	cpse	r16, r17
					{
						status = false;
    22c2:	67 2f       	mov	r22, r23
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    22c4:	4a 17       	cp	r20, r26
    22c6:	5b 07       	cpc	r21, r27
    22c8:	c9 f7       	brne	.-14     	; 0x22bc <main+0x170>
    22ca:	05 96       	adiw	r24, 0x05	; 5
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    22cc:	61 11       	cpse	r22, r1
    22ce:	07 c1       	rjmp	.+526    	; 0x24de <main+0x392>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    22d0:	01 96       	adiw	r24, 0x01	; 1
    22d2:	82 17       	cp	r24, r18
    22d4:	93 07       	cpc	r25, r19
    22d6:	54 f3       	brlt	.-44     	; 0x22ac <main+0x160>
    22d8:	51 e0       	ldi	r21, 0x01	; 1
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	90 e0       	ldi	r25, 0x00	; 0
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    22de:	60 e0       	ldi	r22, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    22e0:	f7 01       	movw	r30, r14
    22e2:	e8 0f       	add	r30, r24
    22e4:	f9 1f       	adc	r31, r25
    22e6:	40 81       	ld	r20, Z
    22e8:	4f 34       	cpi	r20, 0x4F	; 79
    22ea:	71 f4       	brne	.+28     	; 0x2308 <main+0x1bc>
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    22ec:	e8 ea       	ldi	r30, 0xA8	; 168
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	ec 0f       	add	r30, r28
    22f2:	fd 1f       	adc	r31, r29
    22f4:	e8 0f       	add	r30, r24
    22f6:	f9 1f       	adc	r31, r25
    22f8:	40 81       	ld	r20, Z
    22fa:	4b 34       	cpi	r20, 0x4B	; 75
    22fc:	11 f0       	breq	.+4      	; 0x2302 <main+0x1b6>
    22fe:	0c 94 0f 25 	jmp	0x4a1e	; 0x4a1e <main+0x28d2>
    2302:	02 96       	adiw	r24, 0x02	; 2
					{
						status = false;
					}
				}
				if (status)
    2304:	51 11       	cpse	r21, r1
    2306:	eb c0       	rjmp	.+470    	; 0x24de <main+0x392>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    2308:	01 96       	adiw	r24, 0x01	; 1
    230a:	82 17       	cp	r24, r18
    230c:	93 07       	cpc	r25, r19
    230e:	44 f3       	brlt	.-48     	; 0x22e0 <main+0x194>
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    2310:	d7 01       	movw	r26, r14
    2312:	8c 91       	ld	r24, X
    2314:	8e 33       	cpi	r24, 0x3E	; 62
    2316:	09 f4       	brne	.+2      	; 0x231a <main+0x1ce>
    2318:	e2 c0       	rjmp	.+452    	; 0x24de <main+0x392>
    231a:	f7 01       	movw	r30, r14
    231c:	31 96       	adiw	r30, 0x01	; 1
    231e:	2e 0d       	add	r18, r14
    2320:	3f 1d       	adc	r19, r15
    2322:	04 c0       	rjmp	.+8      	; 0x232c <main+0x1e0>
    2324:	81 91       	ld	r24, Z+
    2326:	8e 33       	cpi	r24, 0x3E	; 62
    2328:	09 f4       	brne	.+2      	; 0x232c <main+0x1e0>
    232a:	d9 c0       	rjmp	.+434    	; 0x24de <main+0x392>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    232c:	2e 17       	cp	r18, r30
    232e:	3f 07       	cpc	r19, r31
    2330:	c9 f7       	brne	.-14     	; 0x2324 <main+0x1d8>
    2332:	d5 c0       	rjmp	.+426    	; 0x24de <main+0x392>
		{
			if (_callOneTimeOnEmergencyMode)
			{
				call(1);
			}
			else if (_emergencyCarLocationTimerOverFlow)
    2334:	80 91 ea 06 	lds	r24, 0x06EA	; 0x8006ea <top+0x29d>
    2338:	88 23       	and	r24, r24
    233a:	09 f4       	brne	.+2      	; 0x233e <main+0x1f2>
    233c:	d0 c0       	rjmp	.+416    	; 0x24de <main+0x392>
			{
				char *ptr = getGoogleMapsLink();
    233e:	88 e5       	ldi	r24, 0x58	; 88
    2340:	95 e0       	ldi	r25, 0x05	; 5
    2342:	0e 94 5d 08 	call	0x10ba	; 0x10ba <_ZN17MovedFromLocation17getGoogleMapsLinkEv>
    2346:	3c 01       	movw	r6, r24
		sendCommand("AT+MORING=1",true);
		copyPhoneFromSimToRAM();
	}
	bool sendSMS(const char *ptr,int index, const char *massage2 = NULL, const char *massage3 = NULL, const char *massage4 = NULL, const char *massage5 = NULL){
		char command[25];
		if (*getPhoneNumber(index) == 0)
    2348:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <top+0x3f>
    234c:	88 23       	and	r24, r24
    234e:	09 f4       	brne	.+2      	; 0x2352 <main+0x206>
    2350:	c4 c0       	rjmp	.+392    	; 0x24da <main+0x38e>
    2352:	bf ef       	ldi	r27, 0xFF	; 255
    2354:	e0 e7       	ldi	r30, 0x70	; 112
    2356:	f2 e0       	ldi	r31, 0x02	; 2
    2358:	b1 50       	subi	r27, 0x01	; 1
    235a:	e0 40       	sbci	r30, 0x00	; 0
    235c:	f0 40       	sbci	r31, 0x00	; 0
    235e:	e1 f7       	brne	.-8      	; 0x2358 <main+0x20c>
    2360:	00 c0       	rjmp	.+0      	; 0x2362 <main+0x216>
    2362:	00 00       	nop
		{
			return false;
		}
		_delay_ms(50);
		strcpy(command,"AT+CMGS=");											//copy command
    2364:	89 e0       	ldi	r24, 0x09	; 9
    2366:	ed e8       	ldi	r30, 0x8D	; 141
    2368:	f1 e0       	ldi	r31, 0x01	; 1
    236a:	d5 01       	movw	r26, r10
    236c:	01 90       	ld	r0, Z+
    236e:	0d 92       	st	X+, r0
    2370:	8a 95       	dec	r24
    2372:	e1 f7       	brne	.-8      	; 0x236c <main+0x220>
		strcpy(command+9,getPhoneNumber(index));							//copy phone number
    2374:	6c e8       	ldi	r22, 0x8C	; 140
    2376:	74 e0       	ldi	r23, 0x04	; 4
    2378:	c5 01       	movw	r24, r10
    237a:	09 96       	adiw	r24, 0x09	; 9
    237c:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
		command[8] = command[19] = '"';										//set <"> for phone number
    2380:	82 e2       	ldi	r24, 0x22	; 34
    2382:	d5 01       	movw	r26, r10
    2384:	53 96       	adiw	r26, 0x13	; 19
    2386:	8c 93       	st	X, r24
    2388:	53 97       	sbiw	r26, 0x13	; 19
    238a:	18 96       	adiw	r26, 0x08	; 8
    238c:	8c 93       	st	X, r24
    238e:	18 97       	sbiw	r26, 0x08	; 8
		command[20] = 0;													//close number with <">, run over the dummy char
    2390:	54 96       	adiw	r26, 0x14	; 20
    2392:	1c 92       	st	X, r1
	char _1minConterSMSreceived, _10secRestetGSMdelay , _GSMerrorCounter;
	bool _newData, _startTimeCounterSMSreceived, _startTimeCounterGSMreset;
	int _newDataIndex;
	bool sendCommand(const char ptr[], bool checkAck = false){
		int condition;
		gsmSMS.UARTstring(ptr,0);
    2394:	40 e0       	ldi	r20, 0x00	; 0
    2396:	b5 01       	movw	r22, r10
    2398:	8d e4       	ldi	r24, 0x4D	; 77
    239a:	94 e0       	ldi	r25, 0x04	; 4
    239c:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		gsmSMS.UARTsend(13);
    23a0:	6d e0       	ldi	r22, 0x0D	; 13
    23a2:	8d e4       	ldi	r24, 0x4D	; 77
    23a4:	94 e0       	ldi	r25, 0x04	; 4
    23a6:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		if (checkAck)
		{
			char arr[15] = {0};
    23aa:	8f e0       	ldi	r24, 0x0F	; 15
    23ac:	f7 01       	movw	r30, r14
    23ae:	11 92       	st	Z+, r1
    23b0:	8a 95       	dec	r24
    23b2:	e9 f7       	brne	.-6      	; 0x23ae <main+0x262>
			RXinterruptDisable();
    23b4:	e1 ec       	ldi	r30, 0xC1	; 193
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	80 81       	ld	r24, Z
    23ba:	8f 77       	andi	r24, 0x7F	; 127
    23bc:	80 83       	st	Z, r24
    23be:	67 01       	movw	r12, r14
			return false;
		}
		return 0;
	}
	int checkForACkPacket(char getData[], int arrSize){
		int i = 0;
    23c0:	00 e0       	ldi	r16, 0x00	; 0
    23c2:	10 e0       	ldi	r17, 0x00	; 0
		char data = 0;
		
		do 
		{
			data = gsmSMS.UARTreceive();
    23c4:	8d e4       	ldi	r24, 0x4D	; 77
    23c6:	94 e0       	ldi	r25, 0x04	; 4
    23c8:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <_ZN4Uart11UARTreceiveEv>
			getData[i++] = data;
    23cc:	0f 5f       	subi	r16, 0xFF	; 255
    23ce:	1f 4f       	sbci	r17, 0xFF	; 255
    23d0:	d6 01       	movw	r26, r12
    23d2:	8d 93       	st	X+, r24
    23d4:	6d 01       	movw	r12, r26
		}while(gsmSMS.checkForData() && i < arrSize);
    23d6:	8d e4       	ldi	r24, 0x4D	; 77
    23d8:	94 e0       	ldi	r25, 0x04	; 4
    23da:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <_ZN4Uart12checkForDataEv>
    23de:	88 23       	and	r24, r24
    23e0:	11 f4       	brne	.+4      	; 0x23e6 <main+0x29a>
    23e2:	0c 94 45 22 	jmp	0x448a	; 0x448a <main+0x233e>
    23e6:	0e 30       	cpi	r16, 0x0E	; 14
    23e8:	11 05       	cpc	r17, r1
    23ea:	61 f7       	brne	.-40     	; 0x23c4 <main+0x278>
    23ec:	0c 94 0c 26 	jmp	0x4c18	; 0x4c18 <main+0x2acc>
    23f0:	98 01       	movw	r18, r16
    23f2:	11 23       	and	r17, r17
    23f4:	14 f4       	brge	.+4      	; 0x23fa <main+0x2ae>
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	33 27       	eor	r19, r19
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    23fc:	12 16       	cp	r1, r18
    23fe:	13 06       	cpc	r1, r19
    2400:	0c f0       	brlt	.+2      	; 0x2404 <main+0x2b8>
    2402:	49 c0       	rjmp	.+146    	; 0x2496 <main+0x34a>
    2404:	02 c0       	rjmp	.+4      	; 0x240a <main+0x2be>
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
			if (*arr != 0)
    2406:	2e e0       	ldi	r18, 0x0E	; 14
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	61 e0       	ldi	r22, 0x01	; 1
    240c:	80 e0       	ldi	r24, 0x00	; 0
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	47 e3       	ldi	r20, 0x37	; 55
    2412:	51 e0       	ldi	r21, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    2414:	70 e0       	ldi	r23, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    2416:	f7 01       	movw	r30, r14
    2418:	e8 0f       	add	r30, r24
    241a:	f9 1f       	adc	r31, r25
    241c:	a0 81       	ld	r26, Z
    241e:	a5 34       	cpi	r26, 0x45	; 69
    2420:	61 f4       	brne	.+24     	; 0x243a <main+0x2ee>
    2422:	a2 e3       	ldi	r26, 0x32	; 50
    2424:	b1 e0       	ldi	r27, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    2426:	01 91       	ld	r16, Z+
    2428:	1d 91       	ld	r17, X+
    242a:	01 13       	cpse	r16, r17
					{
						status = false;
    242c:	67 2f       	mov	r22, r23
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    242e:	4a 17       	cp	r20, r26
    2430:	5b 07       	cpc	r21, r27
    2432:	c9 f7       	brne	.-14     	; 0x2426 <main+0x2da>
    2434:	05 96       	adiw	r24, 0x05	; 5
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    2436:	61 11       	cpse	r22, r1
    2438:	2e c0       	rjmp	.+92     	; 0x2496 <main+0x34a>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    243a:	01 96       	adiw	r24, 0x01	; 1
    243c:	82 17       	cp	r24, r18
    243e:	93 07       	cpc	r25, r19
    2440:	54 f3       	brlt	.-44     	; 0x2416 <main+0x2ca>
    2442:	51 e0       	ldi	r21, 0x01	; 1
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	90 e0       	ldi	r25, 0x00	; 0
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    2448:	60 e0       	ldi	r22, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    244a:	f7 01       	movw	r30, r14
    244c:	e8 0f       	add	r30, r24
    244e:	f9 1f       	adc	r31, r25
    2450:	40 81       	ld	r20, Z
    2452:	4f 34       	cpi	r20, 0x4F	; 79
    2454:	71 f4       	brne	.+28     	; 0x2472 <main+0x326>
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    2456:	e8 ea       	ldi	r30, 0xA8	; 168
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	ec 0f       	add	r30, r28
    245c:	fd 1f       	adc	r31, r29
    245e:	e8 0f       	add	r30, r24
    2460:	f9 1f       	adc	r31, r25
    2462:	40 81       	ld	r20, Z
    2464:	4b 34       	cpi	r20, 0x4B	; 75
    2466:	11 f0       	breq	.+4      	; 0x246c <main+0x320>
    2468:	0c 94 13 25 	jmp	0x4a26	; 0x4a26 <main+0x28da>
    246c:	02 96       	adiw	r24, 0x02	; 2
					{
						status = false;
					}
				}
				if (status)
    246e:	51 11       	cpse	r21, r1
    2470:	12 c0       	rjmp	.+36     	; 0x2496 <main+0x34a>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    2472:	01 96       	adiw	r24, 0x01	; 1
    2474:	82 17       	cp	r24, r18
    2476:	93 07       	cpc	r25, r19
    2478:	44 f3       	brlt	.-48     	; 0x244a <main+0x2fe>
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    247a:	f7 01       	movw	r30, r14
    247c:	80 81       	ld	r24, Z
    247e:	8e 33       	cpi	r24, 0x3E	; 62
    2480:	51 f0       	breq	.+20     	; 0x2496 <main+0x34a>
    2482:	31 96       	adiw	r30, 0x01	; 1
    2484:	2e 0d       	add	r18, r14
    2486:	3f 1d       	adc	r19, r15
    2488:	03 c0       	rjmp	.+6      	; 0x2490 <main+0x344>
    248a:	81 91       	ld	r24, Z+
    248c:	8e 33       	cpi	r24, 0x3E	; 62
    248e:	19 f0       	breq	.+6      	; 0x2496 <main+0x34a>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    2490:	2e 17       	cp	r18, r30
    2492:	3f 07       	cpc	r19, r31
    2494:	d1 f7       	brne	.-12     	; 0x248a <main+0x33e>
		command[8] = command[19] = '"';										//set <"> for phone number
		command[20] = 0;													//close number with <">, run over the dummy char
		
		sendCommand(command,true);
		
		gsmSMS.UARTstring(ptr,0);
    2496:	40 e0       	ldi	r20, 0x00	; 0
    2498:	66 e9       	ldi	r22, 0x96	; 150
    249a:	71 e0       	ldi	r23, 0x01	; 1
    249c:	8d e4       	ldi	r24, 0x4D	; 77
    249e:	94 e0       	ldi	r25, 0x04	; 4
    24a0:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		if (massage2 != NULL)
    24a4:	61 14       	cp	r6, r1
    24a6:	71 04       	cpc	r7, r1
    24a8:	59 f0       	breq	.+22     	; 0x24c0 <main+0x374>
		{
			gsmSMS.UARTsend(13);
    24aa:	6d e0       	ldi	r22, 0x0D	; 13
    24ac:	8d e4       	ldi	r24, 0x4D	; 77
    24ae:	94 e0       	ldi	r25, 0x04	; 4
    24b0:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
			gsmSMS.UARTstring(massage2,0);
    24b4:	40 e0       	ldi	r20, 0x00	; 0
    24b6:	b3 01       	movw	r22, r6
    24b8:	8d e4       	ldi	r24, 0x4D	; 77
    24ba:	94 e0       	ldi	r25, 0x04	; 4
    24bc:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		if (massage5 != NULL)
		{
			gsmSMS.UARTsend(13);
			gsmSMS.UARTstring(massage5,0);
		}
		gsmSMS.UARTsend(26);
    24c0:	6a e1       	ldi	r22, 0x1A	; 26
    24c2:	8d e4       	ldi	r24, 0x4D	; 77
    24c4:	94 e0       	ldi	r25, 0x04	; 4
    24c6:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		gsmSMS.UARTsend(13);
    24ca:	6d e0       	ldi	r22, 0x0D	; 13
    24cc:	8d e4       	ldi	r24, 0x4D	; 77
    24ce:	94 e0       	ldi	r25, 0x04	; 4
    24d0:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		_startTimeCounterSMSreceived = true;
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <top+0x107>
			}
			else if (_emergencyCarLocationTimerOverFlow)
			{
				char *ptr = getGoogleMapsLink();
				sendSMS("The car might be stolen",1,ptr);
				_emergencyCarLocationTimerOverFlow = false;
    24da:	10 92 ea 06 	sts	0x06EA, r1	; 0x8006ea <top+0x29d>
    {
		
		RXinterruptEnable();
		top.carAlarmed();	//check if timer is up and lock the car
		top.alarmProtocol(); //check if alarm is activated and start sending a massages
		if(top.PayloadAvailable())
    24de:	8c ec       	ldi	r24, 0xCC	; 204
    24e0:	96 e0       	ldi	r25, 0x06	; 6
    24e2:	0e 94 04 2c 	call	0x5808	; 0x5808 <_ZN8Nrf24l0116PayloadAvailableEv>
    24e6:	88 23       	and	r24, r24
    24e8:	d9 f0       	breq	.+54     	; 0x2520 <main+0x3d4>
		{
			if (*(top.packet()+2) > 0)
    24ea:	80 91 de 06 	lds	r24, 0x06DE	; 0x8006de <top+0x291>
    24ee:	88 23       	and	r24, r24
    24f0:	51 f0       	breq	.+20     	; 0x2506 <main+0x3ba>
			{
				static char count = 0;
				if (count >= 2)
    24f2:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <_ZZ4mainE5count>
    24f6:	82 30       	cpi	r24, 0x02	; 2
    24f8:	18 f0       	brcs	.+6      	; 0x2500 <main+0x3b4>
				{
					count = 0;
    24fa:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <_ZZ4mainE5count>
    24fe:	03 c0       	rjmp	.+6      	; 0x2506 <main+0x3ba>
				} 
				else
				{
					count++;
    2500:	8f 5f       	subi	r24, 0xFF	; 255
    2502:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <_ZZ4mainE5count>
				}
			}
			unsigned char *Payload = top.Receive_Payload(top.packet());
    2506:	6c ed       	ldi	r22, 0xDC	; 220
    2508:	76 e0       	ldi	r23, 0x06	; 6
    250a:	8c ec       	ldi	r24, 0xCC	; 204
    250c:	96 e0       	ldi	r25, 0x06	; 6
    250e:	0e 94 7b 2c 	call	0x58f6	; 0x58f6 <_ZN18Nrf24l01_HandShake15Receive_PayloadEPh>
			if (Payload[5] == 0x10)
    2512:	dc 01       	movw	r26, r24
    2514:	15 96       	adiw	r26, 0x05	; 5
    2516:	8c 91       	ld	r24, X
    2518:	80 31       	cpi	r24, 0x10	; 16
    251a:	11 f4       	brne	.+4      	; 0x2520 <main+0x3d4>
				_30secCounterEmergencyCarLocation++;
			}
		}
	}
	void openTheCar(){
		_alarmOnOff = false;
    251c:	10 92 e3 06 	sts	0x06E3, r1	; 0x8006e3 <top+0x296>
			return _phoneNumber;
		}
		return 0;
	}
	int getRXackID(){
		return _newDataIndex;
    2520:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <top+0x109>
    2524:	90 91 57 05 	lds	r25, 0x0557	; 0x800557 <top+0x10a>
			if (Payload[5] == 0x10)
			{
				top.openTheCar();
			}
		}
		if (top.getRXackID() == 4)
    2528:	84 30       	cpi	r24, 0x04	; 4
    252a:	91 05       	cpc	r25, r1
    252c:	11 f0       	breq	.+4      	; 0x2532 <main+0x3e6>
    252e:	0c 94 4d 21 	jmp	0x429a	; 0x429a <main+0x214e>
	}
	int getRXackID(){
		return _newDataIndex;
	}
	void clearRXackID(){
		_newDataIndex = 0;
    2532:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <top+0x10a>
    2536:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <top+0x109>
	}
	bool readSMS(char arr[], int arrSize, bool deleteSms = false, char phoneNumber[] = NULL){
		int indexNum = 10, indexData = 0, indexOk = 0;
		int size = 0;
		char arrData[20];
		RXinterruptDisable();
    253a:	e1 ec       	ldi	r30, 0xC1	; 193
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	80 81       	ld	r24, Z
    2540:	8f 77       	andi	r24, 0x7F	; 127
    2542:	80 83       	st	Z, r24
		if (_SMSindex < 10)
    2544:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <top+0x101>
    2548:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <top+0x102>
    254c:	8a 30       	cpi	r24, 0x0A	; 10
    254e:	91 05       	cpc	r25, r1
    2550:	64 f4       	brge	.+24     	; 0x256a <main+0x41e>
		{
			strcpy(arrData,"AT+CMGR= ");
    2552:	9a e0       	ldi	r25, 0x0A	; 10
    2554:	ee ea       	ldi	r30, 0xAE	; 174
    2556:	f1 e0       	ldi	r31, 0x01	; 1
    2558:	d5 01       	movw	r26, r10
    255a:	01 90       	ld	r0, Z+
    255c:	0d 92       	st	X+, r0
    255e:	9a 95       	dec	r25
    2560:	e1 f7       	brne	.-8      	; 0x255a <main+0x40e>
			arrData[8] = _SMSindex+'0';
    2562:	80 5d       	subi	r24, 0xD0	; 208
    2564:	f5 01       	movw	r30, r10
    2566:	80 87       	std	Z+8, r24	; 0x08
    2568:	14 c0       	rjmp	.+40     	; 0x2592 <main+0x446>
		}
		else
		{
			strcpy(arrData,"AT+CMGR=  ");
    256a:	2b e0       	ldi	r18, 0x0B	; 11
    256c:	e8 eb       	ldi	r30, 0xB8	; 184
    256e:	f1 e0       	ldi	r31, 0x01	; 1
    2570:	d5 01       	movw	r26, r10
    2572:	01 90       	ld	r0, Z+
    2574:	0d 92       	st	X+, r0
    2576:	2a 95       	dec	r18
    2578:	e1 f7       	brne	.-8      	; 0x2572 <main+0x426>
			arrData[8] = _SMSindex/10+'0';
    257a:	6a e0       	ldi	r22, 0x0A	; 10
    257c:	70 e0       	ldi	r23, 0x00	; 0
    257e:	0e 94 18 31 	call	0x6230	; 0x6230 <__divmodhi4>
    2582:	60 5d       	subi	r22, 0xD0	; 208
    2584:	d5 01       	movw	r26, r10
    2586:	18 96       	adiw	r26, 0x08	; 8
    2588:	6c 93       	st	X, r22
    258a:	18 97       	sbiw	r26, 0x08	; 8
			arrData[9] = _SMSindex%10+'0';
    258c:	80 5d       	subi	r24, 0xD0	; 208
    258e:	19 96       	adiw	r26, 0x09	; 9
    2590:	8c 93       	st	X, r24
	char _1minConterSMSreceived, _10secRestetGSMdelay , _GSMerrorCounter;
	bool _newData, _startTimeCounterSMSreceived, _startTimeCounterGSMreset;
	int _newDataIndex;
	bool sendCommand(const char ptr[], bool checkAck = false){
		int condition;
		gsmSMS.UARTstring(ptr,0);
    2592:	40 e0       	ldi	r20, 0x00	; 0
    2594:	b5 01       	movw	r22, r10
    2596:	8d e4       	ldi	r24, 0x4D	; 77
    2598:	94 e0       	ldi	r25, 0x04	; 4
    259a:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		gsmSMS.UARTsend(13);
    259e:	6d e0       	ldi	r22, 0x0D	; 13
    25a0:	8d e4       	ldi	r24, 0x4D	; 77
    25a2:	94 e0       	ldi	r25, 0x04	; 4
    25a4:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
    25a8:	fe 01       	movw	r30, r28
    25aa:	31 96       	adiw	r30, 0x01	; 1
    25ac:	ce 51       	subi	r28, 0x1E	; 30
    25ae:	df 4f       	sbci	r29, 0xFF	; 255
    25b0:	f9 83       	std	Y+1, r31	; 0x01
    25b2:	e8 83       	st	Y, r30
    25b4:	c2 5e       	subi	r28, 0xE2	; 226
    25b6:	d0 40       	sbci	r29, 0x00	; 0
    25b8:	6f 01       	movw	r12, r30
			return false;
		}
		return 0;
	}
	int checkForACkPacket(char getData[], int arrSize){
		int i = 0;
    25ba:	00 e0       	ldi	r16, 0x00	; 0
    25bc:	10 e0       	ldi	r17, 0x00	; 0
		char data = 0;
		
		do 
		{
			data = gsmSMS.UARTreceive();
    25be:	8d e4       	ldi	r24, 0x4D	; 77
    25c0:	94 e0       	ldi	r25, 0x04	; 4
    25c2:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <_ZN4Uart11UARTreceiveEv>
			getData[i++] = data;
    25c6:	0f 5f       	subi	r16, 0xFF	; 255
    25c8:	1f 4f       	sbci	r17, 0xFF	; 255
    25ca:	d6 01       	movw	r26, r12
    25cc:	8d 93       	st	X+, r24
    25ce:	6d 01       	movw	r12, r26
		}while(gsmSMS.checkForData() && i < arrSize);
    25d0:	8d e4       	ldi	r24, 0x4D	; 77
    25d2:	94 e0       	ldi	r25, 0x04	; 4
    25d4:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <_ZN4Uart12checkForDataEv>
    25d8:	88 23       	and	r24, r24
    25da:	11 f4       	brne	.+4      	; 0x25e0 <main+0x494>
    25dc:	0c 94 55 22 	jmp	0x44aa	; 0x44aa <main+0x235e>
    25e0:	04 36       	cpi	r16, 0x64	; 100
    25e2:	11 05       	cpc	r17, r1
    25e4:	61 f7       	brne	.-40     	; 0x25be <main+0x472>
    25e6:	0c 94 1b 26 	jmp	0x4c36	; 0x4c36 <main+0x2aea>
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    25ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    25ec:	92 32       	cpi	r25, 0x22	; 34
    25ee:	79 f0       	breq	.+30     	; 0x260e <main+0x4c2>
    25f0:	fe 01       	movw	r30, r28
    25f2:	3c 96       	adiw	r30, 0x0c	; 12
    25f4:	9e 01       	movw	r18, r28
    25f6:	20 0f       	add	r18, r16
    25f8:	31 1f       	adc	r19, r17
    25fa:	25 5f       	subi	r18, 0xF5	; 245
    25fc:	3f 4f       	sbci	r19, 0xFF	; 255
    25fe:	03 c0       	rjmp	.+6      	; 0x2606 <main+0x4ba>
    2600:	81 91       	ld	r24, Z+
    2602:	82 32       	cpi	r24, 0x22	; 34
    2604:	21 f0       	breq	.+8      	; 0x260e <main+0x4c2>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    2606:	e2 17       	cp	r30, r18
    2608:	f3 07       	cpc	r31, r19
    260a:	d1 f7       	brne	.-12     	; 0x2600 <main+0x4b4>
    260c:	52 c0       	rjmp	.+164    	; 0x26b2 <main+0x566>
		{
			if (arr[i] == word)
    260e:	9b 32       	cpi	r25, 0x2B	; 43
    2610:	79 f0       	breq	.+30     	; 0x2630 <main+0x4e4>
    2612:	fe 01       	movw	r30, r28
    2614:	3c 96       	adiw	r30, 0x0c	; 12
    2616:	9e 01       	movw	r18, r28
    2618:	20 0f       	add	r18, r16
    261a:	31 1f       	adc	r19, r17
    261c:	25 5f       	subi	r18, 0xF5	; 245
    261e:	3f 4f       	sbci	r19, 0xFF	; 255
    2620:	03 c0       	rjmp	.+6      	; 0x2628 <main+0x4dc>
    2622:	81 91       	ld	r24, Z+
    2624:	8b 32       	cpi	r24, 0x2B	; 43
    2626:	51 f0       	breq	.+20     	; 0x263c <main+0x4f0>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    2628:	2e 17       	cp	r18, r30
    262a:	3f 07       	cpc	r19, r31
    262c:	d1 f7       	brne	.-12     	; 0x2622 <main+0x4d6>
    262e:	41 c0       	rjmp	.+130    	; 0x26b2 <main+0x566>
		{
			if (arr[i] == word)
    2630:	0f 2e       	mov	r0, r31
    2632:	fa e0       	ldi	r31, 0x0A	; 10
    2634:	cf 2e       	mov	r12, r31
    2636:	d1 2c       	mov	r13, r1
    2638:	f0 2d       	mov	r31, r0
    263a:	05 c0       	rjmp	.+10     	; 0x2646 <main+0x4fa>
    263c:	0f 2e       	mov	r0, r31
    263e:	fa e0       	ldi	r31, 0x0A	; 10
    2640:	cf 2e       	mov	r12, r31
    2642:	d1 2c       	mov	r13, r1
    2644:	f0 2d       	mov	r31, r0
			
		//check if the data exist before getting into the While LOOP
		if (compWordInArr(arr+indexNum,'"',1,size) && compWordInArr(arr+indexNum,'+',1,size))
		{
			//get phone index number
			while(!(arr[++indexNum] == '"' && arr[++indexNum] == '+') && indexNum < arrSize);
    2646:	c6 01       	movw	r24, r12
    2648:	01 96       	adiw	r24, 0x01	; 1
    264a:	e1 e0       	ldi	r30, 0x01	; 1
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	ec 0f       	add	r30, r28
    2650:	fd 1f       	adc	r31, r29
    2652:	e8 0f       	add	r30, r24
    2654:	f9 1f       	adc	r31, r25
    2656:	20 81       	ld	r18, Z
    2658:	22 32       	cpi	r18, 0x22	; 34
    265a:	71 f4       	brne	.+28     	; 0x2678 <main+0x52c>
    265c:	b2 e0       	ldi	r27, 0x02	; 2
    265e:	cb 0e       	add	r12, r27
    2660:	d1 1c       	adc	r13, r1
    2662:	e1 e0       	ldi	r30, 0x01	; 1
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	ec 0f       	add	r30, r28
    2668:	fd 1f       	adc	r31, r29
    266a:	ec 0d       	add	r30, r12
    266c:	fd 1d       	adc	r31, r13
    266e:	80 81       	ld	r24, Z
    2670:	8b 32       	cpi	r24, 0x2B	; 43
    2672:	19 f4       	brne	.+6      	; 0x267a <main+0x52e>
    2674:	0c 94 17 25 	jmp	0x4a2e	; 0x4a2e <main+0x28e2>
    2678:	6c 01       	movw	r12, r24
    267a:	e4 e6       	ldi	r30, 0x64	; 100
    267c:	ce 16       	cp	r12, r30
    267e:	d1 04       	cpc	r13, r1
    2680:	14 f3       	brlt	.-60     	; 0x2646 <main+0x4fa>
    2682:	0c 94 17 25 	jmp	0x4a2e	; 0x4a2e <main+0x28e2>
    2686:	f6 01       	movw	r30, r12
    2688:	31 96       	adiw	r30, 0x01	; 1
    268a:	21 e0       	ldi	r18, 0x01	; 1
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	2c 0f       	add	r18, r28
    2690:	3d 1f       	adc	r19, r29
    2692:	e2 0f       	add	r30, r18
    2694:	f3 1f       	adc	r31, r19
    2696:	c8 01       	movw	r24, r16
    2698:	8c 0d       	add	r24, r12
    269a:	9d 1d       	adc	r25, r13
    269c:	82 0f       	add	r24, r18
    269e:	93 1f       	adc	r25, r19
    26a0:	03 c0       	rjmp	.+6      	; 0x26a8 <main+0x55c>
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    26a2:	21 91       	ld	r18, Z+
    26a4:	2a 30       	cpi	r18, 0x0A	; 10
    26a6:	59 f0       	breq	.+22     	; 0x26be <main+0x572>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    26a8:	e8 17       	cp	r30, r24
    26aa:	f9 07       	cpc	r31, r25
    26ac:	d1 f7       	brne	.-12     	; 0x26a2 <main+0x556>
    26ae:	0c 94 65 22 	jmp	0x44ca	; 0x44ca <main+0x237e>
			while(!(arr[++indexNum] == '"' && arr[++indexNum] == '+') && indexNum < arrSize);
			indexData = indexNum;	//data mast be after number
		}
		else
		{
			RXinterruptEnable();
    26b2:	e1 ec       	ldi	r30, 0xC1	; 193
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	80 68       	ori	r24, 0x80	; 128
    26ba:	80 83       	st	Z, r24
    26bc:	e1 c0       	rjmp	.+450    	; 0x2880 <main+0x734>
			
		//check if the data exist before getting into the While LOOP
		if (compWordInArr(arr+indexData,'\n',1,size))
		{
			//get data, index number.
			while(arr[indexData++] != '\n' && indexData < arrSize);
    26be:	3f ef       	ldi	r19, 0xFF	; 255
    26c0:	c3 1a       	sub	r12, r19
    26c2:	d3 0a       	sbc	r13, r19
    26c4:	8d 91       	ld	r24, X+
    26c6:	8a 30       	cpi	r24, 0x0A	; 10
    26c8:	11 f4       	brne	.+4      	; 0x26ce <main+0x582>
    26ca:	0c 94 22 26 	jmp	0x4c44	; 0x4c44 <main+0x2af8>
    26ce:	84 e6       	ldi	r24, 0x64	; 100
    26d0:	c8 16       	cp	r12, r24
    26d2:	d1 04       	cpc	r13, r1
    26d4:	a4 f3       	brlt	.-24     	; 0x26be <main+0x572>
    26d6:	0c 94 22 26 	jmp	0x4c44	; 0x4c44 <main+0x2af8>
    26da:	f6 01       	movw	r30, r12
    26dc:	31 96       	adiw	r30, 0x01	; 1
    26de:	a1 e0       	ldi	r26, 0x01	; 1
    26e0:	b0 e0       	ldi	r27, 0x00	; 0
    26e2:	ac 0f       	add	r26, r28
    26e4:	bd 1f       	adc	r27, r29
    26e6:	ea 0f       	add	r30, r26
    26e8:	fb 1f       	adc	r31, r27
    26ea:	0c 0d       	add	r16, r12
    26ec:	1d 1d       	adc	r17, r13
    26ee:	0a 0f       	add	r16, r26
    26f0:	1b 1f       	adc	r17, r27
    26f2:	03 c0       	rjmp	.+6      	; 0x26fa <main+0x5ae>
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    26f4:	81 91       	ld	r24, Z+
    26f6:	8a 30       	cpi	r24, 0x0A	; 10
    26f8:	29 f0       	breq	.+10     	; 0x2704 <main+0x5b8>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    26fa:	e0 17       	cp	r30, r16
    26fc:	f1 07       	cpc	r31, r17
    26fe:	d1 f7       	brne	.-12     	; 0x26f4 <main+0x5a8>
    2700:	0c 94 6c 22 	jmp	0x44d8	; 0x44d8 <main+0x238c>
    2704:	f3 01       	movw	r30, r6
			
		//check if the data exist before getting into the While LOOP
		if (compWordInArr(arr+indexOk,'\n',1,size))
		{
			//get end of data index number (it will get down a line and send OK)
			while(arr[indexOk++] != '\n' && indexOk < arrSize);
    2706:	bf ef       	ldi	r27, 0xFF	; 255
    2708:	cb 1a       	sub	r12, r27
    270a:	db 0a       	sbc	r13, r27
    270c:	81 91       	ld	r24, Z+
    270e:	8a 30       	cpi	r24, 0x0A	; 10
    2710:	11 f4       	brne	.+4      	; 0x2716 <main+0x5ca>
    2712:	0c 94 73 22 	jmp	0x44e6	; 0x44e6 <main+0x239a>
    2716:	24 e6       	ldi	r18, 0x64	; 100
    2718:	c2 16       	cp	r12, r18
    271a:	d1 04       	cpc	r13, r1
    271c:	a4 f3       	brlt	.-24     	; 0x2706 <main+0x5ba>
    271e:	0c 94 73 22 	jmp	0x44e6	; 0x44e6 <main+0x239a>
	}
	bool deleteSMS(char SMSindex = 1){
		char arr[13];
		if (SMSindex < 10)
		{
			strcpy(arr,"AT+CMGD= ");
    2722:	9a e0       	ldi	r25, 0x0A	; 10
    2724:	e7 e4       	ldi	r30, 0x47	; 71
    2726:	f1 e0       	ldi	r31, 0x01	; 1
    2728:	d4 01       	movw	r26, r8
    272a:	01 90       	ld	r0, Z+
    272c:	0d 92       	st	X+, r0
    272e:	9a 95       	dec	r25
    2730:	e1 f7       	brne	.-8      	; 0x272a <main+0x5de>
			arr[8] = SMSindex+'0';
    2732:	80 5d       	subi	r24, 0xD0	; 208
    2734:	d4 01       	movw	r26, r8
    2736:	18 96       	adiw	r26, 0x08	; 8
    2738:	8c 93       	st	X, r24
    273a:	1b c0       	rjmp	.+54     	; 0x2772 <main+0x626>
		}
		else
		{
			strcpy(arr,"AT+CMGD=  ");
    273c:	9b e0       	ldi	r25, 0x0B	; 11
    273e:	e1 e5       	ldi	r30, 0x51	; 81
    2740:	f1 e0       	ldi	r31, 0x01	; 1
    2742:	d4 01       	movw	r26, r8
    2744:	01 90       	ld	r0, Z+
    2746:	0d 92       	st	X+, r0
    2748:	9a 95       	dec	r25
    274a:	e1 f7       	brne	.-8      	; 0x2744 <main+0x5f8>
			arr[8] = SMSindex/10+'0';
    274c:	9d ec       	ldi	r25, 0xCD	; 205
    274e:	89 9f       	mul	r24, r25
    2750:	91 2d       	mov	r25, r1
    2752:	11 24       	eor	r1, r1
    2754:	96 95       	lsr	r25
    2756:	96 95       	lsr	r25
    2758:	96 95       	lsr	r25
    275a:	20 e3       	ldi	r18, 0x30	; 48
    275c:	29 0f       	add	r18, r25
    275e:	f4 01       	movw	r30, r8
    2760:	20 87       	std	Z+8, r18	; 0x08
			arr[9] = SMSindex%10+'0';
    2762:	99 0f       	add	r25, r25
    2764:	29 2f       	mov	r18, r25
    2766:	22 0f       	add	r18, r18
    2768:	22 0f       	add	r18, r18
    276a:	92 0f       	add	r25, r18
    276c:	89 1b       	sub	r24, r25
    276e:	80 5d       	subi	r24, 0xD0	; 208
    2770:	81 87       	std	Z+9, r24	; 0x09
	char _1minConterSMSreceived, _10secRestetGSMdelay , _GSMerrorCounter;
	bool _newData, _startTimeCounterSMSreceived, _startTimeCounterGSMreset;
	int _newDataIndex;
	bool sendCommand(const char ptr[], bool checkAck = false){
		int condition;
		gsmSMS.UARTstring(ptr,0);
    2772:	40 e0       	ldi	r20, 0x00	; 0
    2774:	b4 01       	movw	r22, r8
    2776:	8d e4       	ldi	r24, 0x4D	; 77
    2778:	94 e0       	ldi	r25, 0x04	; 4
    277a:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		gsmSMS.UARTsend(13);
    277e:	6d e0       	ldi	r22, 0x0D	; 13
    2780:	8d e4       	ldi	r24, 0x4D	; 77
    2782:	94 e0       	ldi	r25, 0x04	; 4
    2784:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		if (checkAck)
		{
			char arr[15] = {0};
    2788:	8f e0       	ldi	r24, 0x0F	; 15
    278a:	d7 01       	movw	r26, r14
    278c:	1d 92       	st	X+, r1
    278e:	8a 95       	dec	r24
    2790:	e9 f7       	brne	.-6      	; 0x278c <main+0x640>
			RXinterruptDisable();
    2792:	e1 ec       	ldi	r30, 0xC1	; 193
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	80 81       	ld	r24, Z
    2798:	8f 77       	andi	r24, 0x7F	; 127
    279a:	80 83       	st	Z, r24
    279c:	67 01       	movw	r12, r14
			return false;
		}
		return 0;
	}
	int checkForACkPacket(char getData[], int arrSize){
		int i = 0;
    279e:	00 e0       	ldi	r16, 0x00	; 0
    27a0:	10 e0       	ldi	r17, 0x00	; 0
		char data = 0;
		
		do 
		{
			data = gsmSMS.UARTreceive();
    27a2:	8d e4       	ldi	r24, 0x4D	; 77
    27a4:	94 e0       	ldi	r25, 0x04	; 4
    27a6:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <_ZN4Uart11UARTreceiveEv>
			getData[i++] = data;
    27aa:	0f 5f       	subi	r16, 0xFF	; 255
    27ac:	1f 4f       	sbci	r17, 0xFF	; 255
    27ae:	f6 01       	movw	r30, r12
    27b0:	81 93       	st	Z+, r24
    27b2:	6f 01       	movw	r12, r30
		}while(gsmSMS.checkForData() && i < arrSize);
    27b4:	8d e4       	ldi	r24, 0x4D	; 77
    27b6:	94 e0       	ldi	r25, 0x04	; 4
    27b8:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <_ZN4Uart12checkForDataEv>
    27bc:	88 23       	and	r24, r24
    27be:	11 f4       	brne	.+4      	; 0x27c4 <main+0x678>
    27c0:	0c 94 9f 22 	jmp	0x453e	; 0x453e <main+0x23f2>
    27c4:	0e 30       	cpi	r16, 0x0E	; 14
    27c6:	11 05       	cpc	r17, r1
    27c8:	61 f7       	brne	.-40     	; 0x27a2 <main+0x656>
    27ca:	0c 94 31 26 	jmp	0x4c62	; 0x4c62 <main+0x2b16>
    27ce:	98 01       	movw	r18, r16
    27d0:	11 23       	and	r17, r17
    27d2:	14 f4       	brge	.+4      	; 0x27d8 <main+0x68c>
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	33 27       	eor	r19, r19
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    27da:	12 16       	cp	r1, r18
    27dc:	13 06       	cpc	r1, r19
    27de:	0c f0       	brlt	.+2      	; 0x27e2 <main+0x696>
    27e0:	4a c0       	rjmp	.+148    	; 0x2876 <main+0x72a>
    27e2:	02 c0       	rjmp	.+4      	; 0x27e8 <main+0x69c>
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
			if (*arr != 0)
    27e4:	2e e0       	ldi	r18, 0x0E	; 14
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	61 e0       	ldi	r22, 0x01	; 1
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	47 e3       	ldi	r20, 0x37	; 55
    27f0:	51 e0       	ldi	r21, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    27f2:	70 e0       	ldi	r23, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    27f4:	f7 01       	movw	r30, r14
    27f6:	e8 0f       	add	r30, r24
    27f8:	f9 1f       	adc	r31, r25
    27fa:	a0 81       	ld	r26, Z
    27fc:	a5 34       	cpi	r26, 0x45	; 69
    27fe:	61 f4       	brne	.+24     	; 0x2818 <main+0x6cc>
    2800:	a2 e3       	ldi	r26, 0x32	; 50
    2802:	b1 e0       	ldi	r27, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    2804:	01 91       	ld	r16, Z+
    2806:	1d 91       	ld	r17, X+
    2808:	01 13       	cpse	r16, r17
					{
						status = false;
    280a:	67 2f       	mov	r22, r23
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    280c:	4a 17       	cp	r20, r26
    280e:	5b 07       	cpc	r21, r27
    2810:	c9 f7       	brne	.-14     	; 0x2804 <main+0x6b8>
    2812:	05 96       	adiw	r24, 0x05	; 5
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    2814:	61 11       	cpse	r22, r1
    2816:	2f c0       	rjmp	.+94     	; 0x2876 <main+0x72a>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    2818:	01 96       	adiw	r24, 0x01	; 1
    281a:	82 17       	cp	r24, r18
    281c:	93 07       	cpc	r25, r19
    281e:	54 f3       	brlt	.-44     	; 0x27f4 <main+0x6a8>
    2820:	51 e0       	ldi	r21, 0x01	; 1
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	90 e0       	ldi	r25, 0x00	; 0
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    2826:	60 e0       	ldi	r22, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    2828:	f7 01       	movw	r30, r14
    282a:	e8 0f       	add	r30, r24
    282c:	f9 1f       	adc	r31, r25
    282e:	40 81       	ld	r20, Z
    2830:	4f 34       	cpi	r20, 0x4F	; 79
    2832:	71 f4       	brne	.+28     	; 0x2850 <main+0x704>
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    2834:	e8 ea       	ldi	r30, 0xA8	; 168
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	ec 0f       	add	r30, r28
    283a:	fd 1f       	adc	r31, r29
    283c:	e8 0f       	add	r30, r24
    283e:	f9 1f       	adc	r31, r25
    2840:	40 81       	ld	r20, Z
    2842:	4b 34       	cpi	r20, 0x4B	; 75
    2844:	11 f0       	breq	.+4      	; 0x284a <main+0x6fe>
    2846:	0c 94 25 25 	jmp	0x4a4a	; 0x4a4a <main+0x28fe>
    284a:	02 96       	adiw	r24, 0x02	; 2
					{
						status = false;
					}
				}
				if (status)
    284c:	51 11       	cpse	r21, r1
    284e:	13 c0       	rjmp	.+38     	; 0x2876 <main+0x72a>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    2850:	01 96       	adiw	r24, 0x01	; 1
    2852:	82 17       	cp	r24, r18
    2854:	93 07       	cpc	r25, r19
    2856:	44 f3       	brlt	.-48     	; 0x2828 <main+0x6dc>
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    2858:	d7 01       	movw	r26, r14
    285a:	8c 91       	ld	r24, X
    285c:	8e 33       	cpi	r24, 0x3E	; 62
    285e:	59 f0       	breq	.+22     	; 0x2876 <main+0x72a>
    2860:	f7 01       	movw	r30, r14
    2862:	31 96       	adiw	r30, 0x01	; 1
    2864:	2e 0d       	add	r18, r14
    2866:	3f 1d       	adc	r19, r15
    2868:	03 c0       	rjmp	.+6      	; 0x2870 <main+0x724>
    286a:	81 91       	ld	r24, Z+
    286c:	8e 33       	cpi	r24, 0x3E	; 62
    286e:	19 f0       	breq	.+6      	; 0x2876 <main+0x72a>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    2870:	2e 17       	cp	r18, r30
    2872:	3f 07       	cpc	r19, r31
    2874:	d1 f7       	brne	.-12     	; 0x286a <main+0x71e>
		if (deleteSms)
		{
			deleteSMS(_SMSindex);
		}
			
		RXinterruptEnable();
    2876:	e1 ec       	ldi	r30, 0xC1	; 193
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	80 81       	ld	r24, Z
    287c:	80 68       	ori	r24, 0x80	; 128
    287e:	80 83       	st	Z, r24
	bool phoneCmp(const char *str1, const char *str2){
		bool result = true;
		
		//check if *str1 OR *str2 equle to 0.
		//if we don't check it, it will fail before the for loop condition and return true.
		if(!(*str1 && *str2))
    2880:	a7 96       	adiw	r28, 0x27	; 39
    2882:	8f ad       	ldd	r24, Y+63	; 0x3f
    2884:	a7 97       	sbiw	r28, 0x27	; 39
    2886:	88 23       	and	r24, r24
    2888:	11 f4       	brne	.+4      	; 0x288e <main+0x742>
    288a:	0c 94 37 25 	jmp	0x4a6e	; 0x4a6e <main+0x2922>
    288e:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <top+0x3f>
    2892:	88 23       	and	r24, r24
    2894:	11 f4       	brne	.+4      	; 0x289a <main+0x74e>
    2896:	0c 94 af 22 	jmp	0x455e	; 0x455e <main+0x2412>
    289a:	4c e8       	ldi	r20, 0x8C	; 140
    289c:	54 e0       	ldi	r21, 0x04	; 4
    289e:	fe 01       	movw	r30, r28
    28a0:	ea 59       	subi	r30, 0x9A	; 154
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			return false;
		}
		
		for(char i = 0;((*str2 != 0 || *str1 != 0) && (result == true)) && i < 10; i++)
    28a4:	da 01       	movw	r26, r20
    28a6:	8d 91       	ld	r24, X+
    28a8:	ad 01       	movw	r20, r26
    28aa:	81 11       	cpse	r24, r1
    28ac:	05 c0       	rjmp	.+10     	; 0x28b8 <main+0x76c>
    28ae:	90 81       	ld	r25, Z
    28b0:	99 23       	and	r25, r25
    28b2:	11 f4       	brne	.+4      	; 0x28b8 <main+0x76c>
    28b4:	0c 94 29 25 	jmp	0x4a52	; 0x4a52 <main+0x2906>
    28b8:	e4 15       	cp	r30, r4
    28ba:	f5 05       	cpc	r31, r5
    28bc:	11 f4       	brne	.+4      	; 0x28c2 <main+0x776>
    28be:	0c 94 2b 25 	jmp	0x4a56	; 0x4a56 <main+0x290a>
		{
			if(*(str1++) == *(str2++))
    28c2:	31 96       	adiw	r30, 0x01	; 1
    28c4:	9f 01       	movw	r18, r30
    28c6:	21 50       	subi	r18, 0x01	; 1
    28c8:	31 09       	sbc	r19, r1
    28ca:	d9 01       	movw	r26, r18
    28cc:	9c 91       	ld	r25, X
    28ce:	89 17       	cp	r24, r25
    28d0:	49 f3       	breq	.-46     	; 0x28a4 <main+0x758>
    28d2:	0c 94 af 22 	jmp	0x455e	; 0x455e <main+0x2412>
    28d6:	47 e9       	ldi	r20, 0x97	; 151
    28d8:	54 e0       	ldi	r21, 0x04	; 4
	bool phoneCmp(const char *str1, const char *str2){
		bool result = true;
		
		//check if *str1 OR *str2 equle to 0.
		//if we don't check it, it will fail before the for loop condition and return true.
		if(!(*str1 && *str2))
    28da:	fe 01       	movw	r30, r28
    28dc:	ea 59       	subi	r30, 0x9A	; 154
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			return false;
		}
		
		for(char i = 0;((*str2 != 0 || *str1 != 0) && (result == true)) && i < 10; i++)
    28e0:	da 01       	movw	r26, r20
    28e2:	8d 91       	ld	r24, X+
    28e4:	ad 01       	movw	r20, r26
    28e6:	81 11       	cpse	r24, r1
    28e8:	05 c0       	rjmp	.+10     	; 0x28f4 <main+0x7a8>
    28ea:	90 81       	ld	r25, Z
    28ec:	99 23       	and	r25, r25
    28ee:	11 f4       	brne	.+4      	; 0x28f4 <main+0x7a8>
    28f0:	0c 94 2d 25 	jmp	0x4a5a	; 0x4a5a <main+0x290e>
    28f4:	e4 15       	cp	r30, r4
    28f6:	f5 05       	cpc	r31, r5
    28f8:	11 f4       	brne	.+4      	; 0x28fe <main+0x7b2>
    28fa:	0c 94 2f 25 	jmp	0x4a5e	; 0x4a5e <main+0x2912>
		{
			if(*(str1++) == *(str2++))
    28fe:	31 96       	adiw	r30, 0x01	; 1
    2900:	9f 01       	movw	r18, r30
    2902:	21 50       	subi	r18, 0x01	; 1
    2904:	31 09       	sbc	r19, r1
    2906:	d9 01       	movw	r26, r18
    2908:	9c 91       	ld	r25, X
    290a:	89 17       	cp	r24, r25
    290c:	49 f3       	breq	.-46     	; 0x28e0 <main+0x794>
	bool phoneCmp(const char *str1, const char *str2){
		bool result = true;
		
		//check if *str1 OR *str2 equle to 0.
		//if we don't check it, it will fail before the for loop condition and return true.
		if(!(*str1 && *str2))
    290e:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <top+0x55>
    2912:	88 23       	and	r24, r24
    2914:	11 f4       	brne	.+4      	; 0x291a <main+0x7ce>
    2916:	0c 94 37 25 	jmp	0x4a6e	; 0x4a6e <main+0x2922>
    291a:	22 ea       	ldi	r18, 0xA2	; 162
    291c:	34 e0       	ldi	r19, 0x04	; 4
    291e:	de 01       	movw	r26, r28
    2920:	aa 59       	subi	r26, 0x9A	; 154
    2922:	bf 4f       	sbci	r27, 0xFF	; 255
		{
			return false;
		}
		
		for(char i = 0;((*str2 != 0 || *str1 != 0) && (result == true)) && i < 10; i++)
    2924:	f9 01       	movw	r30, r18
    2926:	81 91       	ld	r24, Z+
    2928:	9f 01       	movw	r18, r30
    292a:	81 11       	cpse	r24, r1
    292c:	05 c0       	rjmp	.+10     	; 0x2938 <main+0x7ec>
    292e:	9c 91       	ld	r25, X
    2930:	99 23       	and	r25, r25
    2932:	11 f4       	brne	.+4      	; 0x2938 <main+0x7ec>
    2934:	0c 94 31 25 	jmp	0x4a62	; 0x4a62 <main+0x2916>
    2938:	a4 15       	cp	r26, r4
    293a:	b5 05       	cpc	r27, r5
    293c:	11 f4       	brne	.+4      	; 0x2942 <main+0x7f6>
    293e:	0c 94 33 25 	jmp	0x4a66	; 0x4a66 <main+0x291a>
		{
			if(*(str1++) == *(str2++))
    2942:	11 96       	adiw	r26, 0x01	; 1
    2944:	fd 01       	movw	r30, r26
    2946:	31 97       	sbiw	r30, 0x01	; 1
    2948:	90 81       	ld	r25, Z
    294a:	89 17       	cp	r24, r25
    294c:	59 f3       	breq	.-42     	; 0x2924 <main+0x7d8>
    294e:	0c 94 37 25 	jmp	0x4a6e	; 0x4a6e <main+0x2922>
	int inputCommandBySMS(char *ptr, int arrSize, char *phoneNumber)
	{
		_indexOfContact = cmpSMSPhoneNumberToStorage(phoneNumber);
		if (_indexOfContact == 0)
		{
			if (*getPhoneNumber(1) != 0 || *getPhoneNumber(2) != 0 || *getPhoneNumber(3) != 0)
    2952:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <top+0x4a>
    2956:	81 11       	cpse	r24, r1
    2958:	0c 94 16 22 	jmp	0x442c	; 0x442c <main+0x22e0>
    295c:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <top+0x55>
    2960:	81 11       	cpse	r24, r1
    2962:	0c 94 16 22 	jmp	0x442c	; 0x442c <main+0x22e0>
		return result;
	}
	char *getPhoneNumber(int index){
		return _phoneBook[index];}
	void copyTemperaryPhoneFromSimToRAM(char *tempPhone){
		tempPhone[11] = '\0';
    2966:	e2 96       	adiw	r28, 0x32	; 50
    2968:	1f ae       	std	Y+63, r1	; 0x3f
    296a:	e2 97       	sbiw	r28, 0x32	; 50
		strcpy(_phoneBook[4],tempPhone);
    296c:	be 01       	movw	r22, r28
    296e:	6a 59       	subi	r22, 0x9A	; 154
    2970:	7f 4f       	sbci	r23, 0xFF	; 255
    2972:	8d ea       	ldi	r24, 0xAD	; 173
    2974:	94 e0       	ldi	r25, 0x04	; 4
    2976:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
				return 100;
			}
			else
			{
				copyTemperaryPhoneFromSimToRAM(phoneNumber);
				_indexOfContact = 4;
    297a:	84 e0       	ldi	r24, 0x04	; 4
    297c:	80 93 e2 06 	sts	0x06E2, r24	; 0x8006e2 <top+0x295>
    2980:	0c 94 b7 22 	jmp	0x456e	; 0x456e <main+0x2422>
			TIMSK1 = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
	}
	void changeArrToSmallLeters(char *arr, char arrMaxSize){
		for (int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] < 'a' && arr[i] >= 'A')
    2984:	80 81       	ld	r24, Z
    2986:	9f eb       	ldi	r25, 0xBF	; 191
    2988:	98 0f       	add	r25, r24
    298a:	90 32       	cpi	r25, 0x20	; 32
    298c:	10 f4       	brcc	.+4      	; 0x2992 <main+0x846>
			{
				arr[i] = arr[i] + 32;
    298e:	80 5e       	subi	r24, 0xE0	; 224
    2990:	80 83       	st	Z, r24
    2992:	31 96       	adiw	r30, 0x01	; 1
			TCCR1A = 0x00;
			TCCR1B = (1<<CS10) | (1<<CS12);;  // Timer mode with 1024 prescler
			TIMSK1 = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
	}
	void changeArrToSmallLeters(char *arr, char arrMaxSize){
		for (int i = 0; i < arrMaxSize; i++)
    2994:	2e 17       	cp	r18, r30
    2996:	3f 07       	cpc	r19, r31
    2998:	a9 f7       	brne	.-22     	; 0x2984 <main+0x838>
    299a:	61 e0       	ldi	r22, 0x01	; 1
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	4d ec       	ldi	r20, 0xCD	; 205
    29a2:	51 e0       	ldi	r21, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    29a4:	70 e0       	ldi	r23, 0x00	; 0
	{
		changeArrToSmallLeters(arr,arrMaxSize);
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    29a6:	a1 e0       	ldi	r26, 0x01	; 1
    29a8:	b0 e0       	ldi	r27, 0x00	; 0
    29aa:	ac 0f       	add	r26, r28
    29ac:	bd 1f       	adc	r27, r29
    29ae:	a8 0f       	add	r26, r24
    29b0:	b9 1f       	adc	r27, r25
    29b2:	ec 91       	ld	r30, X
    29b4:	ee 36       	cpi	r30, 0x6E	; 110
    29b6:	69 f4       	brne	.+26     	; 0x29d2 <main+0x886>
    29b8:	e3 ec       	ldi	r30, 0xC3	; 195
    29ba:	f1 e0       	ldi	r31, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    29bc:	0d 91       	ld	r16, X+
    29be:	11 91       	ld	r17, Z+
    29c0:	01 13       	cpse	r16, r17
					{
						status = false;
    29c2:	67 2f       	mov	r22, r23
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    29c4:	e4 17       	cp	r30, r20
    29c6:	f5 07       	cpc	r31, r21
    29c8:	c9 f7       	brne	.-14     	; 0x29bc <main+0x870>
    29ca:	0a 96       	adiw	r24, 0x0a	; 10
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    29cc:	61 11       	cpse	r22, r1
    29ce:	0c 94 87 25 	jmp	0x4b0e	; 0x4b0e <main+0x29c2>
	}	
	bool compWordInArr(char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		changeArrToSmallLeters(arr,arrMaxSize);
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    29d2:	01 96       	adiw	r24, 0x01	; 1
    29d4:	84 31       	cpi	r24, 0x14	; 20
    29d6:	91 05       	cpc	r25, r1
    29d8:	34 f3       	brlt	.-52     	; 0x29a6 <main+0x85a>
    29da:	ce 51       	subi	r28, 0x1E	; 30
    29dc:	df 4f       	sbci	r29, 0xFF	; 255
    29de:	e8 81       	ld	r30, Y
    29e0:	f9 81       	ldd	r31, Y+1	; 0x01
    29e2:	c2 5e       	subi	r28, 0xE2	; 226
    29e4:	d0 40       	sbci	r29, 0x00	; 0
			TIMSK1 = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
	}
	void changeArrToSmallLeters(char *arr, char arrMaxSize){
		for (int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] < 'a' && arr[i] >= 'A')
    29e6:	80 81       	ld	r24, Z
    29e8:	9f eb       	ldi	r25, 0xBF	; 191
    29ea:	98 0f       	add	r25, r24
    29ec:	90 32       	cpi	r25, 0x20	; 32
    29ee:	10 f4       	brcc	.+4      	; 0x29f4 <main+0x8a8>
			{
				arr[i] = arr[i] + 32;
    29f0:	80 5e       	subi	r24, 0xE0	; 224
    29f2:	80 83       	st	Z, r24
    29f4:	31 96       	adiw	r30, 0x01	; 1
			TCCR1A = 0x00;
			TCCR1B = (1<<CS10) | (1<<CS12);;  // Timer mode with 1024 prescler
			TIMSK1 = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
	}
	void changeArrToSmallLeters(char *arr, char arrMaxSize){
		for (int i = 0; i < arrMaxSize; i++)
    29f6:	2e 17       	cp	r18, r30
    29f8:	3f 07       	cpc	r19, r31
    29fa:	a9 f7       	brne	.-22     	; 0x29e6 <main+0x89a>
    29fc:	61 e0       	ldi	r22, 0x01	; 1
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	4a ed       	ldi	r20, 0xDA	; 218
    2a04:	51 e0       	ldi	r21, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    2a06:	70 e0       	ldi	r23, 0x00	; 0
	{
		changeArrToSmallLeters(arr,arrMaxSize);
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    2a08:	a1 e0       	ldi	r26, 0x01	; 1
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	ac 0f       	add	r26, r28
    2a0e:	bd 1f       	adc	r27, r29
    2a10:	a8 0f       	add	r26, r24
    2a12:	b9 1f       	adc	r27, r25
    2a14:	ec 91       	ld	r30, X
    2a16:	ef 36       	cpi	r30, 0x6F	; 111
    2a18:	69 f4       	brne	.+26     	; 0x2a34 <main+0x8e8>
    2a1a:	ee ec       	ldi	r30, 0xCE	; 206
    2a1c:	f1 e0       	ldi	r31, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    2a1e:	0d 91       	ld	r16, X+
    2a20:	11 91       	ld	r17, Z+
    2a22:	01 13       	cpse	r16, r17
					{
						status = false;
    2a24:	67 2f       	mov	r22, r23
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    2a26:	e4 17       	cp	r30, r20
    2a28:	f5 07       	cpc	r31, r21
    2a2a:	c9 f7       	brne	.-14     	; 0x2a1e <main+0x8d2>
    2a2c:	0c 96       	adiw	r24, 0x0c	; 12
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    2a2e:	61 11       	cpse	r22, r1
    2a30:	0c 94 a9 25 	jmp	0x4b52	; 0x4b52 <main+0x2a06>
	}	
	bool compWordInArr(char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		changeArrToSmallLeters(arr,arrMaxSize);
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    2a34:	01 96       	adiw	r24, 0x01	; 1
    2a36:	84 31       	cpi	r24, 0x14	; 20
    2a38:	91 05       	cpc	r25, r1
    2a3a:	34 f3       	brlt	.-52     	; 0x2a08 <main+0x8bc>
    2a3c:	ce 51       	subi	r28, 0x1E	; 30
    2a3e:	df 4f       	sbci	r29, 0xFF	; 255
    2a40:	e8 81       	ld	r30, Y
    2a42:	f9 81       	ldd	r31, Y+1	; 0x01
    2a44:	c2 5e       	subi	r28, 0xE2	; 226
    2a46:	d0 40       	sbci	r29, 0x00	; 0
			TIMSK1 = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
	}
	void changeArrToSmallLeters(char *arr, char arrMaxSize){
		for (int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] < 'a' && arr[i] >= 'A')
    2a48:	80 81       	ld	r24, Z
    2a4a:	9f eb       	ldi	r25, 0xBF	; 191
    2a4c:	98 0f       	add	r25, r24
    2a4e:	90 32       	cpi	r25, 0x20	; 32
    2a50:	10 f4       	brcc	.+4      	; 0x2a56 <main+0x90a>
			{
				arr[i] = arr[i] + 32;
    2a52:	80 5e       	subi	r24, 0xE0	; 224
    2a54:	80 83       	st	Z, r24
    2a56:	31 96       	adiw	r30, 0x01	; 1
			TCCR1A = 0x00;
			TCCR1B = (1<<CS10) | (1<<CS12);;  // Timer mode with 1024 prescler
			TIMSK1 = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
	}
	void changeArrToSmallLeters(char *arr, char arrMaxSize){
		for (int i = 0; i < arrMaxSize; i++)
    2a58:	2e 17       	cp	r18, r30
    2a5a:	3f 07       	cpc	r19, r31
    2a5c:	a9 f7       	brne	.-22     	; 0x2a48 <main+0x8fc>
    2a5e:	61 e0       	ldi	r22, 0x01	; 1
    2a60:	80 e0       	ldi	r24, 0x00	; 0
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	41 ee       	ldi	r20, 0xE1	; 225
    2a66:	51 e0       	ldi	r21, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    2a68:	70 e0       	ldi	r23, 0x00	; 0
	{
		changeArrToSmallLeters(arr,arrMaxSize);
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    2a6a:	a1 e0       	ldi	r26, 0x01	; 1
    2a6c:	b0 e0       	ldi	r27, 0x00	; 0
    2a6e:	ac 0f       	add	r26, r28
    2a70:	bd 1f       	adc	r27, r29
    2a72:	a8 0f       	add	r26, r24
    2a74:	b9 1f       	adc	r27, r25
    2a76:	ec 91       	ld	r30, X
    2a78:	ee 36       	cpi	r30, 0x6E	; 110
    2a7a:	69 f4       	brne	.+26     	; 0x2a96 <main+0x94a>
    2a7c:	eb ed       	ldi	r30, 0xDB	; 219
    2a7e:	f1 e0       	ldi	r31, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    2a80:	0d 91       	ld	r16, X+
    2a82:	11 91       	ld	r17, Z+
    2a84:	01 13       	cpse	r16, r17
					{
						status = false;
    2a86:	67 2f       	mov	r22, r23
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    2a88:	e4 17       	cp	r30, r20
    2a8a:	f5 07       	cpc	r31, r21
    2a8c:	c9 f7       	brne	.-14     	; 0x2a80 <main+0x934>
    2a8e:	06 96       	adiw	r24, 0x06	; 6
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    2a90:	61 11       	cpse	r22, r1
    2a92:	0c 94 3f 25 	jmp	0x4a7e	; 0x4a7e <main+0x2932>
	}	
	bool compWordInArr(char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		changeArrToSmallLeters(arr,arrMaxSize);
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    2a96:	01 96       	adiw	r24, 0x01	; 1
    2a98:	84 31       	cpi	r24, 0x14	; 20
    2a9a:	91 05       	cpc	r25, r1
    2a9c:	34 f3       	brlt	.-52     	; 0x2a6a <main+0x91e>
			TIMSK1 = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
	}
	void changeArrToSmallLeters(char *arr, char arrMaxSize){
		for (int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] < 'a' && arr[i] >= 'A')
    2a9e:	ce 51       	subi	r28, 0x1E	; 30
    2aa0:	df 4f       	sbci	r29, 0xFF	; 255
    2aa2:	a8 81       	ld	r26, Y
    2aa4:	b9 81       	ldd	r27, Y+1	; 0x01
    2aa6:	c2 5e       	subi	r28, 0xE2	; 226
    2aa8:	d0 40       	sbci	r29, 0x00	; 0
    2aaa:	8c 91       	ld	r24, X
    2aac:	9f eb       	ldi	r25, 0xBF	; 191
    2aae:	98 0f       	add	r25, r24
    2ab0:	90 32       	cpi	r25, 0x20	; 32
    2ab2:	10 f4       	brcc	.+4      	; 0x2ab8 <main+0x96c>
			{
				arr[i] = arr[i] + 32;
    2ab4:	80 5e       	subi	r24, 0xE0	; 224
    2ab6:	8c 93       	st	X, r24
    2ab8:	ce 51       	subi	r28, 0x1E	; 30
    2aba:	df 4f       	sbci	r29, 0xFF	; 255
    2abc:	e8 81       	ld	r30, Y
    2abe:	f9 81       	ldd	r31, Y+1	; 0x01
    2ac0:	c2 5e       	subi	r28, 0xE2	; 226
    2ac2:	d0 40       	sbci	r29, 0x00	; 0
    2ac4:	31 96       	adiw	r30, 0x01	; 1
    2ac6:	ce 51       	subi	r28, 0x1E	; 30
    2ac8:	df 4f       	sbci	r29, 0xFF	; 255
    2aca:	f9 83       	std	Y+1, r31	; 0x01
    2acc:	e8 83       	st	Y, r30
    2ace:	c2 5e       	subi	r28, 0xE2	; 226
    2ad0:	d0 40       	sbci	r29, 0x00	; 0
			TCCR1A = 0x00;
			TCCR1B = (1<<CS10) | (1<<CS12);;  // Timer mode with 1024 prescler
			TIMSK1 = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
	}
	void changeArrToSmallLeters(char *arr, char arrMaxSize){
		for (int i = 0; i < arrMaxSize; i++)
    2ad2:	2e 17       	cp	r18, r30
    2ad4:	3f 07       	cpc	r19, r31
    2ad6:	19 f7       	brne	.-58     	; 0x2a9e <main+0x952>
    2ad8:	61 e0       	ldi	r22, 0x01	; 1
    2ada:	80 e0       	ldi	r24, 0x00	; 0
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	2b ee       	ldi	r18, 0xEB	; 235
    2ae0:	31 e0       	ldi	r19, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    2ae2:	70 e0       	ldi	r23, 0x00	; 0
	{
		changeArrToSmallLeters(arr,arrMaxSize);
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    2ae4:	a1 e0       	ldi	r26, 0x01	; 1
    2ae6:	b0 e0       	ldi	r27, 0x00	; 0
    2ae8:	ac 0f       	add	r26, r28
    2aea:	bd 1f       	adc	r27, r29
    2aec:	a8 0f       	add	r26, r24
    2aee:	b9 1f       	adc	r27, r25
    2af0:	4c 91       	ld	r20, X
    2af2:	44 36       	cpi	r20, 0x64	; 100
    2af4:	69 f4       	brne	.+26     	; 0x2b10 <main+0x9c4>
    2af6:	e2 ee       	ldi	r30, 0xE2	; 226
    2af8:	f1 e0       	ldi	r31, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    2afa:	5d 91       	ld	r21, X+
    2afc:	41 91       	ld	r20, Z+
    2afe:	54 13       	cpse	r21, r20
					{
						status = false;
    2b00:	67 2f       	mov	r22, r23
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    2b02:	e2 17       	cp	r30, r18
    2b04:	f3 07       	cpc	r31, r19
    2b06:	c9 f7       	brne	.-14     	; 0x2afa <main+0x9ae>
    2b08:	09 96       	adiw	r24, 0x09	; 9
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    2b0a:	61 11       	cpse	r22, r1
    2b0c:	0c 94 63 25 	jmp	0x4ac6	; 0x4ac6 <main+0x297a>
	}	
	bool compWordInArr(char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		changeArrToSmallLeters(arr,arrMaxSize);
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    2b10:	01 96       	adiw	r24, 0x01	; 1
    2b12:	84 31       	cpi	r24, 0x14	; 20
    2b14:	91 05       	cpc	r25, r1
    2b16:	34 f3       	brlt	.-52     	; 0x2ae4 <main+0x998>
    2b18:	0c 94 c2 22 	jmp	0x4584	; 0x4584 <main+0x2438>
		}
		else if (compWordInArr(ptr,"delete number",13,20))
		{
			return 5;
		}
		else if (compWordInArr(ptr,"car location",12,20))
    2b1c:	04 e1       	ldi	r16, 0x14	; 20
    2b1e:	2c e0       	ldi	r18, 0x0C	; 12
    2b20:	4c ee       	ldi	r20, 0xEC	; 236
    2b22:	51 e0       	ldi	r21, 0x01	; 1
    2b24:	be 01       	movw	r22, r28
    2b26:	6f 5f       	subi	r22, 0xFF	; 255
    2b28:	7f 4f       	sbci	r23, 0xFF	; 255
    2b2a:	8d e4       	ldi	r24, 0x4D	; 77
    2b2c:	94 e0       	ldi	r25, 0x04	; 4
    2b2e:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN11mainControl13compWordInArrEPcPKccc>
    2b32:	81 11       	cpse	r24, r1
    2b34:	0c 94 4a 23 	jmp	0x4694	; 0x4694 <main+0x2548>
		{
			return 6;
		}
		else if (compWordInArr(ptr,"default",7,20))
    2b38:	27 e0       	ldi	r18, 0x07	; 7
    2b3a:	49 ef       	ldi	r20, 0xF9	; 249
    2b3c:	51 e0       	ldi	r21, 0x01	; 1
    2b3e:	be 01       	movw	r22, r28
    2b40:	6f 5f       	subi	r22, 0xFF	; 255
    2b42:	7f 4f       	sbci	r23, 0xFF	; 255
    2b44:	8d e4       	ldi	r24, 0x4D	; 77
    2b46:	94 e0       	ldi	r25, 0x04	; 4
    2b48:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN11mainControl13compWordInArrEPcPKccc>
    2b4c:	81 11       	cpse	r24, r1
    2b4e:	0c 94 6a 23 	jmp	0x46d4	; 0x46d4 <main+0x2588>
		{
			return 7;
		}
		else if (compWordInArr(ptr,"stop",4,20))
    2b52:	24 e0       	ldi	r18, 0x04	; 4
    2b54:	41 e0       	ldi	r20, 0x01	; 1
    2b56:	52 e0       	ldi	r21, 0x02	; 2
    2b58:	be 01       	movw	r22, r28
    2b5a:	6f 5f       	subi	r22, 0xFF	; 255
    2b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b5e:	8d e4       	ldi	r24, 0x4D	; 77
    2b60:	94 e0       	ldi	r25, 0x04	; 4
    2b62:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN11mainControl13compWordInArrEPcPKccc>
    2b66:	81 11       	cpse	r24, r1
    2b68:	0c 94 96 23 	jmp	0x472c	; 0x472c <main+0x25e0>
		{
			return 8;
		}
		else if (compWordInArr(ptr,"call",4,20))
    2b6c:	24 e0       	ldi	r18, 0x04	; 4
    2b6e:	46 e0       	ldi	r20, 0x06	; 6
    2b70:	52 e0       	ldi	r21, 0x02	; 2
    2b72:	be 01       	movw	r22, r28
    2b74:	6f 5f       	subi	r22, 0xFF	; 255
    2b76:	7f 4f       	sbci	r23, 0xFF	; 255
    2b78:	8d e4       	ldi	r24, 0x4D	; 77
    2b7a:	94 e0       	ldi	r25, 0x04	; 4
    2b7c:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN11mainControl13compWordInArrEPcPKccc>
    2b80:	81 11       	cpse	r24, r1
    2b82:	0c 94 c6 23 	jmp	0x478c	; 0x478c <main+0x2640>
		{
			return 9;
		}
		else if (compWordInArr(ptr,"disable the car",15,20))
    2b86:	2f e0       	ldi	r18, 0x0F	; 15
    2b88:	4b e0       	ldi	r20, 0x0B	; 11
    2b8a:	52 e0       	ldi	r21, 0x02	; 2
    2b8c:	be 01       	movw	r22, r28
    2b8e:	6f 5f       	subi	r22, 0xFF	; 255
    2b90:	7f 4f       	sbci	r23, 0xFF	; 255
    2b92:	8d e4       	ldi	r24, 0x4D	; 77
    2b94:	94 e0       	ldi	r25, 0x04	; 4
    2b96:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN11mainControl13compWordInArrEPcPKccc>
    2b9a:	81 11       	cpse	r24, r1
    2b9c:	0c 94 10 24 	jmp	0x4820	; 0x4820 <main+0x26d4>
		{
			return 10;
		}
		else if (compWordInArr(ptr,"alarm",5,20))
    2ba0:	25 e0       	ldi	r18, 0x05	; 5
    2ba2:	4b e1       	ldi	r20, 0x1B	; 27
    2ba4:	52 e0       	ldi	r21, 0x02	; 2
    2ba6:	be 01       	movw	r22, r28
    2ba8:	6f 5f       	subi	r22, 0xFF	; 255
    2baa:	7f 4f       	sbci	r23, 0xFF	; 255
    2bac:	8d e4       	ldi	r24, 0x4D	; 77
    2bae:	94 e0       	ldi	r25, 0x04	; 4
    2bb0:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN11mainControl13compWordInArrEPcPKccc>
    2bb4:	81 11       	cpse	r24, r1
    2bb6:	0c 94 d2 22 	jmp	0x45a4	; 0x45a4 <main+0x2458>
		{
			return 11;
		}
		else if (compWordInArr(ptr,"open",12,20))
    2bba:	2c e0       	ldi	r18, 0x0C	; 12
    2bbc:	41 e2       	ldi	r20, 0x21	; 33
    2bbe:	52 e0       	ldi	r21, 0x02	; 2
    2bc0:	be 01       	movw	r22, r28
    2bc2:	6f 5f       	subi	r22, 0xFF	; 255
    2bc4:	7f 4f       	sbci	r23, 0xFF	; 255
    2bc6:	8d e4       	ldi	r24, 0x4D	; 77
    2bc8:	94 e0       	ldi	r25, 0x04	; 4
    2bca:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN11mainControl13compWordInArrEPcPKccc>
    2bce:	81 11       	cpse	r24, r1
    2bd0:	0c 94 16 22 	jmp	0x442c	; 0x442c <main+0x22e0>
    2bd4:	0c 94 20 23 	jmp	0x4640	; 0x4640 <main+0x24f4>
    2bd8:	ff ef       	ldi	r31, 0xFF	; 255
    2bda:	20 e7       	ldi	r18, 0x70	; 112
    2bdc:	32 e0       	ldi	r19, 0x02	; 2
    2bde:	f1 50       	subi	r31, 0x01	; 1
    2be0:	20 40       	sbci	r18, 0x00	; 0
    2be2:	30 40       	sbci	r19, 0x00	; 0
    2be4:	e1 f7       	brne	.-8      	; 0x2bde <main+0xa92>
    2be6:	00 c0       	rjmp	.+0      	; 0x2be8 <main+0xa9c>
    2be8:	00 00       	nop
		if (*getPhoneNumber(index) == 0)
		{
			return false;
		}
		_delay_ms(50);
		strcpy(command,"AT+CMGS=");											//copy command
    2bea:	89 e0       	ldi	r24, 0x09	; 9
    2bec:	ed e8       	ldi	r30, 0x8D	; 141
    2bee:	f1 e0       	ldi	r31, 0x01	; 1
    2bf0:	d5 01       	movw	r26, r10
    2bf2:	01 90       	ld	r0, Z+
    2bf4:	0d 92       	st	X+, r0
    2bf6:	8a 95       	dec	r24
    2bf8:	e1 f7       	brne	.-8      	; 0x2bf2 <main+0xaa6>
		strcpy(command+9,getPhoneNumber(index));							//copy phone number
    2bfa:	c5 01       	movw	r24, r10
    2bfc:	09 96       	adiw	r24, 0x09	; 9
    2bfe:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
		command[8] = command[19] = '"';										//set <"> for phone number
    2c02:	82 e2       	ldi	r24, 0x22	; 34
    2c04:	d5 01       	movw	r26, r10
    2c06:	53 96       	adiw	r26, 0x13	; 19
    2c08:	8c 93       	st	X, r24
    2c0a:	53 97       	sbiw	r26, 0x13	; 19
    2c0c:	18 96       	adiw	r26, 0x08	; 8
    2c0e:	8c 93       	st	X, r24
    2c10:	18 97       	sbiw	r26, 0x08	; 8
		command[20] = 0;													//close number with <">, run over the dummy char
    2c12:	54 96       	adiw	r26, 0x14	; 20
    2c14:	1c 92       	st	X, r1
	char _1minConterSMSreceived, _10secRestetGSMdelay , _GSMerrorCounter;
	bool _newData, _startTimeCounterSMSreceived, _startTimeCounterGSMreset;
	int _newDataIndex;
	bool sendCommand(const char ptr[], bool checkAck = false){
		int condition;
		gsmSMS.UARTstring(ptr,0);
    2c16:	40 e0       	ldi	r20, 0x00	; 0
    2c18:	b5 01       	movw	r22, r10
    2c1a:	8d e4       	ldi	r24, 0x4D	; 77
    2c1c:	94 e0       	ldi	r25, 0x04	; 4
    2c1e:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		gsmSMS.UARTsend(13);
    2c22:	6d e0       	ldi	r22, 0x0D	; 13
    2c24:	8d e4       	ldi	r24, 0x4D	; 77
    2c26:	94 e0       	ldi	r25, 0x04	; 4
    2c28:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		if (checkAck)
		{
			char arr[15] = {0};
    2c2c:	8f e0       	ldi	r24, 0x0F	; 15
    2c2e:	f4 01       	movw	r30, r8
    2c30:	11 92       	st	Z+, r1
    2c32:	8a 95       	dec	r24
    2c34:	e9 f7       	brne	.-6      	; 0x2c30 <main+0xae4>
			RXinterruptDisable();
    2c36:	e1 ec       	ldi	r30, 0xC1	; 193
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	80 81       	ld	r24, Z
    2c3c:	8f 77       	andi	r24, 0x7F	; 127
    2c3e:	80 83       	st	Z, r24
    2c40:	64 01       	movw	r12, r8
			return false;
		}
		return 0;
	}
	int checkForACkPacket(char getData[], int arrSize){
		int i = 0;
    2c42:	00 e0       	ldi	r16, 0x00	; 0
    2c44:	10 e0       	ldi	r17, 0x00	; 0
		char data = 0;
		
		do 
		{
			data = gsmSMS.UARTreceive();
    2c46:	8d e4       	ldi	r24, 0x4D	; 77
    2c48:	94 e0       	ldi	r25, 0x04	; 4
    2c4a:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <_ZN4Uart11UARTreceiveEv>
			getData[i++] = data;
    2c4e:	0f 5f       	subi	r16, 0xFF	; 255
    2c50:	1f 4f       	sbci	r17, 0xFF	; 255
    2c52:	d6 01       	movw	r26, r12
    2c54:	8d 93       	st	X+, r24
    2c56:	6d 01       	movw	r12, r26
		}while(gsmSMS.checkForData() && i < arrSize);
    2c58:	8d e4       	ldi	r24, 0x4D	; 77
    2c5a:	94 e0       	ldi	r25, 0x04	; 4
    2c5c:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <_ZN4Uart12checkForDataEv>
    2c60:	88 23       	and	r24, r24
    2c62:	11 f4       	brne	.+4      	; 0x2c68 <main+0xb1c>
    2c64:	0c 94 39 24 	jmp	0x4872	; 0x4872 <main+0x2726>
    2c68:	0e 30       	cpi	r16, 0x0E	; 14
    2c6a:	11 05       	cpc	r17, r1
    2c6c:	61 f7       	brne	.-40     	; 0x2c46 <main+0xafa>
    2c6e:	0c 94 41 26 	jmp	0x4c82	; 0x4c82 <main+0x2b36>
    2c72:	98 01       	movw	r18, r16
    2c74:	11 23       	and	r17, r17
    2c76:	14 f4       	brge	.+4      	; 0x2c7c <main+0xb30>
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	33 27       	eor	r19, r19
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    2c7e:	12 16       	cp	r1, r18
    2c80:	13 06       	cpc	r1, r19
    2c82:	0c f0       	brlt	.+2      	; 0x2c86 <main+0xb3a>
    2c84:	49 c0       	rjmp	.+146    	; 0x2d18 <main+0xbcc>
    2c86:	02 c0       	rjmp	.+4      	; 0x2c8c <main+0xb40>
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
			if (*arr != 0)
    2c88:	2e e0       	ldi	r18, 0x0E	; 14
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	61 e0       	ldi	r22, 0x01	; 1
    2c8e:	80 e0       	ldi	r24, 0x00	; 0
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	47 e3       	ldi	r20, 0x37	; 55
    2c94:	51 e0       	ldi	r21, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    2c96:	70 e0       	ldi	r23, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    2c98:	f4 01       	movw	r30, r8
    2c9a:	e8 0f       	add	r30, r24
    2c9c:	f9 1f       	adc	r31, r25
    2c9e:	a0 81       	ld	r26, Z
    2ca0:	a5 34       	cpi	r26, 0x45	; 69
    2ca2:	61 f4       	brne	.+24     	; 0x2cbc <main+0xb70>
    2ca4:	a2 e3       	ldi	r26, 0x32	; 50
    2ca6:	b1 e0       	ldi	r27, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    2ca8:	01 91       	ld	r16, Z+
    2caa:	1d 91       	ld	r17, X+
    2cac:	01 13       	cpse	r16, r17
					{
						status = false;
    2cae:	67 2f       	mov	r22, r23
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    2cb0:	4a 17       	cp	r20, r26
    2cb2:	5b 07       	cpc	r21, r27
    2cb4:	c9 f7       	brne	.-14     	; 0x2ca8 <main+0xb5c>
    2cb6:	05 96       	adiw	r24, 0x05	; 5
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    2cb8:	61 11       	cpse	r22, r1
    2cba:	2e c0       	rjmp	.+92     	; 0x2d18 <main+0xbcc>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    2cbc:	01 96       	adiw	r24, 0x01	; 1
    2cbe:	82 17       	cp	r24, r18
    2cc0:	93 07       	cpc	r25, r19
    2cc2:	54 f3       	brlt	.-44     	; 0x2c98 <main+0xb4c>
    2cc4:	51 e0       	ldi	r21, 0x01	; 1
    2cc6:	80 e0       	ldi	r24, 0x00	; 0
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    2cca:	60 e0       	ldi	r22, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    2ccc:	f4 01       	movw	r30, r8
    2cce:	e8 0f       	add	r30, r24
    2cd0:	f9 1f       	adc	r31, r25
    2cd2:	40 81       	ld	r20, Z
    2cd4:	4f 34       	cpi	r20, 0x4F	; 79
    2cd6:	71 f4       	brne	.+28     	; 0x2cf4 <main+0xba8>
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    2cd8:	e8 eb       	ldi	r30, 0xB8	; 184
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	ec 0f       	add	r30, r28
    2cde:	fd 1f       	adc	r31, r29
    2ce0:	e8 0f       	add	r30, r24
    2ce2:	f9 1f       	adc	r31, r25
    2ce4:	40 81       	ld	r20, Z
    2ce6:	4b 34       	cpi	r20, 0x4B	; 75
    2ce8:	11 f0       	breq	.+4      	; 0x2cee <main+0xba2>
    2cea:	0c 94 d7 25 	jmp	0x4bae	; 0x4bae <main+0x2a62>
    2cee:	02 96       	adiw	r24, 0x02	; 2
					{
						status = false;
					}
				}
				if (status)
    2cf0:	51 11       	cpse	r21, r1
    2cf2:	12 c0       	rjmp	.+36     	; 0x2d18 <main+0xbcc>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    2cf4:	01 96       	adiw	r24, 0x01	; 1
    2cf6:	82 17       	cp	r24, r18
    2cf8:	93 07       	cpc	r25, r19
    2cfa:	44 f3       	brlt	.-48     	; 0x2ccc <main+0xb80>
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    2cfc:	f4 01       	movw	r30, r8
    2cfe:	80 81       	ld	r24, Z
    2d00:	8e 33       	cpi	r24, 0x3E	; 62
    2d02:	51 f0       	breq	.+20     	; 0x2d18 <main+0xbcc>
    2d04:	31 96       	adiw	r30, 0x01	; 1
    2d06:	28 0d       	add	r18, r8
    2d08:	39 1d       	adc	r19, r9
    2d0a:	03 c0       	rjmp	.+6      	; 0x2d12 <main+0xbc6>
    2d0c:	81 91       	ld	r24, Z+
    2d0e:	8e 33       	cpi	r24, 0x3E	; 62
    2d10:	19 f0       	breq	.+6      	; 0x2d18 <main+0xbcc>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    2d12:	e2 17       	cp	r30, r18
    2d14:	f3 07       	cpc	r31, r19
    2d16:	d1 f7       	brne	.-12     	; 0x2d0c <main+0xbc0>
		command[8] = command[19] = '"';										//set <"> for phone number
		command[20] = 0;													//close number with <">, run over the dummy char
		
		sendCommand(command,true);
		
		gsmSMS.UARTstring(ptr,0);
    2d18:	40 e0       	ldi	r20, 0x00	; 0
    2d1a:	66 e2       	ldi	r22, 0x26	; 38
    2d1c:	72 e0       	ldi	r23, 0x02	; 2
    2d1e:	8d e4       	ldi	r24, 0x4D	; 77
    2d20:	94 e0       	ldi	r25, 0x04	; 4
    2d22:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		if (massage5 != NULL)
		{
			gsmSMS.UARTsend(13);
			gsmSMS.UARTstring(massage5,0);
		}
		gsmSMS.UARTsend(26);
    2d26:	6a e1       	ldi	r22, 0x1A	; 26
    2d28:	8d e4       	ldi	r24, 0x4D	; 77
    2d2a:	94 e0       	ldi	r25, 0x04	; 4
    2d2c:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		gsmSMS.UARTsend(13);
    2d30:	6d e0       	ldi	r22, 0x0D	; 13
    2d32:	8d e4       	ldi	r24, 0x4D	; 77
    2d34:	94 e0       	ldi	r25, 0x04	; 4
    2d36:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		_startTimeCounterSMSreceived = true;
    2d3a:	81 e0       	ldi	r24, 0x01	; 1
    2d3c:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <top+0x107>
    2d40:	0c 94 16 22 	jmp	0x442c	; 0x442c <main+0x22e0>
			}
			case  1:
			{
				if (*(ptr+21) == ' ')
				{
					if (setNewNum(ptr+11,*(ptr+22)))
    2d44:	8f 89       	ldd	r24, Y+23	; 0x17
			arr[9] = SMSindex%10+'0';
		}
		return sendCommand(arr,true);
	}
	bool setNewNum(const char *ptr,char index = 0){
		if(index >= '1' && index <= '4')
    2d46:	9f ec       	ldi	r25, 0xCF	; 207
    2d48:	98 0f       	add	r25, r24
    2d4a:	94 30       	cpi	r25, 0x04	; 4
    2d4c:	08 f0       	brcs	.+2      	; 0x2d50 <main+0xc04>
    2d4e:	27 c1       	rjmp	.+590    	; 0x2f9e <main+0xe52>
		{
			char arr[40];
			strcpy(arr,"AT+CPBW=X,");
    2d50:	9b e0       	ldi	r25, 0x0B	; 11
    2d52:	e6 e3       	ldi	r30, 0x36	; 54
    2d54:	f2 e0       	ldi	r31, 0x02	; 2
    2d56:	d5 01       	movw	r26, r10
    2d58:	01 90       	ld	r0, Z+
    2d5a:	0d 92       	st	X+, r0
    2d5c:	9a 95       	dec	r25
    2d5e:	e1 f7       	brne	.-8      	; 0x2d58 <main+0xc0c>
			arr[8] = index;
    2d60:	d5 01       	movw	r26, r10
    2d62:	18 96       	adiw	r26, 0x08	; 8
    2d64:	8c 93       	st	X, r24
			strcpy(arr+11,ptr);
    2d66:	be 01       	movw	r22, r28
    2d68:	64 5f       	subi	r22, 0xF4	; 244
    2d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d6c:	c5 01       	movw	r24, r10
    2d6e:	0b 96       	adiw	r24, 0x0b	; 11
    2d70:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
			arr[10] = arr[21] = '"';
    2d74:	82 e2       	ldi	r24, 0x22	; 34
    2d76:	f5 01       	movw	r30, r10
    2d78:	85 8b       	std	Z+21, r24	; 0x15
    2d7a:	82 87       	std	Z+10, r24	; 0x0a
			strcpy(arr+22,",129,");
    2d7c:	86 e0       	ldi	r24, 0x06	; 6
    2d7e:	e1 e4       	ldi	r30, 0x41	; 65
    2d80:	f2 e0       	ldi	r31, 0x02	; 2
    2d82:	d5 01       	movw	r26, r10
    2d84:	56 96       	adiw	r26, 0x16	; 22
    2d86:	01 90       	ld	r0, Z+
    2d88:	0d 92       	st	X+, r0
    2d8a:	8a 95       	dec	r24
    2d8c:	e1 f7       	brne	.-8      	; 0x2d86 <main+0xc3a>
			return sendCommand(arr,true);
    2d8e:	41 e0       	ldi	r20, 0x01	; 1
    2d90:	b5 01       	movw	r22, r10
    2d92:	8d e4       	ldi	r24, 0x4D	; 77
    2d94:	94 e0       	ldi	r25, 0x04	; 4
    2d96:	0e 94 d7 08 	call	0x11ae	; 0x11ae <_ZN3SMS11sendCommandEPKcb>
			}
			case  1:
			{
				if (*(ptr+21) == ' ')
				{
					if (setNewNum(ptr+11,*(ptr+22)))
    2d9a:	88 23       	and	r24, r24
    2d9c:	09 f4       	brne	.+2      	; 0x2da0 <main+0xc54>
    2d9e:	ff c0       	rjmp	.+510    	; 0x2f9e <main+0xe52>
			return sendCommand(arr,true);
		}
		return false;
	}
	void copyPhoneFromSimToRAM(){
		char phoneNum[15] = {0};
    2da0:	fe 01       	movw	r30, r28
    2da2:	ea 53       	subi	r30, 0x3A	; 58
    2da4:	ff 4f       	sbci	r31, 0xFF	; 255
    2da6:	8f e0       	ldi	r24, 0x0F	; 15
    2da8:	df 01       	movw	r26, r30
    2daa:	1d 92       	st	X+, r1
    2dac:	8a 95       	dec	r24
    2dae:	e9 f7       	brne	.-6      	; 0x2daa <main+0xc5e>
    2db0:	ec e8       	ldi	r30, 0x8C	; 140
    2db2:	f4 e0       	ldi	r31, 0x04	; 4
    2db4:	cc 51       	subi	r28, 0x1C	; 28
    2db6:	df 4f       	sbci	r29, 0xFF	; 255
    2db8:	f9 83       	std	Y+1, r31	; 0x01
    2dba:	e8 83       	st	Y, r30
    2dbc:	c4 5e       	subi	r28, 0xE4	; 228
    2dbe:	d0 40       	sbci	r29, 0x00	; 0
    2dc0:	f1 e3       	ldi	r31, 0x31	; 49
    2dc2:	ce 51       	subi	r28, 0x1E	; 30
    2dc4:	df 4f       	sbci	r29, 0xFF	; 255
    2dc6:	f8 83       	st	Y, r31
    2dc8:	c2 5e       	subi	r28, 0xE2	; 226
    2dca:	d0 40       	sbci	r29, 0x00	; 0
		return newData;
	}
	char *getPhoneBookNumber(char phoneNum[],char index){
		char arrCommand[15] ={"AT+CPBR=X\r\n"};
		char dataIn[50] = {0};
		RXinterruptDisable();
    2dcc:	0f 2e       	mov	r0, r31
    2dce:	f1 ec       	ldi	r31, 0xC1	; 193
    2dd0:	6f 2e       	mov	r6, r31
    2dd2:	71 2c       	mov	r7, r1
    2dd4:	f0 2d       	mov	r31, r0
		bool newData = _newData;
		_newData = false;
		return newData;
	}
	char *getPhoneBookNumber(char phoneNum[],char index){
		char arrCommand[15] ={"AT+CPBR=X\r\n"};
    2dd6:	8c e0       	ldi	r24, 0x0C	; 12
    2dd8:	e0 e0       	ldi	r30, 0x00	; 0
    2dda:	f1 e0       	ldi	r31, 0x01	; 1
    2ddc:	d4 01       	movw	r26, r8
    2dde:	01 90       	ld	r0, Z+
    2de0:	0d 92       	st	X+, r0
    2de2:	8a 95       	dec	r24
    2de4:	e1 f7       	brne	.-8      	; 0x2dde <main+0xc92>
    2de6:	c8 51       	subi	r28, 0x18	; 24
    2de8:	df 4f       	sbci	r29, 0xFF	; 255
    2dea:	a8 81       	ld	r26, Y
    2dec:	b9 81       	ldd	r27, Y+1	; 0x01
    2dee:	c8 5e       	subi	r28, 0xE8	; 232
    2df0:	d0 40       	sbci	r29, 0x00	; 0
    2df2:	e3 e0       	ldi	r30, 0x03	; 3
    2df4:	1d 92       	st	X+, r1
    2df6:	ea 95       	dec	r30
    2df8:	e9 f7       	brne	.-6      	; 0x2df4 <main+0xca8>
		char dataIn[50] = {0};
    2dfa:	d5 01       	movw	r26, r10
    2dfc:	e2 e3       	ldi	r30, 0x32	; 50
    2dfe:	1d 92       	st	X+, r1
    2e00:	ea 95       	dec	r30
    2e02:	e9 f7       	brne	.-6      	; 0x2dfe <main+0xcb2>
		RXinterruptDisable();
    2e04:	d3 01       	movw	r26, r6
    2e06:	8c 91       	ld	r24, X
    2e08:	8f 77       	andi	r24, 0x7F	; 127
    2e0a:	8c 93       	st	X, r24
		arrCommand[8] = index + '0';
    2e0c:	ce 51       	subi	r28, 0x1E	; 30
    2e0e:	df 4f       	sbci	r29, 0xFF	; 255
    2e10:	28 81       	ld	r18, Y
    2e12:	c2 5e       	subi	r28, 0xE2	; 226
    2e14:	d0 40       	sbci	r29, 0x00	; 0
    2e16:	f4 01       	movw	r30, r8
    2e18:	20 87       	std	Z+8, r18	; 0x08
		gsmSMS.UARTstring(arrCommand,0);	
    2e1a:	40 e0       	ldi	r20, 0x00	; 0
    2e1c:	b4 01       	movw	r22, r8
    2e1e:	8d e4       	ldi	r24, 0x4D	; 77
    2e20:	94 e0       	ldi	r25, 0x04	; 4
    2e22:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
    2e26:	65 01       	movw	r12, r10
			return false;
		}
		return 0;
	}
	int checkForACkPacket(char getData[], int arrSize){
		int i = 0;
    2e28:	00 e0       	ldi	r16, 0x00	; 0
    2e2a:	10 e0       	ldi	r17, 0x00	; 0
		char data = 0;
		
		do 
		{
			data = gsmSMS.UARTreceive();
    2e2c:	8d e4       	ldi	r24, 0x4D	; 77
    2e2e:	94 e0       	ldi	r25, 0x04	; 4
    2e30:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <_ZN4Uart11UARTreceiveEv>
			getData[i++] = data;
    2e34:	0f 5f       	subi	r16, 0xFF	; 255
    2e36:	1f 4f       	sbci	r17, 0xFF	; 255
    2e38:	d6 01       	movw	r26, r12
    2e3a:	8d 93       	st	X+, r24
    2e3c:	6d 01       	movw	r12, r26
		}while(gsmSMS.checkForData() && i < arrSize);
    2e3e:	8d e4       	ldi	r24, 0x4D	; 77
    2e40:	94 e0       	ldi	r25, 0x04	; 4
    2e42:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <_ZN4Uart12checkForDataEv>
    2e46:	88 23       	and	r24, r24
    2e48:	11 f4       	brne	.+4      	; 0x2e4e <main+0xd02>
    2e4a:	0c 94 49 24 	jmp	0x4892	; 0x4892 <main+0x2746>
    2e4e:	01 33       	cpi	r16, 0x31	; 49
    2e50:	11 05       	cpc	r17, r1
    2e52:	61 f7       	brne	.-40     	; 0x2e2c <main+0xce0>
    2e54:	0c 94 49 24 	jmp	0x4892	; 0x4892 <main+0x2746>
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    2e58:	81 91       	ld	r24, Z+
    2e5a:	82 32       	cpi	r24, 0x22	; 34
    2e5c:	11 f4       	brne	.+4      	; 0x2e62 <main+0xd16>
    2e5e:	0c 94 58 24 	jmp	0x48b0	; 0x48b0 <main+0x2764>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    2e62:	e2 15       	cp	r30, r2
    2e64:	f3 05       	cpc	r31, r3
    2e66:	c1 f7       	brne	.-16     	; 0x2e58 <main+0xd0c>
    2e68:	24 c0       	rjmp	.+72     	; 0x2eb2 <main+0xd66>
		{
			if (arr[i] == word)
    2e6a:	81 91       	ld	r24, Z+
    2e6c:	82 32       	cpi	r24, 0x22	; 34
    2e6e:	21 f0       	breq	.+8      	; 0x2e78 <main+0xd2c>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    2e70:	2e 16       	cp	r2, r30
    2e72:	3f 06       	cpc	r3, r31
    2e74:	d1 f7       	brne	.-12     	; 0x2e6a <main+0xd1e>
    2e76:	1d c0       	rjmp	.+58     	; 0x2eb2 <main+0xd66>
		checkForACkPacket(dataIn, 49);
		RXinterruptEnable();
		if (compWordInArr(dataIn,'"',1,49) && compWordInArr(dataIn+15,'"',1,34))
		{
			int counter = 0;
			while(dataIn[counter] != '0' && counter < 15)
    2e78:	f5 01       	movw	r30, r10
    2e7a:	80 81       	ld	r24, Z
    2e7c:	80 33       	cpi	r24, 0x30	; 48
    2e7e:	61 f0       	breq	.+24     	; 0x2e98 <main+0xd4c>
    2e80:	31 96       	adiw	r30, 0x01	; 1
    2e82:	80 e0       	ldi	r24, 0x00	; 0
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	03 c0       	rjmp	.+6      	; 0x2e8e <main+0xd42>
    2e88:	8f 30       	cpi	r24, 0x0F	; 15
    2e8a:	91 05       	cpc	r25, r1
    2e8c:	39 f0       	breq	.+14     	; 0x2e9c <main+0xd50>
			{
				counter++;
    2e8e:	01 96       	adiw	r24, 0x01	; 1
		checkForACkPacket(dataIn, 49);
		RXinterruptEnable();
		if (compWordInArr(dataIn,'"',1,49) && compWordInArr(dataIn+15,'"',1,34))
		{
			int counter = 0;
			while(dataIn[counter] != '0' && counter < 15)
    2e90:	21 91       	ld	r18, Z+
    2e92:	20 33       	cpi	r18, 0x30	; 48
    2e94:	c9 f7       	brne	.-14     	; 0x2e88 <main+0xd3c>
    2e96:	02 c0       	rjmp	.+4      	; 0x2e9c <main+0xd50>
    2e98:	80 e0       	ldi	r24, 0x00	; 0
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
			{
				counter++;
			}
			dataIn[counter+10] = '\0';
    2e9c:	b5 01       	movw	r22, r10
    2e9e:	68 0f       	add	r22, r24
    2ea0:	79 1f       	adc	r23, r25
    2ea2:	db 01       	movw	r26, r22
    2ea4:	1a 96       	adiw	r26, 0x0a	; 10
    2ea6:	1c 92       	st	X, r1
			strcpy(phoneNum,dataIn+counter);
    2ea8:	ce 01       	movw	r24, r28
    2eaa:	8a 53       	subi	r24, 0x3A	; 58
    2eac:	9f 4f       	sbci	r25, 0xFF	; 255
    2eae:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
	void copyPhoneFromSimToRAM(){
		char phoneNum[15] = {0};
		for(int i = 1; i < 4; i++)
		{
			getPhoneBookNumber(phoneNum,i);
			if (*phoneNum != 0)
    2eb2:	ca 53       	subi	r28, 0x3A	; 58
    2eb4:	df 4f       	sbci	r29, 0xFF	; 255
    2eb6:	88 81       	ld	r24, Y
    2eb8:	c6 5c       	subi	r28, 0xC6	; 198
    2eba:	d0 40       	sbci	r29, 0x00	; 0
    2ebc:	88 23       	and	r24, r24
    2ebe:	59 f0       	breq	.+22     	; 0x2ed6 <main+0xd8a>
			{
				strcpy(_phoneBook[i],phoneNum);
    2ec0:	be 01       	movw	r22, r28
    2ec2:	6a 53       	subi	r22, 0x3A	; 58
    2ec4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec6:	cc 51       	subi	r28, 0x1C	; 28
    2ec8:	df 4f       	sbci	r29, 0xFF	; 255
    2eca:	88 81       	ld	r24, Y
    2ecc:	99 81       	ldd	r25, Y+1	; 0x01
    2ece:	c4 5e       	subi	r28, 0xE4	; 228
    2ed0:	d0 40       	sbci	r29, 0x00	; 0
    2ed2:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
    2ed6:	ce 51       	subi	r28, 0x1E	; 30
    2ed8:	df 4f       	sbci	r29, 0xFF	; 255
    2eda:	b8 81       	ld	r27, Y
    2edc:	c2 5e       	subi	r28, 0xE2	; 226
    2ede:	d0 40       	sbci	r29, 0x00	; 0
    2ee0:	bf 5f       	subi	r27, 0xFF	; 255
    2ee2:	ce 51       	subi	r28, 0x1E	; 30
    2ee4:	df 4f       	sbci	r29, 0xFF	; 255
    2ee6:	b8 83       	st	Y, r27
    2ee8:	c2 5e       	subi	r28, 0xE2	; 226
    2eea:	d0 40       	sbci	r29, 0x00	; 0
    2eec:	cc 51       	subi	r28, 0x1C	; 28
    2eee:	df 4f       	sbci	r29, 0xFF	; 255
    2ef0:	e8 81       	ld	r30, Y
    2ef2:	f9 81       	ldd	r31, Y+1	; 0x01
    2ef4:	c4 5e       	subi	r28, 0xE4	; 228
    2ef6:	d0 40       	sbci	r29, 0x00	; 0
    2ef8:	3b 96       	adiw	r30, 0x0b	; 11
    2efa:	cc 51       	subi	r28, 0x1C	; 28
    2efc:	df 4f       	sbci	r29, 0xFF	; 255
    2efe:	f9 83       	std	Y+1, r31	; 0x01
    2f00:	e8 83       	st	Y, r30
    2f02:	c4 5e       	subi	r28, 0xE4	; 228
    2f04:	d0 40       	sbci	r29, 0x00	; 0
		}
		return false;
	}
	void copyPhoneFromSimToRAM(){
		char phoneNum[15] = {0};
		for(int i = 1; i < 4; i++)
    2f06:	b4 33       	cpi	r27, 0x34	; 52
    2f08:	09 f0       	breq	.+2      	; 0x2f0c <main+0xdc0>
    2f0a:	65 cf       	rjmp	.-310    	; 0x2dd6 <main+0xc8a>
			}
		}
		return result;
	}
	char *getPhoneNumber(int index){
		return _phoneBook[index];}
    2f0c:	60 91 e2 06 	lds	r22, 0x06E2	; 0x8006e2 <top+0x295>
    2f10:	fb e0       	ldi	r31, 0x0B	; 11
    2f12:	6f 9f       	mul	r22, r31
    2f14:	b0 01       	movw	r22, r0
    2f16:	11 24       	eor	r1, r1
    2f18:	6f 57       	subi	r22, 0x7F	; 127
    2f1a:	7b 4f       	sbci	r23, 0xFB	; 251
		sendCommand("AT+MORING=1",true);
		copyPhoneFromSimToRAM();
	}
	bool sendSMS(const char *ptr,int index, const char *massage2 = NULL, const char *massage3 = NULL, const char *massage4 = NULL, const char *massage5 = NULL){
		char command[25];
		if (*getPhoneNumber(index) == 0)
    2f1c:	db 01       	movw	r26, r22
    2f1e:	8c 91       	ld	r24, X
    2f20:	88 23       	and	r24, r24
    2f22:	11 f4       	brne	.+4      	; 0x2f28 <main+0xddc>
    2f24:	0c 94 16 22 	jmp	0x442c	; 0x442c <main+0x22e0>
    2f28:	bf ef       	ldi	r27, 0xFF	; 255
    2f2a:	e0 e7       	ldi	r30, 0x70	; 112
    2f2c:	f2 e0       	ldi	r31, 0x02	; 2
    2f2e:	b1 50       	subi	r27, 0x01	; 1
    2f30:	e0 40       	sbci	r30, 0x00	; 0
    2f32:	f0 40       	sbci	r31, 0x00	; 0
    2f34:	e1 f7       	brne	.-8      	; 0x2f2e <main+0xde2>
    2f36:	00 c0       	rjmp	.+0      	; 0x2f38 <main+0xdec>
    2f38:	00 00       	nop
		{
			return false;
		}
		_delay_ms(50);
		strcpy(command,"AT+CMGS=");											//copy command
    2f3a:	89 e0       	ldi	r24, 0x09	; 9
    2f3c:	ed e8       	ldi	r30, 0x8D	; 141
    2f3e:	f1 e0       	ldi	r31, 0x01	; 1
    2f40:	d5 01       	movw	r26, r10
    2f42:	01 90       	ld	r0, Z+
    2f44:	0d 92       	st	X+, r0
    2f46:	8a 95       	dec	r24
    2f48:	e1 f7       	brne	.-8      	; 0x2f42 <main+0xdf6>
		strcpy(command+9,getPhoneNumber(index));							//copy phone number
    2f4a:	c5 01       	movw	r24, r10
    2f4c:	09 96       	adiw	r24, 0x09	; 9
    2f4e:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
		command[8] = command[19] = '"';										//set <"> for phone number
    2f52:	82 e2       	ldi	r24, 0x22	; 34
    2f54:	d5 01       	movw	r26, r10
    2f56:	53 96       	adiw	r26, 0x13	; 19
    2f58:	8c 93       	st	X, r24
    2f5a:	53 97       	sbiw	r26, 0x13	; 19
    2f5c:	18 96       	adiw	r26, 0x08	; 8
    2f5e:	8c 93       	st	X, r24
    2f60:	18 97       	sbiw	r26, 0x08	; 8
		command[20] = 0;													//close number with <">, run over the dummy char
    2f62:	54 96       	adiw	r26, 0x14	; 20
    2f64:	1c 92       	st	X, r1
		
		sendCommand(command,true);
    2f66:	41 e0       	ldi	r20, 0x01	; 1
    2f68:	b5 01       	movw	r22, r10
    2f6a:	8d e4       	ldi	r24, 0x4D	; 77
    2f6c:	94 e0       	ldi	r25, 0x04	; 4
    2f6e:	0e 94 d7 08 	call	0x11ae	; 0x11ae <_ZN3SMS11sendCommandEPKcb>
		
		gsmSMS.UARTstring(ptr,0);
    2f72:	40 e0       	ldi	r20, 0x00	; 0
    2f74:	67 e4       	ldi	r22, 0x47	; 71
    2f76:	72 e0       	ldi	r23, 0x02	; 2
    2f78:	8d e4       	ldi	r24, 0x4D	; 77
    2f7a:	94 e0       	ldi	r25, 0x04	; 4
    2f7c:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		if (massage5 != NULL)
		{
			gsmSMS.UARTsend(13);
			gsmSMS.UARTstring(massage5,0);
		}
		gsmSMS.UARTsend(26);
    2f80:	6a e1       	ldi	r22, 0x1A	; 26
    2f82:	8d e4       	ldi	r24, 0x4D	; 77
    2f84:	94 e0       	ldi	r25, 0x04	; 4
    2f86:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		gsmSMS.UARTsend(13);
    2f8a:	6d e0       	ldi	r22, 0x0D	; 13
    2f8c:	8d e4       	ldi	r24, 0x4D	; 77
    2f8e:	94 e0       	ldi	r25, 0x04	; 4
    2f90:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		_startTimeCounterSMSreceived = true;
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <top+0x107>
    2f9a:	0c 94 16 22 	jmp	0x442c	; 0x442c <main+0x22e0>
			}
		}
		return result;
	}
	char *getPhoneNumber(int index){
		return _phoneBook[index];}
    2f9e:	60 91 e2 06 	lds	r22, 0x06E2	; 0x8006e2 <top+0x295>
    2fa2:	bb e0       	ldi	r27, 0x0B	; 11
    2fa4:	6b 9f       	mul	r22, r27
    2fa6:	b0 01       	movw	r22, r0
    2fa8:	11 24       	eor	r1, r1
    2faa:	6f 57       	subi	r22, 0x7F	; 127
    2fac:	7b 4f       	sbci	r23, 0xFB	; 251
		sendCommand("AT+MORING=1",true);
		copyPhoneFromSimToRAM();
	}
	bool sendSMS(const char *ptr,int index, const char *massage2 = NULL, const char *massage3 = NULL, const char *massage4 = NULL, const char *massage5 = NULL){
		char command[25];
		if (*getPhoneNumber(index) == 0)
    2fae:	fb 01       	movw	r30, r22
    2fb0:	80 81       	ld	r24, Z
    2fb2:	88 23       	and	r24, r24
    2fb4:	11 f4       	brne	.+4      	; 0x2fba <main+0xe6e>
    2fb6:	0c 94 16 22 	jmp	0x442c	; 0x442c <main+0x22e0>
    2fba:	ff ef       	ldi	r31, 0xFF	; 255
    2fbc:	20 e7       	ldi	r18, 0x70	; 112
    2fbe:	32 e0       	ldi	r19, 0x02	; 2
    2fc0:	f1 50       	subi	r31, 0x01	; 1
    2fc2:	20 40       	sbci	r18, 0x00	; 0
    2fc4:	30 40       	sbci	r19, 0x00	; 0
    2fc6:	e1 f7       	brne	.-8      	; 0x2fc0 <main+0xe74>
    2fc8:	00 c0       	rjmp	.+0      	; 0x2fca <main+0xe7e>
    2fca:	00 00       	nop
		{
			return false;
		}
		_delay_ms(50);
		strcpy(command,"AT+CMGS=");											//copy command
    2fcc:	89 e0       	ldi	r24, 0x09	; 9
    2fce:	ed e8       	ldi	r30, 0x8D	; 141
    2fd0:	f1 e0       	ldi	r31, 0x01	; 1
    2fd2:	d5 01       	movw	r26, r10
    2fd4:	01 90       	ld	r0, Z+
    2fd6:	0d 92       	st	X+, r0
    2fd8:	8a 95       	dec	r24
    2fda:	e1 f7       	brne	.-8      	; 0x2fd4 <main+0xe88>
		strcpy(command+9,getPhoneNumber(index));							//copy phone number
    2fdc:	c5 01       	movw	r24, r10
    2fde:	09 96       	adiw	r24, 0x09	; 9
    2fe0:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
		command[8] = command[19] = '"';										//set <"> for phone number
    2fe4:	82 e2       	ldi	r24, 0x22	; 34
    2fe6:	d5 01       	movw	r26, r10
    2fe8:	53 96       	adiw	r26, 0x13	; 19
    2fea:	8c 93       	st	X, r24
    2fec:	53 97       	sbiw	r26, 0x13	; 19
    2fee:	18 96       	adiw	r26, 0x08	; 8
    2ff0:	8c 93       	st	X, r24
    2ff2:	18 97       	sbiw	r26, 0x08	; 8
		command[20] = 0;													//close number with <">, run over the dummy char
    2ff4:	54 96       	adiw	r26, 0x14	; 20
    2ff6:	1c 92       	st	X, r1
		
		sendCommand(command,true);
    2ff8:	41 e0       	ldi	r20, 0x01	; 1
    2ffa:	b5 01       	movw	r22, r10
    2ffc:	8d e4       	ldi	r24, 0x4D	; 77
    2ffe:	94 e0       	ldi	r25, 0x04	; 4
    3000:	0e 94 d7 08 	call	0x11ae	; 0x11ae <_ZN3SMS11sendCommandEPKcb>
		
		gsmSMS.UARTstring(ptr,0);
    3004:	40 e0       	ldi	r20, 0x00	; 0
    3006:	6a e5       	ldi	r22, 0x5A	; 90
    3008:	72 e0       	ldi	r23, 0x02	; 2
    300a:	8d e4       	ldi	r24, 0x4D	; 77
    300c:	94 e0       	ldi	r25, 0x04	; 4
    300e:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		if (massage5 != NULL)
		{
			gsmSMS.UARTsend(13);
			gsmSMS.UARTstring(massage5,0);
		}
		gsmSMS.UARTsend(26);
    3012:	6a e1       	ldi	r22, 0x1A	; 26
    3014:	8d e4       	ldi	r24, 0x4D	; 77
    3016:	94 e0       	ldi	r25, 0x04	; 4
    3018:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		gsmSMS.UARTsend(13);
    301c:	6d e0       	ldi	r22, 0x0D	; 13
    301e:	8d e4       	ldi	r24, 0x4D	; 77
    3020:	94 e0       	ldi	r25, 0x04	; 4
    3022:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		_startTimeCounterSMSreceived = true;
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <top+0x107>
    302c:	0c 94 16 22 	jmp	0x442c	; 0x442c <main+0x22e0>
			}
		}
		return result;
	}
	char *getPhoneNumber(int index){
		return _phoneBook[index];}
    3030:	60 91 e2 06 	lds	r22, 0x06E2	; 0x8006e2 <top+0x295>
    3034:	bb e0       	ldi	r27, 0x0B	; 11
    3036:	6b 9f       	mul	r22, r27
    3038:	b0 01       	movw	r22, r0
    303a:	11 24       	eor	r1, r1
    303c:	6f 57       	subi	r22, 0x7F	; 127
    303e:	7b 4f       	sbci	r23, 0xFB	; 251
		sendCommand("AT+MORING=1",true);
		copyPhoneFromSimToRAM();
	}
	bool sendSMS(const char *ptr,int index, const char *massage2 = NULL, const char *massage3 = NULL, const char *massage4 = NULL, const char *massage5 = NULL){
		char command[25];
		if (*getPhoneNumber(index) == 0)
    3040:	fb 01       	movw	r30, r22
    3042:	80 81       	ld	r24, Z
    3044:	88 23       	and	r24, r24
    3046:	11 f4       	brne	.+4      	; 0x304c <main+0xf00>
    3048:	0c 94 16 22 	jmp	0x442c	; 0x442c <main+0x22e0>
    304c:	ff ef       	ldi	r31, 0xFF	; 255
    304e:	20 e7       	ldi	r18, 0x70	; 112
    3050:	32 e0       	ldi	r19, 0x02	; 2
    3052:	f1 50       	subi	r31, 0x01	; 1
    3054:	20 40       	sbci	r18, 0x00	; 0
    3056:	30 40       	sbci	r19, 0x00	; 0
    3058:	e1 f7       	brne	.-8      	; 0x3052 <main+0xf06>
    305a:	00 c0       	rjmp	.+0      	; 0x305c <main+0xf10>
    305c:	00 00       	nop
		{
			return false;
		}
		_delay_ms(50);
		strcpy(command,"AT+CMGS=");											//copy command
    305e:	89 e0       	ldi	r24, 0x09	; 9
    3060:	ed e8       	ldi	r30, 0x8D	; 141
    3062:	f1 e0       	ldi	r31, 0x01	; 1
    3064:	d5 01       	movw	r26, r10
    3066:	01 90       	ld	r0, Z+
    3068:	0d 92       	st	X+, r0
    306a:	8a 95       	dec	r24
    306c:	e1 f7       	brne	.-8      	; 0x3066 <main+0xf1a>
		strcpy(command+9,getPhoneNumber(index));							//copy phone number
    306e:	c5 01       	movw	r24, r10
    3070:	09 96       	adiw	r24, 0x09	; 9
    3072:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
		command[8] = command[19] = '"';										//set <"> for phone number
    3076:	82 e2       	ldi	r24, 0x22	; 34
    3078:	d5 01       	movw	r26, r10
    307a:	53 96       	adiw	r26, 0x13	; 19
    307c:	8c 93       	st	X, r24
    307e:	53 97       	sbiw	r26, 0x13	; 19
    3080:	18 96       	adiw	r26, 0x08	; 8
    3082:	8c 93       	st	X, r24
    3084:	18 97       	sbiw	r26, 0x08	; 8
		command[20] = 0;													//close number with <">, run over the dummy char
    3086:	54 96       	adiw	r26, 0x14	; 20
    3088:	1c 92       	st	X, r1
	char _1minConterSMSreceived, _10secRestetGSMdelay , _GSMerrorCounter;
	bool _newData, _startTimeCounterSMSreceived, _startTimeCounterGSMreset;
	int _newDataIndex;
	bool sendCommand(const char ptr[], bool checkAck = false){
		int condition;
		gsmSMS.UARTstring(ptr,0);
    308a:	40 e0       	ldi	r20, 0x00	; 0
    308c:	b5 01       	movw	r22, r10
    308e:	8d e4       	ldi	r24, 0x4D	; 77
    3090:	94 e0       	ldi	r25, 0x04	; 4
    3092:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		gsmSMS.UARTsend(13);
    3096:	6d e0       	ldi	r22, 0x0D	; 13
    3098:	8d e4       	ldi	r24, 0x4D	; 77
    309a:	94 e0       	ldi	r25, 0x04	; 4
    309c:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		if (checkAck)
		{
			char arr[15] = {0};
    30a0:	8f e0       	ldi	r24, 0x0F	; 15
    30a2:	f4 01       	movw	r30, r8
    30a4:	11 92       	st	Z+, r1
    30a6:	8a 95       	dec	r24
    30a8:	e9 f7       	brne	.-6      	; 0x30a4 <main+0xf58>
			RXinterruptDisable();
    30aa:	e1 ec       	ldi	r30, 0xC1	; 193
    30ac:	f0 e0       	ldi	r31, 0x00	; 0
    30ae:	80 81       	ld	r24, Z
    30b0:	8f 77       	andi	r24, 0x7F	; 127
    30b2:	80 83       	st	Z, r24
    30b4:	64 01       	movw	r12, r8
			return false;
		}
		return 0;
	}
	int checkForACkPacket(char getData[], int arrSize){
		int i = 0;
    30b6:	00 e0       	ldi	r16, 0x00	; 0
    30b8:	10 e0       	ldi	r17, 0x00	; 0
		char data = 0;
		
		do 
		{
			data = gsmSMS.UARTreceive();
    30ba:	8d e4       	ldi	r24, 0x4D	; 77
    30bc:	94 e0       	ldi	r25, 0x04	; 4
    30be:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <_ZN4Uart11UARTreceiveEv>
			getData[i++] = data;
    30c2:	0f 5f       	subi	r16, 0xFF	; 255
    30c4:	1f 4f       	sbci	r17, 0xFF	; 255
    30c6:	d6 01       	movw	r26, r12
    30c8:	8d 93       	st	X+, r24
    30ca:	6d 01       	movw	r12, r26
		}while(gsmSMS.checkForData() && i < arrSize);
    30cc:	8d e4       	ldi	r24, 0x4D	; 77
    30ce:	94 e0       	ldi	r25, 0x04	; 4
    30d0:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <_ZN4Uart12checkForDataEv>
    30d4:	88 23       	and	r24, r24
    30d6:	11 f4       	brne	.+4      	; 0x30dc <main+0xf90>
    30d8:	0c 94 63 24 	jmp	0x48c6	; 0x48c6 <main+0x277a>
    30dc:	0e 30       	cpi	r16, 0x0E	; 14
    30de:	11 05       	cpc	r17, r1
    30e0:	61 f7       	brne	.-40     	; 0x30ba <main+0xf6e>
    30e2:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <main+0x2b54>
    30e6:	98 01       	movw	r18, r16
    30e8:	11 23       	and	r17, r17
    30ea:	14 f4       	brge	.+4      	; 0x30f0 <main+0xfa4>
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	33 27       	eor	r19, r19
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    30f2:	12 16       	cp	r1, r18
    30f4:	13 06       	cpc	r1, r19
    30f6:	0c f0       	brlt	.+2      	; 0x30fa <main+0xfae>
    30f8:	49 c0       	rjmp	.+146    	; 0x318c <main+0x1040>
    30fa:	02 c0       	rjmp	.+4      	; 0x3100 <main+0xfb4>
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
			if (*arr != 0)
    30fc:	2e e0       	ldi	r18, 0x0E	; 14
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	61 e0       	ldi	r22, 0x01	; 1
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	47 e3       	ldi	r20, 0x37	; 55
    3108:	51 e0       	ldi	r21, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    310a:	70 e0       	ldi	r23, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    310c:	f4 01       	movw	r30, r8
    310e:	e8 0f       	add	r30, r24
    3110:	f9 1f       	adc	r31, r25
    3112:	a0 81       	ld	r26, Z
    3114:	a5 34       	cpi	r26, 0x45	; 69
    3116:	61 f4       	brne	.+24     	; 0x3130 <main+0xfe4>
    3118:	a2 e3       	ldi	r26, 0x32	; 50
    311a:	b1 e0       	ldi	r27, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    311c:	01 91       	ld	r16, Z+
    311e:	1d 91       	ld	r17, X+
    3120:	01 13       	cpse	r16, r17
					{
						status = false;
    3122:	67 2f       	mov	r22, r23
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    3124:	4a 17       	cp	r20, r26
    3126:	5b 07       	cpc	r21, r27
    3128:	c9 f7       	brne	.-14     	; 0x311c <main+0xfd0>
    312a:	05 96       	adiw	r24, 0x05	; 5
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    312c:	61 11       	cpse	r22, r1
    312e:	2e c0       	rjmp	.+92     	; 0x318c <main+0x1040>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    3130:	01 96       	adiw	r24, 0x01	; 1
    3132:	82 17       	cp	r24, r18
    3134:	93 07       	cpc	r25, r19
    3136:	54 f3       	brlt	.-44     	; 0x310c <main+0xfc0>
    3138:	51 e0       	ldi	r21, 0x01	; 1
    313a:	80 e0       	ldi	r24, 0x00	; 0
    313c:	90 e0       	ldi	r25, 0x00	; 0
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    313e:	60 e0       	ldi	r22, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    3140:	f4 01       	movw	r30, r8
    3142:	e8 0f       	add	r30, r24
    3144:	f9 1f       	adc	r31, r25
    3146:	40 81       	ld	r20, Z
    3148:	4f 34       	cpi	r20, 0x4F	; 79
    314a:	71 f4       	brne	.+28     	; 0x3168 <main+0x101c>
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    314c:	e8 eb       	ldi	r30, 0xB8	; 184
    314e:	f0 e0       	ldi	r31, 0x00	; 0
    3150:	ec 0f       	add	r30, r28
    3152:	fd 1f       	adc	r31, r29
    3154:	e8 0f       	add	r30, r24
    3156:	f9 1f       	adc	r31, r25
    3158:	40 81       	ld	r20, Z
    315a:	4b 34       	cpi	r20, 0x4B	; 75
    315c:	11 f0       	breq	.+4      	; 0x3162 <main+0x1016>
    315e:	0c 94 db 25 	jmp	0x4bb6	; 0x4bb6 <main+0x2a6a>
    3162:	02 96       	adiw	r24, 0x02	; 2
					{
						status = false;
					}
				}
				if (status)
    3164:	51 11       	cpse	r21, r1
    3166:	12 c0       	rjmp	.+36     	; 0x318c <main+0x1040>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    3168:	01 96       	adiw	r24, 0x01	; 1
    316a:	82 17       	cp	r24, r18
    316c:	93 07       	cpc	r25, r19
    316e:	44 f3       	brlt	.-48     	; 0x3140 <main+0xff4>
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    3170:	f4 01       	movw	r30, r8
    3172:	80 81       	ld	r24, Z
    3174:	8e 33       	cpi	r24, 0x3E	; 62
    3176:	51 f0       	breq	.+20     	; 0x318c <main+0x1040>
    3178:	31 96       	adiw	r30, 0x01	; 1
    317a:	28 0d       	add	r18, r8
    317c:	39 1d       	adc	r19, r9
    317e:	03 c0       	rjmp	.+6      	; 0x3186 <main+0x103a>
    3180:	81 91       	ld	r24, Z+
    3182:	8e 33       	cpi	r24, 0x3E	; 62
    3184:	19 f0       	breq	.+6      	; 0x318c <main+0x1040>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    3186:	e2 17       	cp	r30, r18
    3188:	f3 07       	cpc	r31, r19
    318a:	d1 f7       	brne	.-12     	; 0x3180 <main+0x1034>
		command[8] = command[19] = '"';										//set <"> for phone number
		command[20] = 0;													//close number with <">, run over the dummy char
		
		sendCommand(command,true);
		
		gsmSMS.UARTstring(ptr,0);
    318c:	40 e0       	ldi	r20, 0x00	; 0
    318e:	62 e3       	ldi	r22, 0x32	; 50
    3190:	71 e0       	ldi	r23, 0x01	; 1
    3192:	8d e4       	ldi	r24, 0x4D	; 77
    3194:	94 e0       	ldi	r25, 0x04	; 4
    3196:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		if (massage5 != NULL)
		{
			gsmSMS.UARTsend(13);
			gsmSMS.UARTstring(massage5,0);
		}
		gsmSMS.UARTsend(26);
    319a:	6a e1       	ldi	r22, 0x1A	; 26
    319c:	8d e4       	ldi	r24, 0x4D	; 77
    319e:	94 e0       	ldi	r25, 0x04	; 4
    31a0:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		gsmSMS.UARTsend(13);
    31a4:	6d e0       	ldi	r22, 0x0D	; 13
    31a6:	8d e4       	ldi	r24, 0x4D	; 77
    31a8:	94 e0       	ldi	r25, 0x04	; 4
    31aa:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		_startTimeCounterSMSreceived = true;
    31ae:	81 e0       	ldi	r24, 0x01	; 1
    31b0:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <top+0x107>
    31b4:	0c 94 16 22 	jmp	0x442c	; 0x442c <main+0x22e0>
    31b8:	ff ef       	ldi	r31, 0xFF	; 255
    31ba:	20 e7       	ldi	r18, 0x70	; 112
    31bc:	32 e0       	ldi	r19, 0x02	; 2
    31be:	f1 50       	subi	r31, 0x01	; 1
    31c0:	20 40       	sbci	r18, 0x00	; 0
    31c2:	30 40       	sbci	r19, 0x00	; 0
    31c4:	e1 f7       	brne	.-8      	; 0x31be <main+0x1072>
    31c6:	00 c0       	rjmp	.+0      	; 0x31c8 <main+0x107c>
    31c8:	00 00       	nop
		if (*getPhoneNumber(index) == 0)
		{
			return false;
		}
		_delay_ms(50);
		strcpy(command,"AT+CMGS=");											//copy command
    31ca:	89 e0       	ldi	r24, 0x09	; 9
    31cc:	ed e8       	ldi	r30, 0x8D	; 141
    31ce:	f1 e0       	ldi	r31, 0x01	; 1
    31d0:	d5 01       	movw	r26, r10
    31d2:	01 90       	ld	r0, Z+
    31d4:	0d 92       	st	X+, r0
    31d6:	8a 95       	dec	r24
    31d8:	e1 f7       	brne	.-8      	; 0x31d2 <main+0x1086>
		strcpy(command+9,getPhoneNumber(index));							//copy phone number
    31da:	c5 01       	movw	r24, r10
    31dc:	09 96       	adiw	r24, 0x09	; 9
    31de:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
		command[8] = command[19] = '"';										//set <"> for phone number
    31e2:	82 e2       	ldi	r24, 0x22	; 34
    31e4:	d5 01       	movw	r26, r10
    31e6:	53 96       	adiw	r26, 0x13	; 19
    31e8:	8c 93       	st	X, r24
    31ea:	53 97       	sbiw	r26, 0x13	; 19
    31ec:	18 96       	adiw	r26, 0x08	; 8
    31ee:	8c 93       	st	X, r24
    31f0:	18 97       	sbiw	r26, 0x08	; 8
		command[20] = 0;													//close number with <">, run over the dummy char
    31f2:	54 96       	adiw	r26, 0x14	; 20
    31f4:	1c 92       	st	X, r1
	char _1minConterSMSreceived, _10secRestetGSMdelay , _GSMerrorCounter;
	bool _newData, _startTimeCounterSMSreceived, _startTimeCounterGSMreset;
	int _newDataIndex;
	bool sendCommand(const char ptr[], bool checkAck = false){
		int condition;
		gsmSMS.UARTstring(ptr,0);
    31f6:	40 e0       	ldi	r20, 0x00	; 0
    31f8:	b5 01       	movw	r22, r10
    31fa:	8d e4       	ldi	r24, 0x4D	; 77
    31fc:	94 e0       	ldi	r25, 0x04	; 4
    31fe:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		gsmSMS.UARTsend(13);
    3202:	6d e0       	ldi	r22, 0x0D	; 13
    3204:	8d e4       	ldi	r24, 0x4D	; 77
    3206:	94 e0       	ldi	r25, 0x04	; 4
    3208:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		if (checkAck)
		{
			char arr[15] = {0};
    320c:	8f e0       	ldi	r24, 0x0F	; 15
    320e:	f4 01       	movw	r30, r8
    3210:	11 92       	st	Z+, r1
    3212:	8a 95       	dec	r24
    3214:	e9 f7       	brne	.-6      	; 0x3210 <main+0x10c4>
			RXinterruptDisable();
    3216:	e1 ec       	ldi	r30, 0xC1	; 193
    3218:	f0 e0       	ldi	r31, 0x00	; 0
    321a:	80 81       	ld	r24, Z
    321c:	8f 77       	andi	r24, 0x7F	; 127
    321e:	80 83       	st	Z, r24
    3220:	64 01       	movw	r12, r8
			return false;
		}
		return 0;
	}
	int checkForACkPacket(char getData[], int arrSize){
		int i = 0;
    3222:	00 e0       	ldi	r16, 0x00	; 0
    3224:	10 e0       	ldi	r17, 0x00	; 0
		char data = 0;
		
		do 
		{
			data = gsmSMS.UARTreceive();
    3226:	8d e4       	ldi	r24, 0x4D	; 77
    3228:	94 e0       	ldi	r25, 0x04	; 4
    322a:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <_ZN4Uart11UARTreceiveEv>
			getData[i++] = data;
    322e:	0f 5f       	subi	r16, 0xFF	; 255
    3230:	1f 4f       	sbci	r17, 0xFF	; 255
    3232:	d6 01       	movw	r26, r12
    3234:	8d 93       	st	X+, r24
    3236:	6d 01       	movw	r12, r26
		}while(gsmSMS.checkForData() && i < arrSize);
    3238:	8d e4       	ldi	r24, 0x4D	; 77
    323a:	94 e0       	ldi	r25, 0x04	; 4
    323c:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <_ZN4Uart12checkForDataEv>
    3240:	88 23       	and	r24, r24
    3242:	11 f4       	brne	.+4      	; 0x3248 <main+0x10fc>
    3244:	0c 94 73 24 	jmp	0x48e6	; 0x48e6 <main+0x279a>
    3248:	0e 30       	cpi	r16, 0x0E	; 14
    324a:	11 05       	cpc	r17, r1
    324c:	61 f7       	brne	.-40     	; 0x3226 <main+0x10da>
    324e:	0c 94 5f 26 	jmp	0x4cbe	; 0x4cbe <main+0x2b72>
    3252:	98 01       	movw	r18, r16
    3254:	11 23       	and	r17, r17
    3256:	14 f4       	brge	.+4      	; 0x325c <main+0x1110>
    3258:	20 e0       	ldi	r18, 0x00	; 0
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	33 27       	eor	r19, r19
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    325e:	12 16       	cp	r1, r18
    3260:	13 06       	cpc	r1, r19
    3262:	0c f0       	brlt	.+2      	; 0x3266 <main+0x111a>
    3264:	49 c0       	rjmp	.+146    	; 0x32f8 <main+0x11ac>
    3266:	02 c0       	rjmp	.+4      	; 0x326c <main+0x1120>
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
			if (*arr != 0)
    3268:	2e e0       	ldi	r18, 0x0E	; 14
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	61 e0       	ldi	r22, 0x01	; 1
    326e:	80 e0       	ldi	r24, 0x00	; 0
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	47 e3       	ldi	r20, 0x37	; 55
    3274:	51 e0       	ldi	r21, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    3276:	70 e0       	ldi	r23, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    3278:	f4 01       	movw	r30, r8
    327a:	e8 0f       	add	r30, r24
    327c:	f9 1f       	adc	r31, r25
    327e:	a0 81       	ld	r26, Z
    3280:	a5 34       	cpi	r26, 0x45	; 69
    3282:	61 f4       	brne	.+24     	; 0x329c <main+0x1150>
    3284:	a2 e3       	ldi	r26, 0x32	; 50
    3286:	b1 e0       	ldi	r27, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    3288:	01 91       	ld	r16, Z+
    328a:	1d 91       	ld	r17, X+
    328c:	01 13       	cpse	r16, r17
					{
						status = false;
    328e:	67 2f       	mov	r22, r23
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    3290:	4a 17       	cp	r20, r26
    3292:	5b 07       	cpc	r21, r27
    3294:	c9 f7       	brne	.-14     	; 0x3288 <main+0x113c>
    3296:	05 96       	adiw	r24, 0x05	; 5
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    3298:	61 11       	cpse	r22, r1
    329a:	2e c0       	rjmp	.+92     	; 0x32f8 <main+0x11ac>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    329c:	01 96       	adiw	r24, 0x01	; 1
    329e:	82 17       	cp	r24, r18
    32a0:	93 07       	cpc	r25, r19
    32a2:	54 f3       	brlt	.-44     	; 0x3278 <main+0x112c>
    32a4:	51 e0       	ldi	r21, 0x01	; 1
    32a6:	80 e0       	ldi	r24, 0x00	; 0
    32a8:	90 e0       	ldi	r25, 0x00	; 0
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    32aa:	60 e0       	ldi	r22, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    32ac:	f4 01       	movw	r30, r8
    32ae:	e8 0f       	add	r30, r24
    32b0:	f9 1f       	adc	r31, r25
    32b2:	40 81       	ld	r20, Z
    32b4:	4f 34       	cpi	r20, 0x4F	; 79
    32b6:	71 f4       	brne	.+28     	; 0x32d4 <main+0x1188>
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    32b8:	e8 eb       	ldi	r30, 0xB8	; 184
    32ba:	f0 e0       	ldi	r31, 0x00	; 0
    32bc:	ec 0f       	add	r30, r28
    32be:	fd 1f       	adc	r31, r29
    32c0:	e8 0f       	add	r30, r24
    32c2:	f9 1f       	adc	r31, r25
    32c4:	40 81       	ld	r20, Z
    32c6:	4b 34       	cpi	r20, 0x4B	; 75
    32c8:	11 f0       	breq	.+4      	; 0x32ce <main+0x1182>
    32ca:	0c 94 df 25 	jmp	0x4bbe	; 0x4bbe <main+0x2a72>
    32ce:	02 96       	adiw	r24, 0x02	; 2
					{
						status = false;
					}
				}
				if (status)
    32d0:	51 11       	cpse	r21, r1
    32d2:	12 c0       	rjmp	.+36     	; 0x32f8 <main+0x11ac>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    32d4:	01 96       	adiw	r24, 0x01	; 1
    32d6:	82 17       	cp	r24, r18
    32d8:	93 07       	cpc	r25, r19
    32da:	44 f3       	brlt	.-48     	; 0x32ac <main+0x1160>
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    32dc:	f4 01       	movw	r30, r8
    32de:	80 81       	ld	r24, Z
    32e0:	8e 33       	cpi	r24, 0x3E	; 62
    32e2:	51 f0       	breq	.+20     	; 0x32f8 <main+0x11ac>
    32e4:	31 96       	adiw	r30, 0x01	; 1
    32e6:	28 0d       	add	r18, r8
    32e8:	39 1d       	adc	r19, r9
    32ea:	03 c0       	rjmp	.+6      	; 0x32f2 <main+0x11a6>
    32ec:	81 91       	ld	r24, Z+
    32ee:	8e 33       	cpi	r24, 0x3E	; 62
    32f0:	19 f0       	breq	.+6      	; 0x32f8 <main+0x11ac>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    32f2:	2e 17       	cp	r18, r30
    32f4:	3f 07       	cpc	r19, r31
    32f6:	d1 f7       	brne	.-12     	; 0x32ec <main+0x11a0>
		command[8] = command[19] = '"';										//set <"> for phone number
		command[20] = 0;													//close number with <">, run over the dummy char
		
		sendCommand(command,true);
		
		gsmSMS.UARTstring(ptr,0);
    32f8:	40 e0       	ldi	r20, 0x00	; 0
    32fa:	6f e5       	ldi	r22, 0x5F	; 95
    32fc:	72 e0       	ldi	r23, 0x02	; 2
    32fe:	8d e4       	ldi	r24, 0x4D	; 77
    3300:	94 e0       	ldi	r25, 0x04	; 4
    3302:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		if (massage5 != NULL)
		{
			gsmSMS.UARTsend(13);
			gsmSMS.UARTstring(massage5,0);
		}
		gsmSMS.UARTsend(26);
    3306:	6a e1       	ldi	r22, 0x1A	; 26
    3308:	8d e4       	ldi	r24, 0x4D	; 77
    330a:	94 e0       	ldi	r25, 0x04	; 4
    330c:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		gsmSMS.UARTsend(13);
    3310:	6d e0       	ldi	r22, 0x0D	; 13
    3312:	8d e4       	ldi	r24, 0x4D	; 77
    3314:	94 e0       	ldi	r25, 0x04	; 4
    3316:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		_startTimeCounterSMSreceived = true;
    331a:	81 e0       	ldi	r24, 0x01	; 1
    331c:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <top+0x107>
    3320:	0c 94 16 22 	jmp	0x442c	; 0x442c <main+0x22e0>
			}
			case  3:
			{
				if (ptr[10] > '0' && '9' >= ptr[10])
				{
					_sendPacket[2] = 0x10;
    3324:	90 e1       	ldi	r25, 0x10	; 16
    3326:	90 93 de 06 	sts	0x06DE, r25	; 0x8006de <top+0x291>
					_sendPacket[3] = ptr[10] - '0';
    332a:	80 53       	subi	r24, 0x30	; 48
    332c:	80 93 df 06 	sts	0x06DF, r24	; 0x8006df <top+0x292>
			}
		}
		return result;
	}
	char *getPhoneNumber(int index){
		return _phoneBook[index];}
    3330:	60 91 e2 06 	lds	r22, 0x06E2	; 0x8006e2 <top+0x295>
    3334:	fb e0       	ldi	r31, 0x0B	; 11
    3336:	6f 9f       	mul	r22, r31
    3338:	b0 01       	movw	r22, r0
    333a:	11 24       	eor	r1, r1
    333c:	6f 57       	subi	r22, 0x7F	; 127
    333e:	7b 4f       	sbci	r23, 0xFB	; 251
		sendCommand("AT+MORING=1",true);
		copyPhoneFromSimToRAM();
	}
	bool sendSMS(const char *ptr,int index, const char *massage2 = NULL, const char *massage3 = NULL, const char *massage4 = NULL, const char *massage5 = NULL){
		char command[25];
		if (*getPhoneNumber(index) == 0)
    3340:	db 01       	movw	r26, r22
    3342:	8c 91       	ld	r24, X
    3344:	88 23       	and	r24, r24
    3346:	11 f4       	brne	.+4      	; 0x334c <main+0x1200>
    3348:	0c 94 16 22 	jmp	0x442c	; 0x442c <main+0x22e0>
    334c:	bf ef       	ldi	r27, 0xFF	; 255
    334e:	e0 e7       	ldi	r30, 0x70	; 112
    3350:	f2 e0       	ldi	r31, 0x02	; 2
    3352:	b1 50       	subi	r27, 0x01	; 1
    3354:	e0 40       	sbci	r30, 0x00	; 0
    3356:	f0 40       	sbci	r31, 0x00	; 0
    3358:	e1 f7       	brne	.-8      	; 0x3352 <main+0x1206>
    335a:	00 c0       	rjmp	.+0      	; 0x335c <main+0x1210>
    335c:	00 00       	nop
		{
			return false;
		}
		_delay_ms(50);
		strcpy(command,"AT+CMGS=");											//copy command
    335e:	89 e0       	ldi	r24, 0x09	; 9
    3360:	ed e8       	ldi	r30, 0x8D	; 141
    3362:	f1 e0       	ldi	r31, 0x01	; 1
    3364:	d5 01       	movw	r26, r10
    3366:	01 90       	ld	r0, Z+
    3368:	0d 92       	st	X+, r0
    336a:	8a 95       	dec	r24
    336c:	e1 f7       	brne	.-8      	; 0x3366 <main+0x121a>
		strcpy(command+9,getPhoneNumber(index));							//copy phone number
    336e:	c5 01       	movw	r24, r10
    3370:	09 96       	adiw	r24, 0x09	; 9
    3372:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
		command[8] = command[19] = '"';										//set <"> for phone number
    3376:	82 e2       	ldi	r24, 0x22	; 34
    3378:	d5 01       	movw	r26, r10
    337a:	53 96       	adiw	r26, 0x13	; 19
    337c:	8c 93       	st	X, r24
    337e:	53 97       	sbiw	r26, 0x13	; 19
    3380:	18 96       	adiw	r26, 0x08	; 8
    3382:	8c 93       	st	X, r24
    3384:	18 97       	sbiw	r26, 0x08	; 8
		command[20] = 0;													//close number with <">, run over the dummy char
    3386:	54 96       	adiw	r26, 0x14	; 20
    3388:	1c 92       	st	X, r1
	char _1minConterSMSreceived, _10secRestetGSMdelay , _GSMerrorCounter;
	bool _newData, _startTimeCounterSMSreceived, _startTimeCounterGSMreset;
	int _newDataIndex;
	bool sendCommand(const char ptr[], bool checkAck = false){
		int condition;
		gsmSMS.UARTstring(ptr,0);
    338a:	40 e0       	ldi	r20, 0x00	; 0
    338c:	b5 01       	movw	r22, r10
    338e:	8d e4       	ldi	r24, 0x4D	; 77
    3390:	94 e0       	ldi	r25, 0x04	; 4
    3392:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		gsmSMS.UARTsend(13);
    3396:	6d e0       	ldi	r22, 0x0D	; 13
    3398:	8d e4       	ldi	r24, 0x4D	; 77
    339a:	94 e0       	ldi	r25, 0x04	; 4
    339c:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		if (checkAck)
		{
			char arr[15] = {0};
    33a0:	8f e0       	ldi	r24, 0x0F	; 15
    33a2:	f4 01       	movw	r30, r8
    33a4:	11 92       	st	Z+, r1
    33a6:	8a 95       	dec	r24
    33a8:	e9 f7       	brne	.-6      	; 0x33a4 <main+0x1258>
			RXinterruptDisable();
    33aa:	e1 ec       	ldi	r30, 0xC1	; 193
    33ac:	f0 e0       	ldi	r31, 0x00	; 0
    33ae:	80 81       	ld	r24, Z
    33b0:	8f 77       	andi	r24, 0x7F	; 127
    33b2:	80 83       	st	Z, r24
    33b4:	64 01       	movw	r12, r8
			return false;
		}
		return 0;
	}
	int checkForACkPacket(char getData[], int arrSize){
		int i = 0;
    33b6:	00 e0       	ldi	r16, 0x00	; 0
    33b8:	10 e0       	ldi	r17, 0x00	; 0
		char data = 0;
		
		do 
		{
			data = gsmSMS.UARTreceive();
    33ba:	8d e4       	ldi	r24, 0x4D	; 77
    33bc:	94 e0       	ldi	r25, 0x04	; 4
    33be:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <_ZN4Uart11UARTreceiveEv>
			getData[i++] = data;
    33c2:	0f 5f       	subi	r16, 0xFF	; 255
    33c4:	1f 4f       	sbci	r17, 0xFF	; 255
    33c6:	d6 01       	movw	r26, r12
    33c8:	8d 93       	st	X+, r24
    33ca:	6d 01       	movw	r12, r26
		}while(gsmSMS.checkForData() && i < arrSize);
    33cc:	8d e4       	ldi	r24, 0x4D	; 77
    33ce:	94 e0       	ldi	r25, 0x04	; 4
    33d0:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <_ZN4Uart12checkForDataEv>
    33d4:	88 23       	and	r24, r24
    33d6:	11 f4       	brne	.+4      	; 0x33dc <main+0x1290>
    33d8:	0c 94 83 24 	jmp	0x4906	; 0x4906 <main+0x27ba>
    33dc:	0e 30       	cpi	r16, 0x0E	; 14
    33de:	11 05       	cpc	r17, r1
    33e0:	61 f7       	brne	.-40     	; 0x33ba <main+0x126e>
    33e2:	0c 94 6e 26 	jmp	0x4cdc	; 0x4cdc <main+0x2b90>
    33e6:	98 01       	movw	r18, r16
    33e8:	11 23       	and	r17, r17
    33ea:	14 f4       	brge	.+4      	; 0x33f0 <main+0x12a4>
    33ec:	20 e0       	ldi	r18, 0x00	; 0
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	33 27       	eor	r19, r19
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    33f2:	12 16       	cp	r1, r18
    33f4:	13 06       	cpc	r1, r19
    33f6:	0c f0       	brlt	.+2      	; 0x33fa <main+0x12ae>
    33f8:	49 c0       	rjmp	.+146    	; 0x348c <main+0x1340>
    33fa:	02 c0       	rjmp	.+4      	; 0x3400 <main+0x12b4>
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
			if (*arr != 0)
    33fc:	2e e0       	ldi	r18, 0x0E	; 14
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	61 e0       	ldi	r22, 0x01	; 1
    3402:	80 e0       	ldi	r24, 0x00	; 0
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	47 e3       	ldi	r20, 0x37	; 55
    3408:	51 e0       	ldi	r21, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    340a:	70 e0       	ldi	r23, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    340c:	f4 01       	movw	r30, r8
    340e:	e8 0f       	add	r30, r24
    3410:	f9 1f       	adc	r31, r25
    3412:	a0 81       	ld	r26, Z
    3414:	a5 34       	cpi	r26, 0x45	; 69
    3416:	61 f4       	brne	.+24     	; 0x3430 <main+0x12e4>
    3418:	a2 e3       	ldi	r26, 0x32	; 50
    341a:	b1 e0       	ldi	r27, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    341c:	01 91       	ld	r16, Z+
    341e:	1d 91       	ld	r17, X+
    3420:	01 13       	cpse	r16, r17
					{
						status = false;
    3422:	67 2f       	mov	r22, r23
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    3424:	4a 17       	cp	r20, r26
    3426:	5b 07       	cpc	r21, r27
    3428:	c9 f7       	brne	.-14     	; 0x341c <main+0x12d0>
    342a:	05 96       	adiw	r24, 0x05	; 5
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    342c:	61 11       	cpse	r22, r1
    342e:	2e c0       	rjmp	.+92     	; 0x348c <main+0x1340>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    3430:	01 96       	adiw	r24, 0x01	; 1
    3432:	82 17       	cp	r24, r18
    3434:	93 07       	cpc	r25, r19
    3436:	54 f3       	brlt	.-44     	; 0x340c <main+0x12c0>
    3438:	51 e0       	ldi	r21, 0x01	; 1
    343a:	80 e0       	ldi	r24, 0x00	; 0
    343c:	90 e0       	ldi	r25, 0x00	; 0
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    343e:	60 e0       	ldi	r22, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    3440:	f4 01       	movw	r30, r8
    3442:	e8 0f       	add	r30, r24
    3444:	f9 1f       	adc	r31, r25
    3446:	40 81       	ld	r20, Z
    3448:	4f 34       	cpi	r20, 0x4F	; 79
    344a:	71 f4       	brne	.+28     	; 0x3468 <main+0x131c>
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    344c:	e8 eb       	ldi	r30, 0xB8	; 184
    344e:	f0 e0       	ldi	r31, 0x00	; 0
    3450:	ec 0f       	add	r30, r28
    3452:	fd 1f       	adc	r31, r29
    3454:	e8 0f       	add	r30, r24
    3456:	f9 1f       	adc	r31, r25
    3458:	40 81       	ld	r20, Z
    345a:	4b 34       	cpi	r20, 0x4B	; 75
    345c:	11 f0       	breq	.+4      	; 0x3462 <main+0x1316>
    345e:	0c 94 e3 25 	jmp	0x4bc6	; 0x4bc6 <main+0x2a7a>
    3462:	02 96       	adiw	r24, 0x02	; 2
					{
						status = false;
					}
				}
				if (status)
    3464:	51 11       	cpse	r21, r1
    3466:	12 c0       	rjmp	.+36     	; 0x348c <main+0x1340>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    3468:	01 96       	adiw	r24, 0x01	; 1
    346a:	82 17       	cp	r24, r18
    346c:	93 07       	cpc	r25, r19
    346e:	44 f3       	brlt	.-48     	; 0x3440 <main+0x12f4>
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    3470:	f4 01       	movw	r30, r8
    3472:	80 81       	ld	r24, Z
    3474:	8e 33       	cpi	r24, 0x3E	; 62
    3476:	51 f0       	breq	.+20     	; 0x348c <main+0x1340>
    3478:	31 96       	adiw	r30, 0x01	; 1
    347a:	28 0d       	add	r18, r8
    347c:	39 1d       	adc	r19, r9
    347e:	03 c0       	rjmp	.+6      	; 0x3486 <main+0x133a>
    3480:	81 91       	ld	r24, Z+
    3482:	8e 33       	cpi	r24, 0x3E	; 62
    3484:	19 f0       	breq	.+6      	; 0x348c <main+0x1340>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    3486:	2e 17       	cp	r18, r30
    3488:	3f 07       	cpc	r19, r31
    348a:	d1 f7       	brne	.-12     	; 0x3480 <main+0x1334>
		command[8] = command[19] = '"';										//set <"> for phone number
		command[20] = 0;													//close number with <">, run over the dummy char
		
		sendCommand(command,true);
		
		gsmSMS.UARTstring(ptr,0);
    348c:	40 e0       	ldi	r20, 0x00	; 0
    348e:	64 e7       	ldi	r22, 0x74	; 116
    3490:	72 e0       	ldi	r23, 0x02	; 2
    3492:	8d e4       	ldi	r24, 0x4D	; 77
    3494:	94 e0       	ldi	r25, 0x04	; 4
    3496:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		if (massage5 != NULL)
		{
			gsmSMS.UARTsend(13);
			gsmSMS.UARTstring(massage5,0);
		}
		gsmSMS.UARTsend(26);
    349a:	6a e1       	ldi	r22, 0x1A	; 26
    349c:	8d e4       	ldi	r24, 0x4D	; 77
    349e:	94 e0       	ldi	r25, 0x04	; 4
    34a0:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		gsmSMS.UARTsend(13);
    34a4:	6d e0       	ldi	r22, 0x0D	; 13
    34a6:	8d e4       	ldi	r24, 0x4D	; 77
    34a8:	94 e0       	ldi	r25, 0x04	; 4
    34aa:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		_startTimeCounterSMSreceived = true;
    34ae:	81 e0       	ldi	r24, 0x01	; 1
    34b0:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <top+0x107>
    34b4:	bb c7       	rjmp	.+3958   	; 0x442c <main+0x22e0>
			}
		}
		return result;
	}
	char *getPhoneNumber(int index){
		return _phoneBook[index];}
    34b6:	60 91 e2 06 	lds	r22, 0x06E2	; 0x8006e2 <top+0x295>
    34ba:	fb e0       	ldi	r31, 0x0B	; 11
    34bc:	6f 9f       	mul	r22, r31
    34be:	b0 01       	movw	r22, r0
    34c0:	11 24       	eor	r1, r1
    34c2:	6f 57       	subi	r22, 0x7F	; 127
    34c4:	7b 4f       	sbci	r23, 0xFB	; 251
		sendCommand("AT+MORING=1",true);
		copyPhoneFromSimToRAM();
	}
	bool sendSMS(const char *ptr,int index, const char *massage2 = NULL, const char *massage3 = NULL, const char *massage4 = NULL, const char *massage5 = NULL){
		char command[25];
		if (*getPhoneNumber(index) == 0)
    34c6:	db 01       	movw	r26, r22
    34c8:	8c 91       	ld	r24, X
    34ca:	88 23       	and	r24, r24
    34cc:	09 f4       	brne	.+2      	; 0x34d0 <main+0x1384>
    34ce:	ae c7       	rjmp	.+3932   	; 0x442c <main+0x22e0>
    34d0:	bf ef       	ldi	r27, 0xFF	; 255
    34d2:	e0 e7       	ldi	r30, 0x70	; 112
    34d4:	f2 e0       	ldi	r31, 0x02	; 2
    34d6:	b1 50       	subi	r27, 0x01	; 1
    34d8:	e0 40       	sbci	r30, 0x00	; 0
    34da:	f0 40       	sbci	r31, 0x00	; 0
    34dc:	e1 f7       	brne	.-8      	; 0x34d6 <main+0x138a>
    34de:	00 c0       	rjmp	.+0      	; 0x34e0 <main+0x1394>
    34e0:	00 00       	nop
		{
			return false;
		}
		_delay_ms(50);
		strcpy(command,"AT+CMGS=");											//copy command
    34e2:	89 e0       	ldi	r24, 0x09	; 9
    34e4:	ed e8       	ldi	r30, 0x8D	; 141
    34e6:	f1 e0       	ldi	r31, 0x01	; 1
    34e8:	d5 01       	movw	r26, r10
    34ea:	01 90       	ld	r0, Z+
    34ec:	0d 92       	st	X+, r0
    34ee:	8a 95       	dec	r24
    34f0:	e1 f7       	brne	.-8      	; 0x34ea <main+0x139e>
		strcpy(command+9,getPhoneNumber(index));							//copy phone number
    34f2:	c5 01       	movw	r24, r10
    34f4:	09 96       	adiw	r24, 0x09	; 9
    34f6:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
		command[8] = command[19] = '"';										//set <"> for phone number
    34fa:	82 e2       	ldi	r24, 0x22	; 34
    34fc:	d5 01       	movw	r26, r10
    34fe:	53 96       	adiw	r26, 0x13	; 19
    3500:	8c 93       	st	X, r24
    3502:	53 97       	sbiw	r26, 0x13	; 19
    3504:	18 96       	adiw	r26, 0x08	; 8
    3506:	8c 93       	st	X, r24
    3508:	18 97       	sbiw	r26, 0x08	; 8
		command[20] = 0;													//close number with <">, run over the dummy char
    350a:	54 96       	adiw	r26, 0x14	; 20
    350c:	1c 92       	st	X, r1
		
		sendCommand(command,true);
    350e:	41 e0       	ldi	r20, 0x01	; 1
    3510:	b5 01       	movw	r22, r10
    3512:	8d e4       	ldi	r24, 0x4D	; 77
    3514:	94 e0       	ldi	r25, 0x04	; 4
    3516:	0e 94 d7 08 	call	0x11ae	; 0x11ae <_ZN3SMS11sendCommandEPKcb>
		
		gsmSMS.UARTstring(ptr,0);
    351a:	40 e0       	ldi	r20, 0x00	; 0
    351c:	ca 51       	subi	r28, 0x1A	; 26
    351e:	df 4f       	sbci	r29, 0xFF	; 255
    3520:	68 81       	ld	r22, Y
    3522:	c6 5e       	subi	r28, 0xE6	; 230
    3524:	d0 40       	sbci	r29, 0x00	; 0
    3526:	c9 51       	subi	r28, 0x19	; 25
    3528:	df 4f       	sbci	r29, 0xFF	; 255
    352a:	78 81       	ld	r23, Y
    352c:	c7 5e       	subi	r28, 0xE7	; 231
    352e:	d0 40       	sbci	r29, 0x00	; 0
    3530:	8d e4       	ldi	r24, 0x4D	; 77
    3532:	94 e0       	ldi	r25, 0x04	; 4
    3534:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		if (massage5 != NULL)
		{
			gsmSMS.UARTsend(13);
			gsmSMS.UARTstring(massage5,0);
		}
		gsmSMS.UARTsend(26);
    3538:	6a e1       	ldi	r22, 0x1A	; 26
    353a:	8d e4       	ldi	r24, 0x4D	; 77
    353c:	94 e0       	ldi	r25, 0x04	; 4
    353e:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		gsmSMS.UARTsend(13);
    3542:	6d e0       	ldi	r22, 0x0D	; 13
    3544:	8d e4       	ldi	r24, 0x4D	; 77
    3546:	94 e0       	ldi	r25, 0x04	; 4
    3548:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		_startTimeCounterSMSreceived = true;
    354c:	81 e0       	ldi	r24, 0x01	; 1
    354e:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <top+0x107>
    3552:	6c c7       	rjmp	.+3800   	; 0x442c <main+0x22e0>
			}
			case  4:
			{
				if (ptr[10] > '0' && '9' >= ptr[10])
				{
					_sendPacket[2] = 0x20;
    3554:	90 e2       	ldi	r25, 0x20	; 32
    3556:	90 93 de 06 	sts	0x06DE, r25	; 0x8006de <top+0x291>
					_sendPacket[3] = ptr[10] - '0';
    355a:	80 53       	subi	r24, 0x30	; 48
    355c:	80 93 df 06 	sts	0x06DF, r24	; 0x8006df <top+0x292>
			}
		}
		return result;
	}
	char *getPhoneNumber(int index){
		return _phoneBook[index];}
    3560:	60 91 e2 06 	lds	r22, 0x06E2	; 0x8006e2 <top+0x295>
    3564:	bb e0       	ldi	r27, 0x0B	; 11
    3566:	6b 9f       	mul	r22, r27
    3568:	b0 01       	movw	r22, r0
    356a:	11 24       	eor	r1, r1
    356c:	6f 57       	subi	r22, 0x7F	; 127
    356e:	7b 4f       	sbci	r23, 0xFB	; 251
		sendCommand("AT+MORING=1",true);
		copyPhoneFromSimToRAM();
	}
	bool sendSMS(const char *ptr,int index, const char *massage2 = NULL, const char *massage3 = NULL, const char *massage4 = NULL, const char *massage5 = NULL){
		char command[25];
		if (*getPhoneNumber(index) == 0)
    3570:	fb 01       	movw	r30, r22
    3572:	80 81       	ld	r24, Z
    3574:	88 23       	and	r24, r24
    3576:	09 f4       	brne	.+2      	; 0x357a <main+0x142e>
    3578:	59 c7       	rjmp	.+3762   	; 0x442c <main+0x22e0>
    357a:	ff ef       	ldi	r31, 0xFF	; 255
    357c:	20 e7       	ldi	r18, 0x70	; 112
    357e:	32 e0       	ldi	r19, 0x02	; 2
    3580:	f1 50       	subi	r31, 0x01	; 1
    3582:	20 40       	sbci	r18, 0x00	; 0
    3584:	30 40       	sbci	r19, 0x00	; 0
    3586:	e1 f7       	brne	.-8      	; 0x3580 <main+0x1434>
    3588:	00 c0       	rjmp	.+0      	; 0x358a <main+0x143e>
    358a:	00 00       	nop
		{
			return false;
		}
		_delay_ms(50);
		strcpy(command,"AT+CMGS=");											//copy command
    358c:	89 e0       	ldi	r24, 0x09	; 9
    358e:	ed e8       	ldi	r30, 0x8D	; 141
    3590:	f1 e0       	ldi	r31, 0x01	; 1
    3592:	d5 01       	movw	r26, r10
    3594:	01 90       	ld	r0, Z+
    3596:	0d 92       	st	X+, r0
    3598:	8a 95       	dec	r24
    359a:	e1 f7       	brne	.-8      	; 0x3594 <main+0x1448>
		strcpy(command+9,getPhoneNumber(index));							//copy phone number
    359c:	c5 01       	movw	r24, r10
    359e:	09 96       	adiw	r24, 0x09	; 9
    35a0:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
		command[8] = command[19] = '"';										//set <"> for phone number
    35a4:	82 e2       	ldi	r24, 0x22	; 34
    35a6:	d5 01       	movw	r26, r10
    35a8:	53 96       	adiw	r26, 0x13	; 19
    35aa:	8c 93       	st	X, r24
    35ac:	53 97       	sbiw	r26, 0x13	; 19
    35ae:	18 96       	adiw	r26, 0x08	; 8
    35b0:	8c 93       	st	X, r24
    35b2:	18 97       	sbiw	r26, 0x08	; 8
		command[20] = 0;													//close number with <">, run over the dummy char
    35b4:	54 96       	adiw	r26, 0x14	; 20
    35b6:	1c 92       	st	X, r1
		
		sendCommand(command,true);
    35b8:	41 e0       	ldi	r20, 0x01	; 1
    35ba:	b5 01       	movw	r22, r10
    35bc:	8d e4       	ldi	r24, 0x4D	; 77
    35be:	94 e0       	ldi	r25, 0x04	; 4
    35c0:	0e 94 d7 08 	call	0x11ae	; 0x11ae <_ZN3SMS11sendCommandEPKcb>
		
		gsmSMS.UARTstring(ptr,0);
    35c4:	40 e0       	ldi	r20, 0x00	; 0
    35c6:	66 e8       	ldi	r22, 0x86	; 134
    35c8:	72 e0       	ldi	r23, 0x02	; 2
    35ca:	8d e4       	ldi	r24, 0x4D	; 77
    35cc:	94 e0       	ldi	r25, 0x04	; 4
    35ce:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		if (massage5 != NULL)
		{
			gsmSMS.UARTsend(13);
			gsmSMS.UARTstring(massage5,0);
		}
		gsmSMS.UARTsend(26);
    35d2:	6a e1       	ldi	r22, 0x1A	; 26
    35d4:	8d e4       	ldi	r24, 0x4D	; 77
    35d6:	94 e0       	ldi	r25, 0x04	; 4
    35d8:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		gsmSMS.UARTsend(13);
    35dc:	6d e0       	ldi	r22, 0x0D	; 13
    35de:	8d e4       	ldi	r24, 0x4D	; 77
    35e0:	94 e0       	ldi	r25, 0x04	; 4
    35e2:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		_startTimeCounterSMSreceived = true;
    35e6:	81 e0       	ldi	r24, 0x01	; 1
    35e8:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <top+0x107>
    35ec:	1f c7       	rjmp	.+3646   	; 0x442c <main+0x22e0>
			}
		}
		return result;
	}
	char *getPhoneNumber(int index){
		return _phoneBook[index];}
    35ee:	60 91 e2 06 	lds	r22, 0x06E2	; 0x8006e2 <top+0x295>
    35f2:	bb e0       	ldi	r27, 0x0B	; 11
    35f4:	6b 9f       	mul	r22, r27
    35f6:	b0 01       	movw	r22, r0
    35f8:	11 24       	eor	r1, r1
    35fa:	6f 57       	subi	r22, 0x7F	; 127
    35fc:	7b 4f       	sbci	r23, 0xFB	; 251
		sendCommand("AT+MORING=1",true);
		copyPhoneFromSimToRAM();
	}
	bool sendSMS(const char *ptr,int index, const char *massage2 = NULL, const char *massage3 = NULL, const char *massage4 = NULL, const char *massage5 = NULL){
		char command[25];
		if (*getPhoneNumber(index) == 0)
    35fe:	fb 01       	movw	r30, r22
    3600:	80 81       	ld	r24, Z
    3602:	88 23       	and	r24, r24
    3604:	09 f4       	brne	.+2      	; 0x3608 <main+0x14bc>
    3606:	12 c7       	rjmp	.+3620   	; 0x442c <main+0x22e0>
    3608:	ff ef       	ldi	r31, 0xFF	; 255
    360a:	20 e7       	ldi	r18, 0x70	; 112
    360c:	32 e0       	ldi	r19, 0x02	; 2
    360e:	f1 50       	subi	r31, 0x01	; 1
    3610:	20 40       	sbci	r18, 0x00	; 0
    3612:	30 40       	sbci	r19, 0x00	; 0
    3614:	e1 f7       	brne	.-8      	; 0x360e <main+0x14c2>
    3616:	00 c0       	rjmp	.+0      	; 0x3618 <main+0x14cc>
    3618:	00 00       	nop
		{
			return false;
		}
		_delay_ms(50);
		strcpy(command,"AT+CMGS=");											//copy command
    361a:	89 e0       	ldi	r24, 0x09	; 9
    361c:	ed e8       	ldi	r30, 0x8D	; 141
    361e:	f1 e0       	ldi	r31, 0x01	; 1
    3620:	d5 01       	movw	r26, r10
    3622:	01 90       	ld	r0, Z+
    3624:	0d 92       	st	X+, r0
    3626:	8a 95       	dec	r24
    3628:	e1 f7       	brne	.-8      	; 0x3622 <main+0x14d6>
		strcpy(command+9,getPhoneNumber(index));							//copy phone number
    362a:	c5 01       	movw	r24, r10
    362c:	09 96       	adiw	r24, 0x09	; 9
    362e:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
		command[8] = command[19] = '"';										//set <"> for phone number
    3632:	82 e2       	ldi	r24, 0x22	; 34
    3634:	d5 01       	movw	r26, r10
    3636:	53 96       	adiw	r26, 0x13	; 19
    3638:	8c 93       	st	X, r24
    363a:	53 97       	sbiw	r26, 0x13	; 19
    363c:	18 96       	adiw	r26, 0x08	; 8
    363e:	8c 93       	st	X, r24
    3640:	18 97       	sbiw	r26, 0x08	; 8
		command[20] = 0;													//close number with <">, run over the dummy char
    3642:	54 96       	adiw	r26, 0x14	; 20
    3644:	1c 92       	st	X, r1
		
		sendCommand(command,true);
    3646:	41 e0       	ldi	r20, 0x01	; 1
    3648:	b5 01       	movw	r22, r10
    364a:	8d e4       	ldi	r24, 0x4D	; 77
    364c:	94 e0       	ldi	r25, 0x04	; 4
    364e:	0e 94 d7 08 	call	0x11ae	; 0x11ae <_ZN3SMS11sendCommandEPKcb>
		
		gsmSMS.UARTstring(ptr,0);
    3652:	40 e0       	ldi	r20, 0x00	; 0
    3654:	ca 51       	subi	r28, 0x1A	; 26
    3656:	df 4f       	sbci	r29, 0xFF	; 255
    3658:	68 81       	ld	r22, Y
    365a:	c6 5e       	subi	r28, 0xE6	; 230
    365c:	d0 40       	sbci	r29, 0x00	; 0
    365e:	c9 51       	subi	r28, 0x19	; 25
    3660:	df 4f       	sbci	r29, 0xFF	; 255
    3662:	78 81       	ld	r23, Y
    3664:	c7 5e       	subi	r28, 0xE7	; 231
    3666:	d0 40       	sbci	r29, 0x00	; 0
    3668:	8d e4       	ldi	r24, 0x4D	; 77
    366a:	94 e0       	ldi	r25, 0x04	; 4
    366c:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		if (massage5 != NULL)
		{
			gsmSMS.UARTsend(13);
			gsmSMS.UARTstring(massage5,0);
		}
		gsmSMS.UARTsend(26);
    3670:	6a e1       	ldi	r22, 0x1A	; 26
    3672:	8d e4       	ldi	r24, 0x4D	; 77
    3674:	94 e0       	ldi	r25, 0x04	; 4
    3676:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		gsmSMS.UARTsend(13);
    367a:	6d e0       	ldi	r22, 0x0D	; 13
    367c:	8d e4       	ldi	r24, 0x4D	; 77
    367e:	94 e0       	ldi	r25, 0x04	; 4
    3680:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		_startTimeCounterSMSreceived = true;
    3684:	81 e0       	ldi	r24, 0x01	; 1
    3686:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <top+0x107>
    368a:	d0 c6       	rjmp	.+3488   	; 0x442c <main+0x22e0>
	}
	bool delPhoneNum(char index){
		if(index >= '1' && index <= '3')
		{
			char arr[14];
			strcpy(arr,"AT+CPBW=X,,,");
    368c:	9d e0       	ldi	r25, 0x0D	; 13
    368e:	e5 e9       	ldi	r30, 0x95	; 149
    3690:	f2 e0       	ldi	r31, 0x02	; 2
    3692:	d4 01       	movw	r26, r8
    3694:	01 90       	ld	r0, Z+
    3696:	0d 92       	st	X+, r0
    3698:	9a 95       	dec	r25
    369a:	e1 f7       	brne	.-8      	; 0x3694 <main+0x1548>
			arr[8] = index;
    369c:	f4 01       	movw	r30, r8
    369e:	80 87       	std	Z+8, r24	; 0x08
	char _1minConterSMSreceived, _10secRestetGSMdelay , _GSMerrorCounter;
	bool _newData, _startTimeCounterSMSreceived, _startTimeCounterGSMreset;
	int _newDataIndex;
	bool sendCommand(const char ptr[], bool checkAck = false){
		int condition;
		gsmSMS.UARTstring(ptr,0);
    36a0:	40 e0       	ldi	r20, 0x00	; 0
    36a2:	b4 01       	movw	r22, r8
    36a4:	8d e4       	ldi	r24, 0x4D	; 77
    36a6:	94 e0       	ldi	r25, 0x04	; 4
    36a8:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		gsmSMS.UARTsend(13);
    36ac:	6d e0       	ldi	r22, 0x0D	; 13
    36ae:	8d e4       	ldi	r24, 0x4D	; 77
    36b0:	94 e0       	ldi	r25, 0x04	; 4
    36b2:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		if (checkAck)
		{
			char arr[15] = {0};
    36b6:	8f e0       	ldi	r24, 0x0F	; 15
    36b8:	d5 01       	movw	r26, r10
    36ba:	1d 92       	st	X+, r1
    36bc:	8a 95       	dec	r24
    36be:	e9 f7       	brne	.-6      	; 0x36ba <main+0x156e>
			RXinterruptDisable();
    36c0:	e1 ec       	ldi	r30, 0xC1	; 193
    36c2:	f0 e0       	ldi	r31, 0x00	; 0
    36c4:	80 81       	ld	r24, Z
    36c6:	8f 77       	andi	r24, 0x7F	; 127
    36c8:	80 83       	st	Z, r24
    36ca:	65 01       	movw	r12, r10
			return false;
		}
		return 0;
	}
	int checkForACkPacket(char getData[], int arrSize){
		int i = 0;
    36cc:	00 e0       	ldi	r16, 0x00	; 0
    36ce:	10 e0       	ldi	r17, 0x00	; 0
		char data = 0;
		
		do 
		{
			data = gsmSMS.UARTreceive();
    36d0:	8d e4       	ldi	r24, 0x4D	; 77
    36d2:	94 e0       	ldi	r25, 0x04	; 4
    36d4:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <_ZN4Uart11UARTreceiveEv>
			getData[i++] = data;
    36d8:	0f 5f       	subi	r16, 0xFF	; 255
    36da:	1f 4f       	sbci	r17, 0xFF	; 255
    36dc:	f6 01       	movw	r30, r12
    36de:	81 93       	st	Z+, r24
    36e0:	6f 01       	movw	r12, r30
		}while(gsmSMS.checkForData() && i < arrSize);
    36e2:	8d e4       	ldi	r24, 0x4D	; 77
    36e4:	94 e0       	ldi	r25, 0x04	; 4
    36e6:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <_ZN4Uart12checkForDataEv>
    36ea:	88 23       	and	r24, r24
    36ec:	11 f4       	brne	.+4      	; 0x36f2 <main+0x15a6>
    36ee:	0c 94 93 24 	jmp	0x4926	; 0x4926 <main+0x27da>
    36f2:	0e 30       	cpi	r16, 0x0E	; 14
    36f4:	11 05       	cpc	r17, r1
    36f6:	61 f7       	brne	.-40     	; 0x36d0 <main+0x1584>
    36f8:	0c 94 7d 26 	jmp	0x4cfa	; 0x4cfa <main+0x2bae>
    36fc:	98 01       	movw	r18, r16
    36fe:	11 23       	and	r17, r17
    3700:	14 f4       	brge	.+4      	; 0x3706 <main+0x15ba>
    3702:	20 e0       	ldi	r18, 0x00	; 0
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	33 27       	eor	r19, r19
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    3708:	12 16       	cp	r1, r18
    370a:	13 06       	cpc	r1, r19
    370c:	0c f0       	brlt	.+2      	; 0x3710 <main+0x15c4>
    370e:	4c c0       	rjmp	.+152    	; 0x37a8 <main+0x165c>
    3710:	02 c0       	rjmp	.+4      	; 0x3716 <main+0x15ca>
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
			if (*arr != 0)
    3712:	2e e0       	ldi	r18, 0x0E	; 14
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	61 e0       	ldi	r22, 0x01	; 1
    3718:	80 e0       	ldi	r24, 0x00	; 0
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	47 e3       	ldi	r20, 0x37	; 55
    371e:	51 e0       	ldi	r21, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    3720:	00 e0       	ldi	r16, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    3722:	f5 01       	movw	r30, r10
    3724:	e8 0f       	add	r30, r24
    3726:	f9 1f       	adc	r31, r25
    3728:	70 81       	ld	r23, Z
    372a:	75 34       	cpi	r23, 0x45	; 69
    372c:	61 f4       	brne	.+24     	; 0x3746 <main+0x15fa>
    372e:	a2 e3       	ldi	r26, 0x32	; 50
    3730:	b1 e0       	ldi	r27, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    3732:	11 91       	ld	r17, Z+
    3734:	7d 91       	ld	r23, X+
    3736:	17 13       	cpse	r17, r23
					{
						status = false;
    3738:	60 2f       	mov	r22, r16
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    373a:	4a 17       	cp	r20, r26
    373c:	5b 07       	cpc	r21, r27
    373e:	c9 f7       	brne	.-14     	; 0x3732 <main+0x15e6>
    3740:	05 96       	adiw	r24, 0x05	; 5
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    3742:	61 11       	cpse	r22, r1
    3744:	33 c0       	rjmp	.+102    	; 0x37ac <main+0x1660>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    3746:	01 96       	adiw	r24, 0x01	; 1
    3748:	82 17       	cp	r24, r18
    374a:	93 07       	cpc	r25, r19
    374c:	54 f3       	brlt	.-44     	; 0x3722 <main+0x15d6>
    374e:	51 e0       	ldi	r21, 0x01	; 1
    3750:	80 e0       	ldi	r24, 0x00	; 0
    3752:	90 e0       	ldi	r25, 0x00	; 0
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    3754:	60 e0       	ldi	r22, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    3756:	f5 01       	movw	r30, r10
    3758:	e8 0f       	add	r30, r24
    375a:	f9 1f       	adc	r31, r25
    375c:	40 81       	ld	r20, Z
    375e:	4f 34       	cpi	r20, 0x4F	; 79
    3760:	71 f4       	brne	.+28     	; 0x377e <main+0x1632>
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    3762:	e6 e7       	ldi	r30, 0x76	; 118
    3764:	f0 e0       	ldi	r31, 0x00	; 0
    3766:	ec 0f       	add	r30, r28
    3768:	fd 1f       	adc	r31, r29
    376a:	e8 0f       	add	r30, r24
    376c:	f9 1f       	adc	r31, r25
    376e:	40 81       	ld	r20, Z
    3770:	4b 34       	cpi	r20, 0x4B	; 75
    3772:	11 f0       	breq	.+4      	; 0x3778 <main+0x162c>
    3774:	0c 94 e7 25 	jmp	0x4bce	; 0x4bce <main+0x2a82>
    3778:	02 96       	adiw	r24, 0x02	; 2
					{
						status = false;
					}
				}
				if (status)
    377a:	51 11       	cpse	r21, r1
    377c:	18 c0       	rjmp	.+48     	; 0x37ae <main+0x1662>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    377e:	01 96       	adiw	r24, 0x01	; 1
    3780:	82 17       	cp	r24, r18
    3782:	93 07       	cpc	r25, r19
    3784:	44 f3       	brlt	.-48     	; 0x3756 <main+0x160a>
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    3786:	d5 01       	movw	r26, r10
    3788:	8c 91       	ld	r24, X
    378a:	8e 33       	cpi	r24, 0x3E	; 62
    378c:	81 f0       	breq	.+32     	; 0x37ae <main+0x1662>
    378e:	f5 01       	movw	r30, r10
    3790:	31 96       	adiw	r30, 0x01	; 1
    3792:	2a 0d       	add	r18, r10
    3794:	3b 1d       	adc	r19, r11
    3796:	03 c0       	rjmp	.+6      	; 0x379e <main+0x1652>
    3798:	81 91       	ld	r24, Z+
    379a:	8e 33       	cpi	r24, 0x3E	; 62
    379c:	41 f0       	breq	.+16     	; 0x37ae <main+0x1662>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    379e:	2e 17       	cp	r18, r30
    37a0:	3f 07       	cpc	r19, r31
    37a2:	d1 f7       	brne	.-12     	; 0x3798 <main+0x164c>
			if (arr[i] == word)
			{
				return true;
			}
		}
		return false;
    37a4:	71 2c       	mov	r7, r1
    37a6:	03 c0       	rjmp	.+6      	; 0x37ae <main+0x1662>
    37a8:	71 2c       	mov	r7, r1
    37aa:	01 c0       	rjmp	.+2      	; 0x37ae <main+0x1662>
			RXinterruptEnable();
			if (*arr != 0)
			{
				if (compWordInArr(arr,"ERROR",5,condition))
				{
					return false;
    37ac:	71 2c       	mov	r7, r1
			}
			case  5:
			{
				if (*(ptr+14) > '0' && *(ptr+14) < '4')
				{
					if (delPhoneNum(*(ptr+14)))
    37ae:	77 20       	and	r7, r7
    37b0:	09 f4       	brne	.+2      	; 0x37b4 <main+0x1668>
    37b2:	fd c0       	rjmp	.+506    	; 0x39ae <main+0x1862>
			return sendCommand(arr,true);
		}
		return false;
	}
	void copyPhoneFromSimToRAM(){
		char phoneNum[15] = {0};
    37b4:	fe 01       	movw	r30, r28
    37b6:	ea 53       	subi	r30, 0x3A	; 58
    37b8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ba:	8f e0       	ldi	r24, 0x0F	; 15
    37bc:	df 01       	movw	r26, r30
    37be:	1d 92       	st	X+, r1
    37c0:	8a 95       	dec	r24
    37c2:	e9 f7       	brne	.-6      	; 0x37be <main+0x1672>
    37c4:	ec e8       	ldi	r30, 0x8C	; 140
    37c6:	f4 e0       	ldi	r31, 0x04	; 4
    37c8:	cc 51       	subi	r28, 0x1C	; 28
    37ca:	df 4f       	sbci	r29, 0xFF	; 255
    37cc:	f9 83       	std	Y+1, r31	; 0x01
    37ce:	e8 83       	st	Y, r30
    37d0:	c4 5e       	subi	r28, 0xE4	; 228
    37d2:	d0 40       	sbci	r29, 0x00	; 0
    37d4:	f1 e3       	ldi	r31, 0x31	; 49
    37d6:	ce 51       	subi	r28, 0x1E	; 30
    37d8:	df 4f       	sbci	r29, 0xFF	; 255
    37da:	f8 83       	st	Y, r31
    37dc:	c2 5e       	subi	r28, 0xE2	; 226
    37de:	d0 40       	sbci	r29, 0x00	; 0
		return newData;
	}
	char *getPhoneBookNumber(char phoneNum[],char index){
		char arrCommand[15] ={"AT+CPBR=X\r\n"};
		char dataIn[50] = {0};
		RXinterruptDisable();
    37e0:	0f 2e       	mov	r0, r31
    37e2:	f1 ec       	ldi	r31, 0xC1	; 193
    37e4:	6f 2e       	mov	r6, r31
    37e6:	71 2c       	mov	r7, r1
    37e8:	f0 2d       	mov	r31, r0
		bool newData = _newData;
		_newData = false;
		return newData;
	}
	char *getPhoneBookNumber(char phoneNum[],char index){
		char arrCommand[15] ={"AT+CPBR=X\r\n"};
    37ea:	8c e0       	ldi	r24, 0x0C	; 12
    37ec:	e0 e0       	ldi	r30, 0x00	; 0
    37ee:	f1 e0       	ldi	r31, 0x01	; 1
    37f0:	d4 01       	movw	r26, r8
    37f2:	01 90       	ld	r0, Z+
    37f4:	0d 92       	st	X+, r0
    37f6:	8a 95       	dec	r24
    37f8:	e1 f7       	brne	.-8      	; 0x37f2 <main+0x16a6>
    37fa:	c8 51       	subi	r28, 0x18	; 24
    37fc:	df 4f       	sbci	r29, 0xFF	; 255
    37fe:	a8 81       	ld	r26, Y
    3800:	b9 81       	ldd	r27, Y+1	; 0x01
    3802:	c8 5e       	subi	r28, 0xE8	; 232
    3804:	d0 40       	sbci	r29, 0x00	; 0
    3806:	e3 e0       	ldi	r30, 0x03	; 3
    3808:	1d 92       	st	X+, r1
    380a:	ea 95       	dec	r30
    380c:	e9 f7       	brne	.-6      	; 0x3808 <main+0x16bc>
		char dataIn[50] = {0};
    380e:	d5 01       	movw	r26, r10
    3810:	e2 e3       	ldi	r30, 0x32	; 50
    3812:	1d 92       	st	X+, r1
    3814:	ea 95       	dec	r30
    3816:	e9 f7       	brne	.-6      	; 0x3812 <main+0x16c6>
		RXinterruptDisable();
    3818:	d3 01       	movw	r26, r6
    381a:	8c 91       	ld	r24, X
    381c:	8f 77       	andi	r24, 0x7F	; 127
    381e:	8c 93       	st	X, r24
		arrCommand[8] = index + '0';
    3820:	ce 51       	subi	r28, 0x1E	; 30
    3822:	df 4f       	sbci	r29, 0xFF	; 255
    3824:	28 81       	ld	r18, Y
    3826:	c2 5e       	subi	r28, 0xE2	; 226
    3828:	d0 40       	sbci	r29, 0x00	; 0
    382a:	f4 01       	movw	r30, r8
    382c:	20 87       	std	Z+8, r18	; 0x08
		gsmSMS.UARTstring(arrCommand,0);	
    382e:	40 e0       	ldi	r20, 0x00	; 0
    3830:	b4 01       	movw	r22, r8
    3832:	8d e4       	ldi	r24, 0x4D	; 77
    3834:	94 e0       	ldi	r25, 0x04	; 4
    3836:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
    383a:	65 01       	movw	r12, r10
			return false;
		}
		return 0;
	}
	int checkForACkPacket(char getData[], int arrSize){
		int i = 0;
    383c:	00 e0       	ldi	r16, 0x00	; 0
    383e:	10 e0       	ldi	r17, 0x00	; 0
		char data = 0;
		
		do 
		{
			data = gsmSMS.UARTreceive();
    3840:	8d e4       	ldi	r24, 0x4D	; 77
    3842:	94 e0       	ldi	r25, 0x04	; 4
    3844:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <_ZN4Uart11UARTreceiveEv>
			getData[i++] = data;
    3848:	0f 5f       	subi	r16, 0xFF	; 255
    384a:	1f 4f       	sbci	r17, 0xFF	; 255
    384c:	d6 01       	movw	r26, r12
    384e:	8d 93       	st	X+, r24
    3850:	6d 01       	movw	r12, r26
		}while(gsmSMS.checkForData() && i < arrSize);
    3852:	8d e4       	ldi	r24, 0x4D	; 77
    3854:	94 e0       	ldi	r25, 0x04	; 4
    3856:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <_ZN4Uart12checkForDataEv>
    385a:	88 23       	and	r24, r24
    385c:	11 f4       	brne	.+4      	; 0x3862 <main+0x1716>
    385e:	0c 94 a2 24 	jmp	0x4944	; 0x4944 <main+0x27f8>
    3862:	01 33       	cpi	r16, 0x31	; 49
    3864:	11 05       	cpc	r17, r1
    3866:	61 f7       	brne	.-40     	; 0x3840 <main+0x16f4>
    3868:	0c 94 a2 24 	jmp	0x4944	; 0x4944 <main+0x27f8>
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    386c:	81 91       	ld	r24, Z+
    386e:	82 32       	cpi	r24, 0x22	; 34
    3870:	11 f4       	brne	.+4      	; 0x3876 <main+0x172a>
    3872:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <main+0x2818>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    3876:	2e 16       	cp	r2, r30
    3878:	3f 06       	cpc	r3, r31
    387a:	c1 f7       	brne	.-16     	; 0x386c <main+0x1720>
    387c:	24 c0       	rjmp	.+72     	; 0x38c6 <main+0x177a>
		{
			if (arr[i] == word)
    387e:	81 91       	ld	r24, Z+
    3880:	82 32       	cpi	r24, 0x22	; 34
    3882:	21 f0       	breq	.+8      	; 0x388c <main+0x1740>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    3884:	2e 16       	cp	r2, r30
    3886:	3f 06       	cpc	r3, r31
    3888:	d1 f7       	brne	.-12     	; 0x387e <main+0x1732>
    388a:	1d c0       	rjmp	.+58     	; 0x38c6 <main+0x177a>
		checkForACkPacket(dataIn, 49);
		RXinterruptEnable();
		if (compWordInArr(dataIn,'"',1,49) && compWordInArr(dataIn+15,'"',1,34))
		{
			int counter = 0;
			while(dataIn[counter] != '0' && counter < 15)
    388c:	f5 01       	movw	r30, r10
    388e:	80 81       	ld	r24, Z
    3890:	80 33       	cpi	r24, 0x30	; 48
    3892:	69 f0       	breq	.+26     	; 0x38ae <main+0x1762>
    3894:	31 96       	adiw	r30, 0x01	; 1
    3896:	60 e0       	ldi	r22, 0x00	; 0
    3898:	70 e0       	ldi	r23, 0x00	; 0
    389a:	03 c0       	rjmp	.+6      	; 0x38a2 <main+0x1756>
    389c:	6f 30       	cpi	r22, 0x0F	; 15
    389e:	71 05       	cpc	r23, r1
    38a0:	41 f0       	breq	.+16     	; 0x38b2 <main+0x1766>
			{
				counter++;
    38a2:	6f 5f       	subi	r22, 0xFF	; 255
    38a4:	7f 4f       	sbci	r23, 0xFF	; 255
		checkForACkPacket(dataIn, 49);
		RXinterruptEnable();
		if (compWordInArr(dataIn,'"',1,49) && compWordInArr(dataIn+15,'"',1,34))
		{
			int counter = 0;
			while(dataIn[counter] != '0' && counter < 15)
    38a6:	81 91       	ld	r24, Z+
    38a8:	80 33       	cpi	r24, 0x30	; 48
    38aa:	c1 f7       	brne	.-16     	; 0x389c <main+0x1750>
    38ac:	02 c0       	rjmp	.+4      	; 0x38b2 <main+0x1766>
    38ae:	60 e0       	ldi	r22, 0x00	; 0
    38b0:	70 e0       	ldi	r23, 0x00	; 0
			{
				counter++;
			}
			dataIn[counter+10] = '\0';
    38b2:	6a 0d       	add	r22, r10
    38b4:	7b 1d       	adc	r23, r11
    38b6:	db 01       	movw	r26, r22
    38b8:	1a 96       	adiw	r26, 0x0a	; 10
    38ba:	1c 92       	st	X, r1
			strcpy(phoneNum,dataIn+counter);
    38bc:	ce 01       	movw	r24, r28
    38be:	8a 53       	subi	r24, 0x3A	; 58
    38c0:	9f 4f       	sbci	r25, 0xFF	; 255
    38c2:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
	void copyPhoneFromSimToRAM(){
		char phoneNum[15] = {0};
		for(int i = 1; i < 4; i++)
		{
			getPhoneBookNumber(phoneNum,i);
			if (*phoneNum != 0)
    38c6:	ca 53       	subi	r28, 0x3A	; 58
    38c8:	df 4f       	sbci	r29, 0xFF	; 255
    38ca:	88 81       	ld	r24, Y
    38cc:	c6 5c       	subi	r28, 0xC6	; 198
    38ce:	d0 40       	sbci	r29, 0x00	; 0
    38d0:	88 23       	and	r24, r24
    38d2:	59 f0       	breq	.+22     	; 0x38ea <main+0x179e>
			{
				strcpy(_phoneBook[i],phoneNum);
    38d4:	be 01       	movw	r22, r28
    38d6:	6a 53       	subi	r22, 0x3A	; 58
    38d8:	7f 4f       	sbci	r23, 0xFF	; 255
    38da:	cc 51       	subi	r28, 0x1C	; 28
    38dc:	df 4f       	sbci	r29, 0xFF	; 255
    38de:	88 81       	ld	r24, Y
    38e0:	99 81       	ldd	r25, Y+1	; 0x01
    38e2:	c4 5e       	subi	r28, 0xE4	; 228
    38e4:	d0 40       	sbci	r29, 0x00	; 0
    38e6:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
    38ea:	ce 51       	subi	r28, 0x1E	; 30
    38ec:	df 4f       	sbci	r29, 0xFF	; 255
    38ee:	b8 81       	ld	r27, Y
    38f0:	c2 5e       	subi	r28, 0xE2	; 226
    38f2:	d0 40       	sbci	r29, 0x00	; 0
    38f4:	bf 5f       	subi	r27, 0xFF	; 255
    38f6:	ce 51       	subi	r28, 0x1E	; 30
    38f8:	df 4f       	sbci	r29, 0xFF	; 255
    38fa:	b8 83       	st	Y, r27
    38fc:	c2 5e       	subi	r28, 0xE2	; 226
    38fe:	d0 40       	sbci	r29, 0x00	; 0
    3900:	cc 51       	subi	r28, 0x1C	; 28
    3902:	df 4f       	sbci	r29, 0xFF	; 255
    3904:	e8 81       	ld	r30, Y
    3906:	f9 81       	ldd	r31, Y+1	; 0x01
    3908:	c4 5e       	subi	r28, 0xE4	; 228
    390a:	d0 40       	sbci	r29, 0x00	; 0
    390c:	3b 96       	adiw	r30, 0x0b	; 11
    390e:	cc 51       	subi	r28, 0x1C	; 28
    3910:	df 4f       	sbci	r29, 0xFF	; 255
    3912:	f9 83       	std	Y+1, r31	; 0x01
    3914:	e8 83       	st	Y, r30
    3916:	c4 5e       	subi	r28, 0xE4	; 228
    3918:	d0 40       	sbci	r29, 0x00	; 0
		}
		return false;
	}
	void copyPhoneFromSimToRAM(){
		char phoneNum[15] = {0};
		for(int i = 1; i < 4; i++)
    391a:	b4 33       	cpi	r27, 0x34	; 52
    391c:	09 f0       	breq	.+2      	; 0x3920 <main+0x17d4>
    391e:	65 cf       	rjmp	.-310    	; 0x37ea <main+0x169e>
			}
		}
		return result;
	}
	char *getPhoneNumber(int index){
		return _phoneBook[index];}
    3920:	60 91 e2 06 	lds	r22, 0x06E2	; 0x8006e2 <top+0x295>
    3924:	fb e0       	ldi	r31, 0x0B	; 11
    3926:	6f 9f       	mul	r22, r31
    3928:	b0 01       	movw	r22, r0
    392a:	11 24       	eor	r1, r1
    392c:	6f 57       	subi	r22, 0x7F	; 127
    392e:	7b 4f       	sbci	r23, 0xFB	; 251
		sendCommand("AT+MORING=1",true);
		copyPhoneFromSimToRAM();
	}
	bool sendSMS(const char *ptr,int index, const char *massage2 = NULL, const char *massage3 = NULL, const char *massage4 = NULL, const char *massage5 = NULL){
		char command[25];
		if (*getPhoneNumber(index) == 0)
    3930:	db 01       	movw	r26, r22
    3932:	8c 91       	ld	r24, X
    3934:	88 23       	and	r24, r24
    3936:	09 f4       	brne	.+2      	; 0x393a <main+0x17ee>
    3938:	79 c5       	rjmp	.+2802   	; 0x442c <main+0x22e0>
    393a:	bf ef       	ldi	r27, 0xFF	; 255
    393c:	e0 e7       	ldi	r30, 0x70	; 112
    393e:	f2 e0       	ldi	r31, 0x02	; 2
    3940:	b1 50       	subi	r27, 0x01	; 1
    3942:	e0 40       	sbci	r30, 0x00	; 0
    3944:	f0 40       	sbci	r31, 0x00	; 0
    3946:	e1 f7       	brne	.-8      	; 0x3940 <main+0x17f4>
    3948:	00 c0       	rjmp	.+0      	; 0x394a <main+0x17fe>
    394a:	00 00       	nop
		{
			return false;
		}
		_delay_ms(50);
		strcpy(command,"AT+CMGS=");											//copy command
    394c:	89 e0       	ldi	r24, 0x09	; 9
    394e:	ed e8       	ldi	r30, 0x8D	; 141
    3950:	f1 e0       	ldi	r31, 0x01	; 1
    3952:	d5 01       	movw	r26, r10
    3954:	01 90       	ld	r0, Z+
    3956:	0d 92       	st	X+, r0
    3958:	8a 95       	dec	r24
    395a:	e1 f7       	brne	.-8      	; 0x3954 <main+0x1808>
		strcpy(command+9,getPhoneNumber(index));							//copy phone number
    395c:	c5 01       	movw	r24, r10
    395e:	09 96       	adiw	r24, 0x09	; 9
    3960:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
		command[8] = command[19] = '"';										//set <"> for phone number
    3964:	82 e2       	ldi	r24, 0x22	; 34
    3966:	d5 01       	movw	r26, r10
    3968:	53 96       	adiw	r26, 0x13	; 19
    396a:	8c 93       	st	X, r24
    396c:	53 97       	sbiw	r26, 0x13	; 19
    396e:	18 96       	adiw	r26, 0x08	; 8
    3970:	8c 93       	st	X, r24
    3972:	18 97       	sbiw	r26, 0x08	; 8
		command[20] = 0;													//close number with <">, run over the dummy char
    3974:	54 96       	adiw	r26, 0x14	; 20
    3976:	1c 92       	st	X, r1
		
		sendCommand(command,true);
    3978:	41 e0       	ldi	r20, 0x01	; 1
    397a:	b5 01       	movw	r22, r10
    397c:	8d e4       	ldi	r24, 0x4D	; 77
    397e:	94 e0       	ldi	r25, 0x04	; 4
    3980:	0e 94 d7 08 	call	0x11ae	; 0x11ae <_ZN3SMS11sendCommandEPKcb>
		
		gsmSMS.UARTstring(ptr,0);
    3984:	40 e0       	ldi	r20, 0x00	; 0
    3986:	62 ea       	ldi	r22, 0xA2	; 162
    3988:	72 e0       	ldi	r23, 0x02	; 2
    398a:	8d e4       	ldi	r24, 0x4D	; 77
    398c:	94 e0       	ldi	r25, 0x04	; 4
    398e:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		if (massage5 != NULL)
		{
			gsmSMS.UARTsend(13);
			gsmSMS.UARTstring(massage5,0);
		}
		gsmSMS.UARTsend(26);
    3992:	6a e1       	ldi	r22, 0x1A	; 26
    3994:	8d e4       	ldi	r24, 0x4D	; 77
    3996:	94 e0       	ldi	r25, 0x04	; 4
    3998:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		gsmSMS.UARTsend(13);
    399c:	6d e0       	ldi	r22, 0x0D	; 13
    399e:	8d e4       	ldi	r24, 0x4D	; 77
    39a0:	94 e0       	ldi	r25, 0x04	; 4
    39a2:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		_startTimeCounterSMSreceived = true;
    39a6:	81 e0       	ldi	r24, 0x01	; 1
    39a8:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <top+0x107>
    39ac:	3f c5       	rjmp	.+2686   	; 0x442c <main+0x22e0>
			}
		}
		return result;
	}
	char *getPhoneNumber(int index){
		return _phoneBook[index];}
    39ae:	60 91 e2 06 	lds	r22, 0x06E2	; 0x8006e2 <top+0x295>
    39b2:	bb e0       	ldi	r27, 0x0B	; 11
    39b4:	6b 9f       	mul	r22, r27
    39b6:	b0 01       	movw	r22, r0
    39b8:	11 24       	eor	r1, r1
    39ba:	6f 57       	subi	r22, 0x7F	; 127
    39bc:	7b 4f       	sbci	r23, 0xFB	; 251
		sendCommand("AT+MORING=1",true);
		copyPhoneFromSimToRAM();
	}
	bool sendSMS(const char *ptr,int index, const char *massage2 = NULL, const char *massage3 = NULL, const char *massage4 = NULL, const char *massage5 = NULL){
		char command[25];
		if (*getPhoneNumber(index) == 0)
    39be:	fb 01       	movw	r30, r22
    39c0:	80 81       	ld	r24, Z
    39c2:	88 23       	and	r24, r24
    39c4:	09 f4       	brne	.+2      	; 0x39c8 <main+0x187c>
    39c6:	32 c5       	rjmp	.+2660   	; 0x442c <main+0x22e0>
    39c8:	ff ef       	ldi	r31, 0xFF	; 255
    39ca:	20 e7       	ldi	r18, 0x70	; 112
    39cc:	32 e0       	ldi	r19, 0x02	; 2
    39ce:	f1 50       	subi	r31, 0x01	; 1
    39d0:	20 40       	sbci	r18, 0x00	; 0
    39d2:	30 40       	sbci	r19, 0x00	; 0
    39d4:	e1 f7       	brne	.-8      	; 0x39ce <main+0x1882>
    39d6:	00 c0       	rjmp	.+0      	; 0x39d8 <main+0x188c>
    39d8:	00 00       	nop
		{
			return false;
		}
		_delay_ms(50);
		strcpy(command,"AT+CMGS=");											//copy command
    39da:	89 e0       	ldi	r24, 0x09	; 9
    39dc:	ed e8       	ldi	r30, 0x8D	; 141
    39de:	f1 e0       	ldi	r31, 0x01	; 1
    39e0:	d5 01       	movw	r26, r10
    39e2:	01 90       	ld	r0, Z+
    39e4:	0d 92       	st	X+, r0
    39e6:	8a 95       	dec	r24
    39e8:	e1 f7       	brne	.-8      	; 0x39e2 <main+0x1896>
		strcpy(command+9,getPhoneNumber(index));							//copy phone number
    39ea:	c5 01       	movw	r24, r10
    39ec:	09 96       	adiw	r24, 0x09	; 9
    39ee:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
		command[8] = command[19] = '"';										//set <"> for phone number
    39f2:	82 e2       	ldi	r24, 0x22	; 34
    39f4:	d5 01       	movw	r26, r10
    39f6:	53 96       	adiw	r26, 0x13	; 19
    39f8:	8c 93       	st	X, r24
    39fa:	53 97       	sbiw	r26, 0x13	; 19
    39fc:	18 96       	adiw	r26, 0x08	; 8
    39fe:	8c 93       	st	X, r24
    3a00:	18 97       	sbiw	r26, 0x08	; 8
		command[20] = 0;													//close number with <">, run over the dummy char
    3a02:	54 96       	adiw	r26, 0x14	; 20
    3a04:	1c 92       	st	X, r1
		
		sendCommand(command,true);
    3a06:	41 e0       	ldi	r20, 0x01	; 1
    3a08:	b5 01       	movw	r22, r10
    3a0a:	8d e4       	ldi	r24, 0x4D	; 77
    3a0c:	94 e0       	ldi	r25, 0x04	; 4
    3a0e:	0e 94 d7 08 	call	0x11ae	; 0x11ae <_ZN3SMS11sendCommandEPKcb>
		
		gsmSMS.UARTstring(ptr,0);
    3a12:	40 e0       	ldi	r20, 0x00	; 0
    3a14:	6a e5       	ldi	r22, 0x5A	; 90
    3a16:	72 e0       	ldi	r23, 0x02	; 2
    3a18:	8d e4       	ldi	r24, 0x4D	; 77
    3a1a:	94 e0       	ldi	r25, 0x04	; 4
    3a1c:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		if (massage5 != NULL)
		{
			gsmSMS.UARTsend(13);
			gsmSMS.UARTstring(massage5,0);
		}
		gsmSMS.UARTsend(26);
    3a20:	6a e1       	ldi	r22, 0x1A	; 26
    3a22:	8d e4       	ldi	r24, 0x4D	; 77
    3a24:	94 e0       	ldi	r25, 0x04	; 4
    3a26:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		gsmSMS.UARTsend(13);
    3a2a:	6d e0       	ldi	r22, 0x0D	; 13
    3a2c:	8d e4       	ldi	r24, 0x4D	; 77
    3a2e:	94 e0       	ldi	r25, 0x04	; 4
    3a30:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		_startTimeCounterSMSreceived = true;
    3a34:	81 e0       	ldi	r24, 0x01	; 1
    3a36:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <top+0x107>
    3a3a:	f8 c4       	rjmp	.+2544   	; 0x442c <main+0x22e0>
			}
		}
		return result;
	}
	char *getPhoneNumber(int index){
		return _phoneBook[index];}
    3a3c:	60 91 e2 06 	lds	r22, 0x06E2	; 0x8006e2 <top+0x295>
    3a40:	bb e0       	ldi	r27, 0x0B	; 11
    3a42:	6b 9f       	mul	r22, r27
    3a44:	b0 01       	movw	r22, r0
    3a46:	11 24       	eor	r1, r1
    3a48:	6f 57       	subi	r22, 0x7F	; 127
    3a4a:	7b 4f       	sbci	r23, 0xFB	; 251
		sendCommand("AT+MORING=1",true);
		copyPhoneFromSimToRAM();
	}
	bool sendSMS(const char *ptr,int index, const char *massage2 = NULL, const char *massage3 = NULL, const char *massage4 = NULL, const char *massage5 = NULL){
		char command[25];
		if (*getPhoneNumber(index) == 0)
    3a4c:	fb 01       	movw	r30, r22
    3a4e:	80 81       	ld	r24, Z
    3a50:	88 23       	and	r24, r24
    3a52:	09 f4       	brne	.+2      	; 0x3a56 <main+0x190a>
    3a54:	eb c4       	rjmp	.+2518   	; 0x442c <main+0x22e0>
    3a56:	ff ef       	ldi	r31, 0xFF	; 255
    3a58:	20 e7       	ldi	r18, 0x70	; 112
    3a5a:	32 e0       	ldi	r19, 0x02	; 2
    3a5c:	f1 50       	subi	r31, 0x01	; 1
    3a5e:	20 40       	sbci	r18, 0x00	; 0
    3a60:	30 40       	sbci	r19, 0x00	; 0
    3a62:	e1 f7       	brne	.-8      	; 0x3a5c <main+0x1910>
    3a64:	00 c0       	rjmp	.+0      	; 0x3a66 <main+0x191a>
    3a66:	00 00       	nop
		{
			return false;
		}
		_delay_ms(50);
		strcpy(command,"AT+CMGS=");											//copy command
    3a68:	89 e0       	ldi	r24, 0x09	; 9
    3a6a:	ed e8       	ldi	r30, 0x8D	; 141
    3a6c:	f1 e0       	ldi	r31, 0x01	; 1
    3a6e:	d5 01       	movw	r26, r10
    3a70:	01 90       	ld	r0, Z+
    3a72:	0d 92       	st	X+, r0
    3a74:	8a 95       	dec	r24
    3a76:	e1 f7       	brne	.-8      	; 0x3a70 <main+0x1924>
		strcpy(command+9,getPhoneNumber(index));							//copy phone number
    3a78:	c5 01       	movw	r24, r10
    3a7a:	09 96       	adiw	r24, 0x09	; 9
    3a7c:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
		command[8] = command[19] = '"';										//set <"> for phone number
    3a80:	82 e2       	ldi	r24, 0x22	; 34
    3a82:	d5 01       	movw	r26, r10
    3a84:	53 96       	adiw	r26, 0x13	; 19
    3a86:	8c 93       	st	X, r24
    3a88:	53 97       	sbiw	r26, 0x13	; 19
    3a8a:	18 96       	adiw	r26, 0x08	; 8
    3a8c:	8c 93       	st	X, r24
    3a8e:	18 97       	sbiw	r26, 0x08	; 8
		command[20] = 0;													//close number with <">, run over the dummy char
    3a90:	54 96       	adiw	r26, 0x14	; 20
    3a92:	1c 92       	st	X, r1
		
		sendCommand(command,true);
    3a94:	41 e0       	ldi	r20, 0x01	; 1
    3a96:	b5 01       	movw	r22, r10
    3a98:	8d e4       	ldi	r24, 0x4D	; 77
    3a9a:	94 e0       	ldi	r25, 0x04	; 4
    3a9c:	0e 94 d7 08 	call	0x11ae	; 0x11ae <_ZN3SMS11sendCommandEPKcb>
		
		gsmSMS.UARTstring(ptr,0);
    3aa0:	40 e0       	ldi	r20, 0x00	; 0
    3aa2:	62 e3       	ldi	r22, 0x32	; 50
    3aa4:	71 e0       	ldi	r23, 0x01	; 1
    3aa6:	8d e4       	ldi	r24, 0x4D	; 77
    3aa8:	94 e0       	ldi	r25, 0x04	; 4
    3aaa:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		if (massage5 != NULL)
		{
			gsmSMS.UARTsend(13);
			gsmSMS.UARTstring(massage5,0);
		}
		gsmSMS.UARTsend(26);
    3aae:	6a e1       	ldi	r22, 0x1A	; 26
    3ab0:	8d e4       	ldi	r24, 0x4D	; 77
    3ab2:	94 e0       	ldi	r25, 0x04	; 4
    3ab4:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		gsmSMS.UARTsend(13);
    3ab8:	6d e0       	ldi	r22, 0x0D	; 13
    3aba:	8d e4       	ldi	r24, 0x4D	; 77
    3abc:	94 e0       	ldi	r25, 0x04	; 4
    3abe:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		_startTimeCounterSMSreceived = true;
    3ac2:	81 e0       	ldi	r24, 0x01	; 1
    3ac4:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <top+0x107>
    3ac8:	b1 c4       	rjmp	.+2402   	; 0x442c <main+0x22e0>
			}
			case  6:
			{
				if (_alarmOnOff)
				{
					sendSMS(getGoogleMapsLink(),_indexOfContact,ptr_6_9);
    3aca:	00 91 e2 06 	lds	r16, 0x06E2	; 0x8006e2 <top+0x295>
    3ace:	10 e0       	ldi	r17, 0x00	; 0
    3ad0:	88 e5       	ldi	r24, 0x58	; 88
    3ad2:	95 e0       	ldi	r25, 0x05	; 5
    3ad4:	0e 94 5d 08 	call	0x10ba	; 0x10ba <_ZN17MovedFromLocation17getGoogleMapsLinkEv>
    3ad8:	6c 01       	movw	r12, r24
			}
		}
		return result;
	}
	char *getPhoneNumber(int index){
		return _phoneBook[index];}
    3ada:	8b e0       	ldi	r24, 0x0B	; 11
    3adc:	80 9f       	mul	r24, r16
    3ade:	b0 01       	movw	r22, r0
    3ae0:	81 9f       	mul	r24, r17
    3ae2:	70 0d       	add	r23, r0
    3ae4:	11 24       	eor	r1, r1
    3ae6:	6f 57       	subi	r22, 0x7F	; 127
    3ae8:	7b 4f       	sbci	r23, 0xFB	; 251
		sendCommand("AT+MORING=1",true);
		copyPhoneFromSimToRAM();
	}
	bool sendSMS(const char *ptr,int index, const char *massage2 = NULL, const char *massage3 = NULL, const char *massage4 = NULL, const char *massage5 = NULL){
		char command[25];
		if (*getPhoneNumber(index) == 0)
    3aea:	fb 01       	movw	r30, r22
    3aec:	80 81       	ld	r24, Z
    3aee:	88 23       	and	r24, r24
    3af0:	09 f4       	brne	.+2      	; 0x3af4 <main+0x19a8>
    3af2:	9c c4       	rjmp	.+2360   	; 0x442c <main+0x22e0>
    3af4:	ff ef       	ldi	r31, 0xFF	; 255
    3af6:	20 e7       	ldi	r18, 0x70	; 112
    3af8:	32 e0       	ldi	r19, 0x02	; 2
    3afa:	f1 50       	subi	r31, 0x01	; 1
    3afc:	20 40       	sbci	r18, 0x00	; 0
    3afe:	30 40       	sbci	r19, 0x00	; 0
    3b00:	e1 f7       	brne	.-8      	; 0x3afa <main+0x19ae>
    3b02:	00 c0       	rjmp	.+0      	; 0x3b04 <main+0x19b8>
    3b04:	00 00       	nop
		{
			return false;
		}
		_delay_ms(50);
		strcpy(command,"AT+CMGS=");											//copy command
    3b06:	89 e0       	ldi	r24, 0x09	; 9
    3b08:	ed e8       	ldi	r30, 0x8D	; 141
    3b0a:	f1 e0       	ldi	r31, 0x01	; 1
    3b0c:	d5 01       	movw	r26, r10
    3b0e:	01 90       	ld	r0, Z+
    3b10:	0d 92       	st	X+, r0
    3b12:	8a 95       	dec	r24
    3b14:	e1 f7       	brne	.-8      	; 0x3b0e <main+0x19c2>
		strcpy(command+9,getPhoneNumber(index));							//copy phone number
    3b16:	c5 01       	movw	r24, r10
    3b18:	09 96       	adiw	r24, 0x09	; 9
    3b1a:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
		command[8] = command[19] = '"';										//set <"> for phone number
    3b1e:	82 e2       	ldi	r24, 0x22	; 34
    3b20:	d5 01       	movw	r26, r10
    3b22:	53 96       	adiw	r26, 0x13	; 19
    3b24:	8c 93       	st	X, r24
    3b26:	53 97       	sbiw	r26, 0x13	; 19
    3b28:	18 96       	adiw	r26, 0x08	; 8
    3b2a:	8c 93       	st	X, r24
    3b2c:	18 97       	sbiw	r26, 0x08	; 8
		command[20] = 0;													//close number with <">, run over the dummy char
    3b2e:	54 96       	adiw	r26, 0x14	; 20
    3b30:	1c 92       	st	X, r1
		
		sendCommand(command,true);
    3b32:	41 e0       	ldi	r20, 0x01	; 1
    3b34:	b5 01       	movw	r22, r10
    3b36:	8d e4       	ldi	r24, 0x4D	; 77
    3b38:	94 e0       	ldi	r25, 0x04	; 4
    3b3a:	0e 94 d7 08 	call	0x11ae	; 0x11ae <_ZN3SMS11sendCommandEPKcb>
		
		gsmSMS.UARTstring(ptr,0);
    3b3e:	40 e0       	ldi	r20, 0x00	; 0
    3b40:	b6 01       	movw	r22, r12
    3b42:	8d e4       	ldi	r24, 0x4D	; 77
    3b44:	94 e0       	ldi	r25, 0x04	; 4
    3b46:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		if (massage2 != NULL)
		{
			gsmSMS.UARTsend(13);
    3b4a:	6d e0       	ldi	r22, 0x0D	; 13
    3b4c:	8d e4       	ldi	r24, 0x4D	; 77
    3b4e:	94 e0       	ldi	r25, 0x04	; 4
    3b50:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
			gsmSMS.UARTstring(massage2,0);
    3b54:	40 e0       	ldi	r20, 0x00	; 0
    3b56:	be 01       	movw	r22, r28
    3b58:	6b 52       	subi	r22, 0x2B	; 43
    3b5a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b5c:	8d e4       	ldi	r24, 0x4D	; 77
    3b5e:	94 e0       	ldi	r25, 0x04	; 4
    3b60:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		if (massage5 != NULL)
		{
			gsmSMS.UARTsend(13);
			gsmSMS.UARTstring(massage5,0);
		}
		gsmSMS.UARTsend(26);
    3b64:	6a e1       	ldi	r22, 0x1A	; 26
    3b66:	8d e4       	ldi	r24, 0x4D	; 77
    3b68:	94 e0       	ldi	r25, 0x04	; 4
    3b6a:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		gsmSMS.UARTsend(13);
    3b6e:	6d e0       	ldi	r22, 0x0D	; 13
    3b70:	8d e4       	ldi	r24, 0x4D	; 77
    3b72:	94 e0       	ldi	r25, 0x04	; 4
    3b74:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		_startTimeCounterSMSreceived = true;
    3b78:	81 e0       	ldi	r24, 0x01	; 1
    3b7a:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <top+0x107>
    3b7e:	56 c4       	rjmp	.+2220   	; 0x442c <main+0x22e0>
				{
					sendSMS(getGoogleMapsLink(),_indexOfContact,ptr_6_9);
				}
				else
				{
					sendSMS(getGoogleMapsLink(),_indexOfContact,"car is NOT armed");
    3b80:	00 91 e2 06 	lds	r16, 0x06E2	; 0x8006e2 <top+0x295>
    3b84:	10 e0       	ldi	r17, 0x00	; 0
    3b86:	88 e5       	ldi	r24, 0x58	; 88
    3b88:	95 e0       	ldi	r25, 0x05	; 5
    3b8a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <_ZN17MovedFromLocation17getGoogleMapsLinkEv>
    3b8e:	6c 01       	movw	r12, r24
			}
		}
		return result;
	}
	char *getPhoneNumber(int index){
		return _phoneBook[index];}
    3b90:	8b e0       	ldi	r24, 0x0B	; 11
    3b92:	80 9f       	mul	r24, r16
    3b94:	b0 01       	movw	r22, r0
    3b96:	81 9f       	mul	r24, r17
    3b98:	70 0d       	add	r23, r0
    3b9a:	11 24       	eor	r1, r1
    3b9c:	6f 57       	subi	r22, 0x7F	; 127
    3b9e:	7b 4f       	sbci	r23, 0xFB	; 251
		sendCommand("AT+MORING=1",true);
		copyPhoneFromSimToRAM();
	}
	bool sendSMS(const char *ptr,int index, const char *massage2 = NULL, const char *massage3 = NULL, const char *massage4 = NULL, const char *massage5 = NULL){
		char command[25];
		if (*getPhoneNumber(index) == 0)
    3ba0:	fb 01       	movw	r30, r22
    3ba2:	80 81       	ld	r24, Z
    3ba4:	88 23       	and	r24, r24
    3ba6:	09 f4       	brne	.+2      	; 0x3baa <main+0x1a5e>
    3ba8:	41 c4       	rjmp	.+2178   	; 0x442c <main+0x22e0>
    3baa:	ff ef       	ldi	r31, 0xFF	; 255
    3bac:	20 e7       	ldi	r18, 0x70	; 112
    3bae:	32 e0       	ldi	r19, 0x02	; 2
    3bb0:	f1 50       	subi	r31, 0x01	; 1
    3bb2:	20 40       	sbci	r18, 0x00	; 0
    3bb4:	30 40       	sbci	r19, 0x00	; 0
    3bb6:	e1 f7       	brne	.-8      	; 0x3bb0 <main+0x1a64>
    3bb8:	00 c0       	rjmp	.+0      	; 0x3bba <main+0x1a6e>
    3bba:	00 00       	nop
		{
			return false;
		}
		_delay_ms(50);
		strcpy(command,"AT+CMGS=");											//copy command
    3bbc:	89 e0       	ldi	r24, 0x09	; 9
    3bbe:	ed e8       	ldi	r30, 0x8D	; 141
    3bc0:	f1 e0       	ldi	r31, 0x01	; 1
    3bc2:	d5 01       	movw	r26, r10
    3bc4:	01 90       	ld	r0, Z+
    3bc6:	0d 92       	st	X+, r0
    3bc8:	8a 95       	dec	r24
    3bca:	e1 f7       	brne	.-8      	; 0x3bc4 <main+0x1a78>
		strcpy(command+9,getPhoneNumber(index));							//copy phone number
    3bcc:	c5 01       	movw	r24, r10
    3bce:	09 96       	adiw	r24, 0x09	; 9
    3bd0:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
		command[8] = command[19] = '"';										//set <"> for phone number
    3bd4:	82 e2       	ldi	r24, 0x22	; 34
    3bd6:	d5 01       	movw	r26, r10
    3bd8:	53 96       	adiw	r26, 0x13	; 19
    3bda:	8c 93       	st	X, r24
    3bdc:	53 97       	sbiw	r26, 0x13	; 19
    3bde:	18 96       	adiw	r26, 0x08	; 8
    3be0:	8c 93       	st	X, r24
    3be2:	18 97       	sbiw	r26, 0x08	; 8
		command[20] = 0;													//close number with <">, run over the dummy char
    3be4:	54 96       	adiw	r26, 0x14	; 20
    3be6:	1c 92       	st	X, r1
		
		sendCommand(command,true);
    3be8:	41 e0       	ldi	r20, 0x01	; 1
    3bea:	b5 01       	movw	r22, r10
    3bec:	8d e4       	ldi	r24, 0x4D	; 77
    3bee:	94 e0       	ldi	r25, 0x04	; 4
    3bf0:	0e 94 d7 08 	call	0x11ae	; 0x11ae <_ZN3SMS11sendCommandEPKcb>
		
		gsmSMS.UARTstring(ptr,0);
    3bf4:	40 e0       	ldi	r20, 0x00	; 0
    3bf6:	b6 01       	movw	r22, r12
    3bf8:	8d e4       	ldi	r24, 0x4D	; 77
    3bfa:	94 e0       	ldi	r25, 0x04	; 4
    3bfc:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		if (massage2 != NULL)
		{
			gsmSMS.UARTsend(13);
    3c00:	6d e0       	ldi	r22, 0x0D	; 13
    3c02:	8d e4       	ldi	r24, 0x4D	; 77
    3c04:	94 e0       	ldi	r25, 0x04	; 4
    3c06:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
			gsmSMS.UARTstring(massage2,0);
    3c0a:	40 e0       	ldi	r20, 0x00	; 0
    3c0c:	65 eb       	ldi	r22, 0xB5	; 181
    3c0e:	72 e0       	ldi	r23, 0x02	; 2
    3c10:	8d e4       	ldi	r24, 0x4D	; 77
    3c12:	94 e0       	ldi	r25, 0x04	; 4
    3c14:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		if (massage5 != NULL)
		{
			gsmSMS.UARTsend(13);
			gsmSMS.UARTstring(massage5,0);
		}
		gsmSMS.UARTsend(26);
    3c18:	6a e1       	ldi	r22, 0x1A	; 26
    3c1a:	8d e4       	ldi	r24, 0x4D	; 77
    3c1c:	94 e0       	ldi	r25, 0x04	; 4
    3c1e:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		gsmSMS.UARTsend(13);
    3c22:	6d e0       	ldi	r22, 0x0D	; 13
    3c24:	8d e4       	ldi	r24, 0x4D	; 77
    3c26:	94 e0       	ldi	r25, 0x04	; 4
    3c28:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		_startTimeCounterSMSreceived = true;
    3c2c:	81 e0       	ldi	r24, 0x01	; 1
    3c2e:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <top+0x107>
    3c32:	fc c3       	rjmp	.+2040   	; 0x442c <main+0x22e0>
    3c34:	bf ef       	ldi	r27, 0xFF	; 255
    3c36:	e0 e7       	ldi	r30, 0x70	; 112
    3c38:	f2 e0       	ldi	r31, 0x02	; 2
    3c3a:	b1 50       	subi	r27, 0x01	; 1
    3c3c:	e0 40       	sbci	r30, 0x00	; 0
    3c3e:	f0 40       	sbci	r31, 0x00	; 0
    3c40:	e1 f7       	brne	.-8      	; 0x3c3a <main+0x1aee>
    3c42:	00 c0       	rjmp	.+0      	; 0x3c44 <main+0x1af8>
    3c44:	00 00       	nop
		if (*getPhoneNumber(index) == 0)
		{
			return false;
		}
		_delay_ms(50);
		strcpy(command,"AT+CMGS=");											//copy command
    3c46:	89 e0       	ldi	r24, 0x09	; 9
    3c48:	ed e8       	ldi	r30, 0x8D	; 141
    3c4a:	f1 e0       	ldi	r31, 0x01	; 1
    3c4c:	d5 01       	movw	r26, r10
    3c4e:	01 90       	ld	r0, Z+
    3c50:	0d 92       	st	X+, r0
    3c52:	8a 95       	dec	r24
    3c54:	e1 f7       	brne	.-8      	; 0x3c4e <main+0x1b02>
		strcpy(command+9,getPhoneNumber(index));							//copy phone number
    3c56:	c5 01       	movw	r24, r10
    3c58:	09 96       	adiw	r24, 0x09	; 9
    3c5a:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
		command[8] = command[19] = '"';										//set <"> for phone number
    3c5e:	82 e2       	ldi	r24, 0x22	; 34
    3c60:	d5 01       	movw	r26, r10
    3c62:	53 96       	adiw	r26, 0x13	; 19
    3c64:	8c 93       	st	X, r24
    3c66:	53 97       	sbiw	r26, 0x13	; 19
    3c68:	18 96       	adiw	r26, 0x08	; 8
    3c6a:	8c 93       	st	X, r24
    3c6c:	18 97       	sbiw	r26, 0x08	; 8
		command[20] = 0;													//close number with <">, run over the dummy char
    3c6e:	54 96       	adiw	r26, 0x14	; 20
    3c70:	1c 92       	st	X, r1
	char _1minConterSMSreceived, _10secRestetGSMdelay , _GSMerrorCounter;
	bool _newData, _startTimeCounterSMSreceived, _startTimeCounterGSMreset;
	int _newDataIndex;
	bool sendCommand(const char ptr[], bool checkAck = false){
		int condition;
		gsmSMS.UARTstring(ptr,0);
    3c72:	40 e0       	ldi	r20, 0x00	; 0
    3c74:	b5 01       	movw	r22, r10
    3c76:	8d e4       	ldi	r24, 0x4D	; 77
    3c78:	94 e0       	ldi	r25, 0x04	; 4
    3c7a:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		gsmSMS.UARTsend(13);
    3c7e:	6d e0       	ldi	r22, 0x0D	; 13
    3c80:	8d e4       	ldi	r24, 0x4D	; 77
    3c82:	94 e0       	ldi	r25, 0x04	; 4
    3c84:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		if (checkAck)
		{
			char arr[15] = {0};
    3c88:	8f e0       	ldi	r24, 0x0F	; 15
    3c8a:	f4 01       	movw	r30, r8
    3c8c:	11 92       	st	Z+, r1
    3c8e:	8a 95       	dec	r24
    3c90:	e9 f7       	brne	.-6      	; 0x3c8c <main+0x1b40>
			RXinterruptDisable();
    3c92:	e1 ec       	ldi	r30, 0xC1	; 193
    3c94:	f0 e0       	ldi	r31, 0x00	; 0
    3c96:	80 81       	ld	r24, Z
    3c98:	8f 77       	andi	r24, 0x7F	; 127
    3c9a:	80 83       	st	Z, r24
    3c9c:	64 01       	movw	r12, r8
			return false;
		}
		return 0;
	}
	int checkForACkPacket(char getData[], int arrSize){
		int i = 0;
    3c9e:	00 e0       	ldi	r16, 0x00	; 0
    3ca0:	10 e0       	ldi	r17, 0x00	; 0
		char data = 0;
		
		do 
		{
			data = gsmSMS.UARTreceive();
    3ca2:	8d e4       	ldi	r24, 0x4D	; 77
    3ca4:	94 e0       	ldi	r25, 0x04	; 4
    3ca6:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <_ZN4Uart11UARTreceiveEv>
			getData[i++] = data;
    3caa:	0f 5f       	subi	r16, 0xFF	; 255
    3cac:	1f 4f       	sbci	r17, 0xFF	; 255
    3cae:	d6 01       	movw	r26, r12
    3cb0:	8d 93       	st	X+, r24
    3cb2:	6d 01       	movw	r12, r26
		}while(gsmSMS.checkForData() && i < arrSize);
    3cb4:	8d e4       	ldi	r24, 0x4D	; 77
    3cb6:	94 e0       	ldi	r25, 0x04	; 4
    3cb8:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <_ZN4Uart12checkForDataEv>
    3cbc:	88 23       	and	r24, r24
    3cbe:	09 f4       	brne	.+2      	; 0x3cc2 <main+0x1b76>
    3cc0:	5a c6       	rjmp	.+3252   	; 0x4976 <main+0x282a>
    3cc2:	0e 30       	cpi	r16, 0x0E	; 14
    3cc4:	11 05       	cpc	r17, r1
    3cc6:	69 f7       	brne	.-38     	; 0x3ca2 <main+0x1b56>
    3cc8:	0c 94 8c 26 	jmp	0x4d18	; 0x4d18 <main+0x2bcc>
    3ccc:	98 01       	movw	r18, r16
    3cce:	11 23       	and	r17, r17
    3cd0:	14 f4       	brge	.+4      	; 0x3cd6 <main+0x1b8a>
    3cd2:	20 e0       	ldi	r18, 0x00	; 0
    3cd4:	30 e0       	ldi	r19, 0x00	; 0
    3cd6:	33 27       	eor	r19, r19
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    3cd8:	12 16       	cp	r1, r18
    3cda:	13 06       	cpc	r1, r19
    3cdc:	0c f0       	brlt	.+2      	; 0x3ce0 <main+0x1b94>
    3cde:	48 c0       	rjmp	.+144    	; 0x3d70 <main+0x1c24>
    3ce0:	02 c0       	rjmp	.+4      	; 0x3ce6 <main+0x1b9a>
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
			if (*arr != 0)
    3ce2:	2e e0       	ldi	r18, 0x0E	; 14
    3ce4:	30 e0       	ldi	r19, 0x00	; 0
    3ce6:	61 e0       	ldi	r22, 0x01	; 1
    3ce8:	80 e0       	ldi	r24, 0x00	; 0
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	47 e3       	ldi	r20, 0x37	; 55
    3cee:	51 e0       	ldi	r21, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    3cf0:	70 e0       	ldi	r23, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    3cf2:	f4 01       	movw	r30, r8
    3cf4:	e8 0f       	add	r30, r24
    3cf6:	f9 1f       	adc	r31, r25
    3cf8:	a0 81       	ld	r26, Z
    3cfa:	a5 34       	cpi	r26, 0x45	; 69
    3cfc:	61 f4       	brne	.+24     	; 0x3d16 <main+0x1bca>
    3cfe:	a2 e3       	ldi	r26, 0x32	; 50
    3d00:	b1 e0       	ldi	r27, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    3d02:	01 91       	ld	r16, Z+
    3d04:	1d 91       	ld	r17, X+
    3d06:	01 13       	cpse	r16, r17
					{
						status = false;
    3d08:	67 2f       	mov	r22, r23
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    3d0a:	4a 17       	cp	r20, r26
    3d0c:	5b 07       	cpc	r21, r27
    3d0e:	c9 f7       	brne	.-14     	; 0x3d02 <main+0x1bb6>
    3d10:	05 96       	adiw	r24, 0x05	; 5
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    3d12:	61 11       	cpse	r22, r1
    3d14:	2d c0       	rjmp	.+90     	; 0x3d70 <main+0x1c24>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    3d16:	01 96       	adiw	r24, 0x01	; 1
    3d18:	82 17       	cp	r24, r18
    3d1a:	93 07       	cpc	r25, r19
    3d1c:	54 f3       	brlt	.-44     	; 0x3cf2 <main+0x1ba6>
    3d1e:	51 e0       	ldi	r21, 0x01	; 1
    3d20:	80 e0       	ldi	r24, 0x00	; 0
    3d22:	90 e0       	ldi	r25, 0x00	; 0
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    3d24:	60 e0       	ldi	r22, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    3d26:	f4 01       	movw	r30, r8
    3d28:	e8 0f       	add	r30, r24
    3d2a:	f9 1f       	adc	r31, r25
    3d2c:	40 81       	ld	r20, Z
    3d2e:	4f 34       	cpi	r20, 0x4F	; 79
    3d30:	69 f4       	brne	.+26     	; 0x3d4c <main+0x1c00>
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    3d32:	e8 eb       	ldi	r30, 0xB8	; 184
    3d34:	f0 e0       	ldi	r31, 0x00	; 0
    3d36:	ec 0f       	add	r30, r28
    3d38:	fd 1f       	adc	r31, r29
    3d3a:	e8 0f       	add	r30, r24
    3d3c:	f9 1f       	adc	r31, r25
    3d3e:	40 81       	ld	r20, Z
    3d40:	4b 34       	cpi	r20, 0x4B	; 75
    3d42:	09 f0       	breq	.+2      	; 0x3d46 <main+0x1bfa>
    3d44:	48 c7       	rjmp	.+3728   	; 0x4bd6 <main+0x2a8a>
    3d46:	02 96       	adiw	r24, 0x02	; 2
					{
						status = false;
					}
				}
				if (status)
    3d48:	51 11       	cpse	r21, r1
    3d4a:	12 c0       	rjmp	.+36     	; 0x3d70 <main+0x1c24>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    3d4c:	01 96       	adiw	r24, 0x01	; 1
    3d4e:	82 17       	cp	r24, r18
    3d50:	93 07       	cpc	r25, r19
    3d52:	4c f3       	brlt	.-46     	; 0x3d26 <main+0x1bda>
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    3d54:	f4 01       	movw	r30, r8
    3d56:	80 81       	ld	r24, Z
    3d58:	8e 33       	cpi	r24, 0x3E	; 62
    3d5a:	51 f0       	breq	.+20     	; 0x3d70 <main+0x1c24>
    3d5c:	31 96       	adiw	r30, 0x01	; 1
    3d5e:	28 0d       	add	r18, r8
    3d60:	39 1d       	adc	r19, r9
    3d62:	03 c0       	rjmp	.+6      	; 0x3d6a <main+0x1c1e>
    3d64:	81 91       	ld	r24, Z+
    3d66:	8e 33       	cpi	r24, 0x3E	; 62
    3d68:	19 f0       	breq	.+6      	; 0x3d70 <main+0x1c24>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    3d6a:	2e 17       	cp	r18, r30
    3d6c:	3f 07       	cpc	r19, r31
    3d6e:	d1 f7       	brne	.-12     	; 0x3d64 <main+0x1c18>
		command[8] = command[19] = '"';										//set <"> for phone number
		command[20] = 0;													//close number with <">, run over the dummy char
		
		sendCommand(command,true);
		
		gsmSMS.UARTstring(ptr,0);
    3d70:	40 e0       	ldi	r20, 0x00	; 0
    3d72:	66 ec       	ldi	r22, 0xC6	; 198
    3d74:	72 e0       	ldi	r23, 0x02	; 2
    3d76:	8d e4       	ldi	r24, 0x4D	; 77
    3d78:	94 e0       	ldi	r25, 0x04	; 4
    3d7a:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		if (massage5 != NULL)
		{
			gsmSMS.UARTsend(13);
			gsmSMS.UARTstring(massage5,0);
		}
		gsmSMS.UARTsend(26);
    3d7e:	6a e1       	ldi	r22, 0x1A	; 26
    3d80:	8d e4       	ldi	r24, 0x4D	; 77
    3d82:	94 e0       	ldi	r25, 0x04	; 4
    3d84:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		gsmSMS.UARTsend(13);
    3d88:	6d e0       	ldi	r22, 0x0D	; 13
    3d8a:	8d e4       	ldi	r24, 0x4D	; 77
    3d8c:	94 e0       	ldi	r25, 0x04	; 4
    3d8e:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		_startTimeCounterSMSreceived = true;
    3d92:	81 e0       	ldi	r24, 0x01	; 1
    3d94:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <top+0x107>
    3d98:	49 c3       	rjmp	.+1682   	; 0x442c <main+0x22e0>
    3d9a:	ff ef       	ldi	r31, 0xFF	; 255
    3d9c:	20 e7       	ldi	r18, 0x70	; 112
    3d9e:	32 e0       	ldi	r19, 0x02	; 2
    3da0:	f1 50       	subi	r31, 0x01	; 1
    3da2:	20 40       	sbci	r18, 0x00	; 0
    3da4:	30 40       	sbci	r19, 0x00	; 0
    3da6:	e1 f7       	brne	.-8      	; 0x3da0 <main+0x1c54>
    3da8:	00 c0       	rjmp	.+0      	; 0x3daa <main+0x1c5e>
    3daa:	00 00       	nop
		if (*getPhoneNumber(index) == 0)
		{
			return false;
		}
		_delay_ms(50);
		strcpy(command,"AT+CMGS=");											//copy command
    3dac:	89 e0       	ldi	r24, 0x09	; 9
    3dae:	ed e8       	ldi	r30, 0x8D	; 141
    3db0:	f1 e0       	ldi	r31, 0x01	; 1
    3db2:	d5 01       	movw	r26, r10
    3db4:	01 90       	ld	r0, Z+
    3db6:	0d 92       	st	X+, r0
    3db8:	8a 95       	dec	r24
    3dba:	e1 f7       	brne	.-8      	; 0x3db4 <main+0x1c68>
		strcpy(command+9,getPhoneNumber(index));							//copy phone number
    3dbc:	c5 01       	movw	r24, r10
    3dbe:	09 96       	adiw	r24, 0x09	; 9
    3dc0:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
		command[8] = command[19] = '"';										//set <"> for phone number
    3dc4:	82 e2       	ldi	r24, 0x22	; 34
    3dc6:	d5 01       	movw	r26, r10
    3dc8:	53 96       	adiw	r26, 0x13	; 19
    3dca:	8c 93       	st	X, r24
    3dcc:	53 97       	sbiw	r26, 0x13	; 19
    3dce:	18 96       	adiw	r26, 0x08	; 8
    3dd0:	8c 93       	st	X, r24
    3dd2:	18 97       	sbiw	r26, 0x08	; 8
		command[20] = 0;													//close number with <">, run over the dummy char
    3dd4:	54 96       	adiw	r26, 0x14	; 20
    3dd6:	1c 92       	st	X, r1
	char _1minConterSMSreceived, _10secRestetGSMdelay , _GSMerrorCounter;
	bool _newData, _startTimeCounterSMSreceived, _startTimeCounterGSMreset;
	int _newDataIndex;
	bool sendCommand(const char ptr[], bool checkAck = false){
		int condition;
		gsmSMS.UARTstring(ptr,0);
    3dd8:	40 e0       	ldi	r20, 0x00	; 0
    3dda:	b5 01       	movw	r22, r10
    3ddc:	8d e4       	ldi	r24, 0x4D	; 77
    3dde:	94 e0       	ldi	r25, 0x04	; 4
    3de0:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		gsmSMS.UARTsend(13);
    3de4:	6d e0       	ldi	r22, 0x0D	; 13
    3de6:	8d e4       	ldi	r24, 0x4D	; 77
    3de8:	94 e0       	ldi	r25, 0x04	; 4
    3dea:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		if (checkAck)
		{
			char arr[15] = {0};
    3dee:	8f e0       	ldi	r24, 0x0F	; 15
    3df0:	f4 01       	movw	r30, r8
    3df2:	11 92       	st	Z+, r1
    3df4:	8a 95       	dec	r24
    3df6:	e9 f7       	brne	.-6      	; 0x3df2 <main+0x1ca6>
			RXinterruptDisable();
    3df8:	e1 ec       	ldi	r30, 0xC1	; 193
    3dfa:	f0 e0       	ldi	r31, 0x00	; 0
    3dfc:	80 81       	ld	r24, Z
    3dfe:	8f 77       	andi	r24, 0x7F	; 127
    3e00:	80 83       	st	Z, r24
    3e02:	64 01       	movw	r12, r8
			return false;
		}
		return 0;
	}
	int checkForACkPacket(char getData[], int arrSize){
		int i = 0;
    3e04:	00 e0       	ldi	r16, 0x00	; 0
    3e06:	10 e0       	ldi	r17, 0x00	; 0
		char data = 0;
		
		do 
		{
			data = gsmSMS.UARTreceive();
    3e08:	8d e4       	ldi	r24, 0x4D	; 77
    3e0a:	94 e0       	ldi	r25, 0x04	; 4
    3e0c:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <_ZN4Uart11UARTreceiveEv>
			getData[i++] = data;
    3e10:	0f 5f       	subi	r16, 0xFF	; 255
    3e12:	1f 4f       	sbci	r17, 0xFF	; 255
    3e14:	d6 01       	movw	r26, r12
    3e16:	8d 93       	st	X+, r24
    3e18:	6d 01       	movw	r12, r26
		}while(gsmSMS.checkForData() && i < arrSize);
    3e1a:	8d e4       	ldi	r24, 0x4D	; 77
    3e1c:	94 e0       	ldi	r25, 0x04	; 4
    3e1e:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <_ZN4Uart12checkForDataEv>
    3e22:	88 23       	and	r24, r24
    3e24:	09 f4       	brne	.+2      	; 0x3e28 <main+0x1cdc>
    3e26:	b5 c5       	rjmp	.+2922   	; 0x4992 <main+0x2846>
    3e28:	0e 30       	cpi	r16, 0x0E	; 14
    3e2a:	11 05       	cpc	r17, r1
    3e2c:	69 f7       	brne	.-38     	; 0x3e08 <main+0x1cbc>
    3e2e:	82 c7       	rjmp	.+3844   	; 0x4d34 <main+0x2be8>
    3e30:	98 01       	movw	r18, r16
    3e32:	11 23       	and	r17, r17
    3e34:	14 f4       	brge	.+4      	; 0x3e3a <main+0x1cee>
    3e36:	20 e0       	ldi	r18, 0x00	; 0
    3e38:	30 e0       	ldi	r19, 0x00	; 0
    3e3a:	33 27       	eor	r19, r19
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    3e3c:	12 16       	cp	r1, r18
    3e3e:	13 06       	cpc	r1, r19
    3e40:	0c f0       	brlt	.+2      	; 0x3e44 <main+0x1cf8>
    3e42:	48 c0       	rjmp	.+144    	; 0x3ed4 <main+0x1d88>
    3e44:	02 c0       	rjmp	.+4      	; 0x3e4a <main+0x1cfe>
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
			if (*arr != 0)
    3e46:	2e e0       	ldi	r18, 0x0E	; 14
    3e48:	30 e0       	ldi	r19, 0x00	; 0
    3e4a:	61 e0       	ldi	r22, 0x01	; 1
    3e4c:	80 e0       	ldi	r24, 0x00	; 0
    3e4e:	90 e0       	ldi	r25, 0x00	; 0
    3e50:	47 e3       	ldi	r20, 0x37	; 55
    3e52:	51 e0       	ldi	r21, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    3e54:	70 e0       	ldi	r23, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    3e56:	f4 01       	movw	r30, r8
    3e58:	e8 0f       	add	r30, r24
    3e5a:	f9 1f       	adc	r31, r25
    3e5c:	a0 81       	ld	r26, Z
    3e5e:	a5 34       	cpi	r26, 0x45	; 69
    3e60:	61 f4       	brne	.+24     	; 0x3e7a <main+0x1d2e>
    3e62:	a2 e3       	ldi	r26, 0x32	; 50
    3e64:	b1 e0       	ldi	r27, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    3e66:	01 91       	ld	r16, Z+
    3e68:	1d 91       	ld	r17, X+
    3e6a:	01 13       	cpse	r16, r17
					{
						status = false;
    3e6c:	67 2f       	mov	r22, r23
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    3e6e:	4a 17       	cp	r20, r26
    3e70:	5b 07       	cpc	r21, r27
    3e72:	c9 f7       	brne	.-14     	; 0x3e66 <main+0x1d1a>
    3e74:	05 96       	adiw	r24, 0x05	; 5
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    3e76:	61 11       	cpse	r22, r1
    3e78:	2d c0       	rjmp	.+90     	; 0x3ed4 <main+0x1d88>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    3e7a:	01 96       	adiw	r24, 0x01	; 1
    3e7c:	82 17       	cp	r24, r18
    3e7e:	93 07       	cpc	r25, r19
    3e80:	54 f3       	brlt	.-44     	; 0x3e56 <main+0x1d0a>
    3e82:	51 e0       	ldi	r21, 0x01	; 1
    3e84:	80 e0       	ldi	r24, 0x00	; 0
    3e86:	90 e0       	ldi	r25, 0x00	; 0
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    3e88:	60 e0       	ldi	r22, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    3e8a:	f4 01       	movw	r30, r8
    3e8c:	e8 0f       	add	r30, r24
    3e8e:	f9 1f       	adc	r31, r25
    3e90:	40 81       	ld	r20, Z
    3e92:	4f 34       	cpi	r20, 0x4F	; 79
    3e94:	69 f4       	brne	.+26     	; 0x3eb0 <main+0x1d64>
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    3e96:	e8 eb       	ldi	r30, 0xB8	; 184
    3e98:	f0 e0       	ldi	r31, 0x00	; 0
    3e9a:	ec 0f       	add	r30, r28
    3e9c:	fd 1f       	adc	r31, r29
    3e9e:	e8 0f       	add	r30, r24
    3ea0:	f9 1f       	adc	r31, r25
    3ea2:	40 81       	ld	r20, Z
    3ea4:	4b 34       	cpi	r20, 0x4B	; 75
    3ea6:	09 f0       	breq	.+2      	; 0x3eaa <main+0x1d5e>
    3ea8:	99 c6       	rjmp	.+3378   	; 0x4bdc <main+0x2a90>
    3eaa:	02 96       	adiw	r24, 0x02	; 2
					{
						status = false;
					}
				}
				if (status)
    3eac:	51 11       	cpse	r21, r1
    3eae:	12 c0       	rjmp	.+36     	; 0x3ed4 <main+0x1d88>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    3eb0:	01 96       	adiw	r24, 0x01	; 1
    3eb2:	82 17       	cp	r24, r18
    3eb4:	93 07       	cpc	r25, r19
    3eb6:	4c f3       	brlt	.-46     	; 0x3e8a <main+0x1d3e>
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    3eb8:	f4 01       	movw	r30, r8
    3eba:	80 81       	ld	r24, Z
    3ebc:	8e 33       	cpi	r24, 0x3E	; 62
    3ebe:	51 f0       	breq	.+20     	; 0x3ed4 <main+0x1d88>
    3ec0:	31 96       	adiw	r30, 0x01	; 1
    3ec2:	28 0d       	add	r18, r8
    3ec4:	39 1d       	adc	r19, r9
    3ec6:	03 c0       	rjmp	.+6      	; 0x3ece <main+0x1d82>
    3ec8:	81 91       	ld	r24, Z+
    3eca:	8e 33       	cpi	r24, 0x3E	; 62
    3ecc:	19 f0       	breq	.+6      	; 0x3ed4 <main+0x1d88>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    3ece:	2e 17       	cp	r18, r30
    3ed0:	3f 07       	cpc	r19, r31
    3ed2:	d1 f7       	brne	.-12     	; 0x3ec8 <main+0x1d7c>
		command[8] = command[19] = '"';										//set <"> for phone number
		command[20] = 0;													//close number with <">, run over the dummy char
		
		sendCommand(command,true);
		
		gsmSMS.UARTstring(ptr,0);
    3ed4:	40 e0       	ldi	r20, 0x00	; 0
    3ed6:	6d ed       	ldi	r22, 0xDD	; 221
    3ed8:	72 e0       	ldi	r23, 0x02	; 2
    3eda:	8d e4       	ldi	r24, 0x4D	; 77
    3edc:	94 e0       	ldi	r25, 0x04	; 4
    3ede:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		if (massage5 != NULL)
		{
			gsmSMS.UARTsend(13);
			gsmSMS.UARTstring(massage5,0);
		}
		gsmSMS.UARTsend(26);
    3ee2:	6a e1       	ldi	r22, 0x1A	; 26
    3ee4:	8d e4       	ldi	r24, 0x4D	; 77
    3ee6:	94 e0       	ldi	r25, 0x04	; 4
    3ee8:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		gsmSMS.UARTsend(13);
    3eec:	6d e0       	ldi	r22, 0x0D	; 13
    3eee:	8d e4       	ldi	r24, 0x4D	; 77
    3ef0:	94 e0       	ldi	r25, 0x04	; 4
    3ef2:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		_startTimeCounterSMSreceived = true;
    3ef6:	81 e0       	ldi	r24, 0x01	; 1
    3ef8:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <top+0x107>
    3efc:	97 c2       	rjmp	.+1326   	; 0x442c <main+0x22e0>
		int i = 0;
		char data = 0;
		
		do 
		{
			data = gsmSMS.UARTreceive();
    3efe:	8d e4       	ldi	r24, 0x4D	; 77
    3f00:	94 e0       	ldi	r25, 0x04	; 4
    3f02:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <_ZN4Uart11UARTreceiveEv>
			getData[i++] = data;
    3f06:	0f 5f       	subi	r16, 0xFF	; 255
    3f08:	1f 4f       	sbci	r17, 0xFF	; 255
    3f0a:	d6 01       	movw	r26, r12
    3f0c:	8d 93       	st	X+, r24
    3f0e:	6d 01       	movw	r12, r26
		}while(gsmSMS.checkForData() && i < arrSize);
    3f10:	8d e4       	ldi	r24, 0x4D	; 77
    3f12:	94 e0       	ldi	r25, 0x04	; 4
    3f14:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <_ZN4Uart12checkForDataEv>
    3f18:	88 23       	and	r24, r24
    3f1a:	09 f4       	brne	.+2      	; 0x3f1e <main+0x1dd2>
    3f1c:	48 c5       	rjmp	.+2704   	; 0x49ae <main+0x2862>
    3f1e:	0e 30       	cpi	r16, 0x0E	; 14
    3f20:	11 05       	cpc	r17, r1
    3f22:	69 f7       	brne	.-38     	; 0x3efe <main+0x1db2>
    3f24:	14 c7       	rjmp	.+3624   	; 0x4d4e <main+0x2c02>
    3f26:	98 01       	movw	r18, r16
    3f28:	11 23       	and	r17, r17
    3f2a:	14 f4       	brge	.+4      	; 0x3f30 <main+0x1de4>
    3f2c:	20 e0       	ldi	r18, 0x00	; 0
    3f2e:	30 e0       	ldi	r19, 0x00	; 0
    3f30:	33 27       	eor	r19, r19
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    3f32:	12 16       	cp	r1, r18
    3f34:	13 06       	cpc	r1, r19
    3f36:	0c f0       	brlt	.+2      	; 0x3f3a <main+0x1dee>
    3f38:	79 c2       	rjmp	.+1266   	; 0x442c <main+0x22e0>
    3f3a:	02 c0       	rjmp	.+4      	; 0x3f40 <main+0x1df4>
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
			if (*arr != 0)
    3f3c:	2e e0       	ldi	r18, 0x0E	; 14
    3f3e:	30 e0       	ldi	r19, 0x00	; 0
    3f40:	61 e0       	ldi	r22, 0x01	; 1
    3f42:	80 e0       	ldi	r24, 0x00	; 0
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	47 e3       	ldi	r20, 0x37	; 55
    3f48:	51 e0       	ldi	r21, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    3f4a:	70 e0       	ldi	r23, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    3f4c:	f4 01       	movw	r30, r8
    3f4e:	e8 0f       	add	r30, r24
    3f50:	f9 1f       	adc	r31, r25
    3f52:	a0 81       	ld	r26, Z
    3f54:	a5 34       	cpi	r26, 0x45	; 69
    3f56:	61 f4       	brne	.+24     	; 0x3f70 <main+0x1e24>
    3f58:	a2 e3       	ldi	r26, 0x32	; 50
    3f5a:	b1 e0       	ldi	r27, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    3f5c:	01 91       	ld	r16, Z+
    3f5e:	1d 91       	ld	r17, X+
    3f60:	01 13       	cpse	r16, r17
					{
						status = false;
    3f62:	67 2f       	mov	r22, r23
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    3f64:	a4 17       	cp	r26, r20
    3f66:	b5 07       	cpc	r27, r21
    3f68:	c9 f7       	brne	.-14     	; 0x3f5c <main+0x1e10>
    3f6a:	05 96       	adiw	r24, 0x05	; 5
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    3f6c:	61 11       	cpse	r22, r1
    3f6e:	5e c2       	rjmp	.+1212   	; 0x442c <main+0x22e0>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    3f70:	01 96       	adiw	r24, 0x01	; 1
    3f72:	82 17       	cp	r24, r18
    3f74:	93 07       	cpc	r25, r19
    3f76:	54 f3       	brlt	.-44     	; 0x3f4c <main+0x1e00>
    3f78:	51 e0       	ldi	r21, 0x01	; 1
    3f7a:	80 e0       	ldi	r24, 0x00	; 0
    3f7c:	90 e0       	ldi	r25, 0x00	; 0
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    3f7e:	60 e0       	ldi	r22, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    3f80:	f4 01       	movw	r30, r8
    3f82:	e8 0f       	add	r30, r24
    3f84:	f9 1f       	adc	r31, r25
    3f86:	40 81       	ld	r20, Z
    3f88:	4f 34       	cpi	r20, 0x4F	; 79
    3f8a:	69 f4       	brne	.+26     	; 0x3fa6 <main+0x1e5a>
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    3f8c:	e8 eb       	ldi	r30, 0xB8	; 184
    3f8e:	f0 e0       	ldi	r31, 0x00	; 0
    3f90:	ec 0f       	add	r30, r28
    3f92:	fd 1f       	adc	r31, r29
    3f94:	e8 0f       	add	r30, r24
    3f96:	f9 1f       	adc	r31, r25
    3f98:	40 81       	ld	r20, Z
    3f9a:	4b 34       	cpi	r20, 0x4B	; 75
    3f9c:	09 f0       	breq	.+2      	; 0x3fa0 <main+0x1e54>
    3f9e:	21 c6       	rjmp	.+3138   	; 0x4be2 <main+0x2a96>
    3fa0:	02 96       	adiw	r24, 0x02	; 2
					{
						status = false;
					}
				}
				if (status)
    3fa2:	51 11       	cpse	r21, r1
    3fa4:	43 c2       	rjmp	.+1158   	; 0x442c <main+0x22e0>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    3fa6:	01 96       	adiw	r24, 0x01	; 1
    3fa8:	82 17       	cp	r24, r18
    3faa:	93 07       	cpc	r25, r19
    3fac:	4c f3       	brlt	.-46     	; 0x3f80 <main+0x1e34>
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    3fae:	f4 01       	movw	r30, r8
    3fb0:	80 81       	ld	r24, Z
    3fb2:	8e 33       	cpi	r24, 0x3E	; 62
    3fb4:	09 f4       	brne	.+2      	; 0x3fb8 <main+0x1e6c>
    3fb6:	3a c2       	rjmp	.+1140   	; 0x442c <main+0x22e0>
    3fb8:	31 96       	adiw	r30, 0x01	; 1
    3fba:	28 0d       	add	r18, r8
    3fbc:	39 1d       	adc	r19, r9
    3fbe:	04 c0       	rjmp	.+8      	; 0x3fc8 <main+0x1e7c>
    3fc0:	81 91       	ld	r24, Z+
    3fc2:	8e 33       	cpi	r24, 0x3E	; 62
    3fc4:	09 f4       	brne	.+2      	; 0x3fc8 <main+0x1e7c>
    3fc6:	32 c2       	rjmp	.+1124   	; 0x442c <main+0x22e0>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    3fc8:	2e 17       	cp	r18, r30
    3fca:	3f 07       	cpc	r19, r31
    3fcc:	c9 f7       	brne	.-14     	; 0x3fc0 <main+0x1e74>
    3fce:	2e c2       	rjmp	.+1116   	; 0x442c <main+0x22e0>
    3fd0:	ff ef       	ldi	r31, 0xFF	; 255
    3fd2:	20 e7       	ldi	r18, 0x70	; 112
    3fd4:	32 e0       	ldi	r19, 0x02	; 2
    3fd6:	f1 50       	subi	r31, 0x01	; 1
    3fd8:	20 40       	sbci	r18, 0x00	; 0
    3fda:	30 40       	sbci	r19, 0x00	; 0
    3fdc:	e1 f7       	brne	.-8      	; 0x3fd6 <main+0x1e8a>
    3fde:	00 c0       	rjmp	.+0      	; 0x3fe0 <main+0x1e94>
    3fe0:	00 00       	nop
		if (*getPhoneNumber(index) == 0)
		{
			return false;
		}
		_delay_ms(50);
		strcpy(command,"AT+CMGS=");											//copy command
    3fe2:	89 e0       	ldi	r24, 0x09	; 9
    3fe4:	ed e8       	ldi	r30, 0x8D	; 141
    3fe6:	f1 e0       	ldi	r31, 0x01	; 1
    3fe8:	d5 01       	movw	r26, r10
    3fea:	01 90       	ld	r0, Z+
    3fec:	0d 92       	st	X+, r0
    3fee:	8a 95       	dec	r24
    3ff0:	e1 f7       	brne	.-8      	; 0x3fea <main+0x1e9e>
		strcpy(command+9,getPhoneNumber(index));							//copy phone number
    3ff2:	c5 01       	movw	r24, r10
    3ff4:	09 96       	adiw	r24, 0x09	; 9
    3ff6:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
		command[8] = command[19] = '"';										//set <"> for phone number
    3ffa:	82 e2       	ldi	r24, 0x22	; 34
    3ffc:	d5 01       	movw	r26, r10
    3ffe:	53 96       	adiw	r26, 0x13	; 19
    4000:	8c 93       	st	X, r24
    4002:	53 97       	sbiw	r26, 0x13	; 19
    4004:	18 96       	adiw	r26, 0x08	; 8
    4006:	8c 93       	st	X, r24
    4008:	18 97       	sbiw	r26, 0x08	; 8
		command[20] = 0;													//close number with <">, run over the dummy char
    400a:	54 96       	adiw	r26, 0x14	; 20
    400c:	1c 92       	st	X, r1
	char _1minConterSMSreceived, _10secRestetGSMdelay , _GSMerrorCounter;
	bool _newData, _startTimeCounterSMSreceived, _startTimeCounterGSMreset;
	int _newDataIndex;
	bool sendCommand(const char ptr[], bool checkAck = false){
		int condition;
		gsmSMS.UARTstring(ptr,0);
    400e:	40 e0       	ldi	r20, 0x00	; 0
    4010:	b5 01       	movw	r22, r10
    4012:	8d e4       	ldi	r24, 0x4D	; 77
    4014:	94 e0       	ldi	r25, 0x04	; 4
    4016:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		gsmSMS.UARTsend(13);
    401a:	6d e0       	ldi	r22, 0x0D	; 13
    401c:	8d e4       	ldi	r24, 0x4D	; 77
    401e:	94 e0       	ldi	r25, 0x04	; 4
    4020:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		if (checkAck)
		{
			char arr[15] = {0};
    4024:	8f e0       	ldi	r24, 0x0F	; 15
    4026:	f4 01       	movw	r30, r8
    4028:	11 92       	st	Z+, r1
    402a:	8a 95       	dec	r24
    402c:	e9 f7       	brne	.-6      	; 0x4028 <main+0x1edc>
			RXinterruptDisable();
    402e:	e1 ec       	ldi	r30, 0xC1	; 193
    4030:	f0 e0       	ldi	r31, 0x00	; 0
    4032:	80 81       	ld	r24, Z
    4034:	8f 77       	andi	r24, 0x7F	; 127
    4036:	80 83       	st	Z, r24
    4038:	64 01       	movw	r12, r8
			return false;
		}
		return 0;
	}
	int checkForACkPacket(char getData[], int arrSize){
		int i = 0;
    403a:	00 e0       	ldi	r16, 0x00	; 0
    403c:	10 e0       	ldi	r17, 0x00	; 0
		char data = 0;
		
		do 
		{
			data = gsmSMS.UARTreceive();
    403e:	8d e4       	ldi	r24, 0x4D	; 77
    4040:	94 e0       	ldi	r25, 0x04	; 4
    4042:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <_ZN4Uart11UARTreceiveEv>
			getData[i++] = data;
    4046:	0f 5f       	subi	r16, 0xFF	; 255
    4048:	1f 4f       	sbci	r17, 0xFF	; 255
    404a:	d6 01       	movw	r26, r12
    404c:	8d 93       	st	X+, r24
    404e:	6d 01       	movw	r12, r26
		}while(gsmSMS.checkForData() && i < arrSize);
    4050:	8d e4       	ldi	r24, 0x4D	; 77
    4052:	94 e0       	ldi	r25, 0x04	; 4
    4054:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <_ZN4Uart12checkForDataEv>
    4058:	88 23       	and	r24, r24
    405a:	09 f4       	brne	.+2      	; 0x405e <main+0x1f12>
    405c:	b6 c4       	rjmp	.+2412   	; 0x49ca <main+0x287e>
    405e:	0e 30       	cpi	r16, 0x0E	; 14
    4060:	11 05       	cpc	r17, r1
    4062:	69 f7       	brne	.-38     	; 0x403e <main+0x1ef2>
    4064:	81 c6       	rjmp	.+3330   	; 0x4d68 <main+0x2c1c>
    4066:	98 01       	movw	r18, r16
    4068:	11 23       	and	r17, r17
    406a:	14 f4       	brge	.+4      	; 0x4070 <main+0x1f24>
    406c:	20 e0       	ldi	r18, 0x00	; 0
    406e:	30 e0       	ldi	r19, 0x00	; 0
    4070:	33 27       	eor	r19, r19
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    4072:	12 16       	cp	r1, r18
    4074:	13 06       	cpc	r1, r19
    4076:	0c f0       	brlt	.+2      	; 0x407a <main+0x1f2e>
    4078:	48 c0       	rjmp	.+144    	; 0x410a <main+0x1fbe>
    407a:	02 c0       	rjmp	.+4      	; 0x4080 <main+0x1f34>
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
			if (*arr != 0)
    407c:	2e e0       	ldi	r18, 0x0E	; 14
    407e:	30 e0       	ldi	r19, 0x00	; 0
    4080:	61 e0       	ldi	r22, 0x01	; 1
    4082:	80 e0       	ldi	r24, 0x00	; 0
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	47 e3       	ldi	r20, 0x37	; 55
    4088:	51 e0       	ldi	r21, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    408a:	70 e0       	ldi	r23, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    408c:	f4 01       	movw	r30, r8
    408e:	e8 0f       	add	r30, r24
    4090:	f9 1f       	adc	r31, r25
    4092:	a0 81       	ld	r26, Z
    4094:	a5 34       	cpi	r26, 0x45	; 69
    4096:	61 f4       	brne	.+24     	; 0x40b0 <main+0x1f64>
    4098:	a2 e3       	ldi	r26, 0x32	; 50
    409a:	b1 e0       	ldi	r27, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    409c:	01 91       	ld	r16, Z+
    409e:	1d 91       	ld	r17, X+
    40a0:	01 13       	cpse	r16, r17
					{
						status = false;
    40a2:	67 2f       	mov	r22, r23
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    40a4:	a4 17       	cp	r26, r20
    40a6:	b5 07       	cpc	r27, r21
    40a8:	c9 f7       	brne	.-14     	; 0x409c <main+0x1f50>
    40aa:	05 96       	adiw	r24, 0x05	; 5
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    40ac:	61 11       	cpse	r22, r1
    40ae:	2d c0       	rjmp	.+90     	; 0x410a <main+0x1fbe>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    40b0:	01 96       	adiw	r24, 0x01	; 1
    40b2:	82 17       	cp	r24, r18
    40b4:	93 07       	cpc	r25, r19
    40b6:	54 f3       	brlt	.-44     	; 0x408c <main+0x1f40>
    40b8:	51 e0       	ldi	r21, 0x01	; 1
    40ba:	80 e0       	ldi	r24, 0x00	; 0
    40bc:	90 e0       	ldi	r25, 0x00	; 0
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    40be:	60 e0       	ldi	r22, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    40c0:	f4 01       	movw	r30, r8
    40c2:	e8 0f       	add	r30, r24
    40c4:	f9 1f       	adc	r31, r25
    40c6:	40 81       	ld	r20, Z
    40c8:	4f 34       	cpi	r20, 0x4F	; 79
    40ca:	69 f4       	brne	.+26     	; 0x40e6 <main+0x1f9a>
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    40cc:	e8 eb       	ldi	r30, 0xB8	; 184
    40ce:	f0 e0       	ldi	r31, 0x00	; 0
    40d0:	ec 0f       	add	r30, r28
    40d2:	fd 1f       	adc	r31, r29
    40d4:	e8 0f       	add	r30, r24
    40d6:	f9 1f       	adc	r31, r25
    40d8:	40 81       	ld	r20, Z
    40da:	4b 34       	cpi	r20, 0x4B	; 75
    40dc:	09 f0       	breq	.+2      	; 0x40e0 <main+0x1f94>
    40de:	84 c5       	rjmp	.+2824   	; 0x4be8 <main+0x2a9c>
    40e0:	02 96       	adiw	r24, 0x02	; 2
					{
						status = false;
					}
				}
				if (status)
    40e2:	51 11       	cpse	r21, r1
    40e4:	12 c0       	rjmp	.+36     	; 0x410a <main+0x1fbe>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    40e6:	01 96       	adiw	r24, 0x01	; 1
    40e8:	82 17       	cp	r24, r18
    40ea:	93 07       	cpc	r25, r19
    40ec:	4c f3       	brlt	.-46     	; 0x40c0 <main+0x1f74>
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    40ee:	f4 01       	movw	r30, r8
    40f0:	80 81       	ld	r24, Z
    40f2:	8e 33       	cpi	r24, 0x3E	; 62
    40f4:	51 f0       	breq	.+20     	; 0x410a <main+0x1fbe>
    40f6:	31 96       	adiw	r30, 0x01	; 1
    40f8:	28 0d       	add	r18, r8
    40fa:	39 1d       	adc	r19, r9
    40fc:	03 c0       	rjmp	.+6      	; 0x4104 <main+0x1fb8>
    40fe:	81 91       	ld	r24, Z+
    4100:	8e 33       	cpi	r24, 0x3E	; 62
    4102:	19 f0       	breq	.+6      	; 0x410a <main+0x1fbe>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    4104:	2e 17       	cp	r18, r30
    4106:	3f 07       	cpc	r19, r31
    4108:	d1 f7       	brne	.-12     	; 0x40fe <main+0x1fb2>
		command[8] = command[19] = '"';										//set <"> for phone number
		command[20] = 0;													//close number with <">, run over the dummy char
		
		sendCommand(command,true);
		
		gsmSMS.UARTstring(ptr,0);
    410a:	40 e0       	ldi	r20, 0x00	; 0
    410c:	60 ee       	ldi	r22, 0xE0	; 224
    410e:	72 e0       	ldi	r23, 0x02	; 2
    4110:	8d e4       	ldi	r24, 0x4D	; 77
    4112:	94 e0       	ldi	r25, 0x04	; 4
    4114:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		if (massage5 != NULL)
		{
			gsmSMS.UARTsend(13);
			gsmSMS.UARTstring(massage5,0);
		}
		gsmSMS.UARTsend(26);
    4118:	6a e1       	ldi	r22, 0x1A	; 26
    411a:	8d e4       	ldi	r24, 0x4D	; 77
    411c:	94 e0       	ldi	r25, 0x04	; 4
    411e:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		gsmSMS.UARTsend(13);
    4122:	6d e0       	ldi	r22, 0x0D	; 13
    4124:	8d e4       	ldi	r24, 0x4D	; 77
    4126:	94 e0       	ldi	r25, 0x04	; 4
    4128:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		_startTimeCounterSMSreceived = true;
    412c:	81 e0       	ldi	r24, 0x01	; 1
    412e:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <top+0x107>
    4132:	7c c1       	rjmp	.+760    	; 0x442c <main+0x22e0>
    4134:	ff ef       	ldi	r31, 0xFF	; 255
    4136:	20 e7       	ldi	r18, 0x70	; 112
    4138:	32 e0       	ldi	r19, 0x02	; 2
    413a:	f1 50       	subi	r31, 0x01	; 1
    413c:	20 40       	sbci	r18, 0x00	; 0
    413e:	30 40       	sbci	r19, 0x00	; 0
    4140:	e1 f7       	brne	.-8      	; 0x413a <main+0x1fee>
    4142:	00 c0       	rjmp	.+0      	; 0x4144 <main+0x1ff8>
    4144:	00 00       	nop
		if (*getPhoneNumber(index) == 0)
		{
			return false;
		}
		_delay_ms(50);
		strcpy(command,"AT+CMGS=");											//copy command
    4146:	89 e0       	ldi	r24, 0x09	; 9
    4148:	ed e8       	ldi	r30, 0x8D	; 141
    414a:	f1 e0       	ldi	r31, 0x01	; 1
    414c:	d5 01       	movw	r26, r10
    414e:	01 90       	ld	r0, Z+
    4150:	0d 92       	st	X+, r0
    4152:	8a 95       	dec	r24
    4154:	e1 f7       	brne	.-8      	; 0x414e <main+0x2002>
		strcpy(command+9,getPhoneNumber(index));							//copy phone number
    4156:	c5 01       	movw	r24, r10
    4158:	09 96       	adiw	r24, 0x09	; 9
    415a:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
		command[8] = command[19] = '"';										//set <"> for phone number
    415e:	82 e2       	ldi	r24, 0x22	; 34
    4160:	d5 01       	movw	r26, r10
    4162:	53 96       	adiw	r26, 0x13	; 19
    4164:	8c 93       	st	X, r24
    4166:	53 97       	sbiw	r26, 0x13	; 19
    4168:	18 96       	adiw	r26, 0x08	; 8
    416a:	8c 93       	st	X, r24
    416c:	18 97       	sbiw	r26, 0x08	; 8
		command[20] = 0;													//close number with <">, run over the dummy char
    416e:	54 96       	adiw	r26, 0x14	; 20
    4170:	1c 92       	st	X, r1
	char _1minConterSMSreceived, _10secRestetGSMdelay , _GSMerrorCounter;
	bool _newData, _startTimeCounterSMSreceived, _startTimeCounterGSMreset;
	int _newDataIndex;
	bool sendCommand(const char ptr[], bool checkAck = false){
		int condition;
		gsmSMS.UARTstring(ptr,0);
    4172:	40 e0       	ldi	r20, 0x00	; 0
    4174:	b5 01       	movw	r22, r10
    4176:	8d e4       	ldi	r24, 0x4D	; 77
    4178:	94 e0       	ldi	r25, 0x04	; 4
    417a:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		gsmSMS.UARTsend(13);
    417e:	6d e0       	ldi	r22, 0x0D	; 13
    4180:	8d e4       	ldi	r24, 0x4D	; 77
    4182:	94 e0       	ldi	r25, 0x04	; 4
    4184:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		if (checkAck)
		{
			char arr[15] = {0};
    4188:	8f e0       	ldi	r24, 0x0F	; 15
    418a:	f4 01       	movw	r30, r8
    418c:	11 92       	st	Z+, r1
    418e:	8a 95       	dec	r24
    4190:	e9 f7       	brne	.-6      	; 0x418c <main+0x2040>
			RXinterruptDisable();
    4192:	e1 ec       	ldi	r30, 0xC1	; 193
    4194:	f0 e0       	ldi	r31, 0x00	; 0
    4196:	80 81       	ld	r24, Z
    4198:	8f 77       	andi	r24, 0x7F	; 127
    419a:	80 83       	st	Z, r24
    419c:	64 01       	movw	r12, r8
			return false;
		}
		return 0;
	}
	int checkForACkPacket(char getData[], int arrSize){
		int i = 0;
    419e:	00 e0       	ldi	r16, 0x00	; 0
    41a0:	10 e0       	ldi	r17, 0x00	; 0
		char data = 0;
		
		do 
		{
			data = gsmSMS.UARTreceive();
    41a2:	8d e4       	ldi	r24, 0x4D	; 77
    41a4:	94 e0       	ldi	r25, 0x04	; 4
    41a6:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <_ZN4Uart11UARTreceiveEv>
			getData[i++] = data;
    41aa:	0f 5f       	subi	r16, 0xFF	; 255
    41ac:	1f 4f       	sbci	r17, 0xFF	; 255
    41ae:	d6 01       	movw	r26, r12
    41b0:	8d 93       	st	X+, r24
    41b2:	6d 01       	movw	r12, r26
		}while(gsmSMS.checkForData() && i < arrSize);
    41b4:	8d e4       	ldi	r24, 0x4D	; 77
    41b6:	94 e0       	ldi	r25, 0x04	; 4
    41b8:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <_ZN4Uart12checkForDataEv>
    41bc:	88 23       	and	r24, r24
    41be:	09 f4       	brne	.+2      	; 0x41c2 <main+0x2076>
    41c0:	12 c4       	rjmp	.+2084   	; 0x49e6 <main+0x289a>
    41c2:	0e 30       	cpi	r16, 0x0E	; 14
    41c4:	11 05       	cpc	r17, r1
    41c6:	69 f7       	brne	.-38     	; 0x41a2 <main+0x2056>
    41c8:	dc c5       	rjmp	.+3000   	; 0x4d82 <main+0x2c36>
    41ca:	98 01       	movw	r18, r16
    41cc:	11 23       	and	r17, r17
    41ce:	14 f4       	brge	.+4      	; 0x41d4 <main+0x2088>
    41d0:	20 e0       	ldi	r18, 0x00	; 0
    41d2:	30 e0       	ldi	r19, 0x00	; 0
    41d4:	33 27       	eor	r19, r19
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    41d6:	12 16       	cp	r1, r18
    41d8:	13 06       	cpc	r1, r19
    41da:	0c f0       	brlt	.+2      	; 0x41de <main+0x2092>
    41dc:	48 c0       	rjmp	.+144    	; 0x426e <main+0x2122>
    41de:	02 c0       	rjmp	.+4      	; 0x41e4 <main+0x2098>
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
			if (*arr != 0)
    41e0:	2e e0       	ldi	r18, 0x0E	; 14
    41e2:	30 e0       	ldi	r19, 0x00	; 0
    41e4:	61 e0       	ldi	r22, 0x01	; 1
    41e6:	80 e0       	ldi	r24, 0x00	; 0
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	47 e3       	ldi	r20, 0x37	; 55
    41ec:	51 e0       	ldi	r21, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    41ee:	70 e0       	ldi	r23, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    41f0:	f4 01       	movw	r30, r8
    41f2:	e8 0f       	add	r30, r24
    41f4:	f9 1f       	adc	r31, r25
    41f6:	a0 81       	ld	r26, Z
    41f8:	a5 34       	cpi	r26, 0x45	; 69
    41fa:	61 f4       	brne	.+24     	; 0x4214 <main+0x20c8>
    41fc:	a2 e3       	ldi	r26, 0x32	; 50
    41fe:	b1 e0       	ldi	r27, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    4200:	01 91       	ld	r16, Z+
    4202:	1d 91       	ld	r17, X+
    4204:	01 13       	cpse	r16, r17
					{
						status = false;
    4206:	67 2f       	mov	r22, r23
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    4208:	4a 17       	cp	r20, r26
    420a:	5b 07       	cpc	r21, r27
    420c:	c9 f7       	brne	.-14     	; 0x4200 <main+0x20b4>
    420e:	05 96       	adiw	r24, 0x05	; 5
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    4210:	61 11       	cpse	r22, r1
    4212:	2d c0       	rjmp	.+90     	; 0x426e <main+0x2122>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    4214:	01 96       	adiw	r24, 0x01	; 1
    4216:	82 17       	cp	r24, r18
    4218:	93 07       	cpc	r25, r19
    421a:	54 f3       	brlt	.-44     	; 0x41f0 <main+0x20a4>
    421c:	51 e0       	ldi	r21, 0x01	; 1
    421e:	80 e0       	ldi	r24, 0x00	; 0
    4220:	90 e0       	ldi	r25, 0x00	; 0
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    4222:	60 e0       	ldi	r22, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    4224:	f4 01       	movw	r30, r8
    4226:	e8 0f       	add	r30, r24
    4228:	f9 1f       	adc	r31, r25
    422a:	40 81       	ld	r20, Z
    422c:	4f 34       	cpi	r20, 0x4F	; 79
    422e:	69 f4       	brne	.+26     	; 0x424a <main+0x20fe>
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    4230:	e8 eb       	ldi	r30, 0xB8	; 184
    4232:	f0 e0       	ldi	r31, 0x00	; 0
    4234:	ec 0f       	add	r30, r28
    4236:	fd 1f       	adc	r31, r29
    4238:	e8 0f       	add	r30, r24
    423a:	f9 1f       	adc	r31, r25
    423c:	40 81       	ld	r20, Z
    423e:	4b 34       	cpi	r20, 0x4B	; 75
    4240:	09 f0       	breq	.+2      	; 0x4244 <main+0x20f8>
    4242:	d5 c4       	rjmp	.+2474   	; 0x4bee <main+0x2aa2>
    4244:	02 96       	adiw	r24, 0x02	; 2
					{
						status = false;
					}
				}
				if (status)
    4246:	51 11       	cpse	r21, r1
    4248:	12 c0       	rjmp	.+36     	; 0x426e <main+0x2122>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    424a:	01 96       	adiw	r24, 0x01	; 1
    424c:	82 17       	cp	r24, r18
    424e:	93 07       	cpc	r25, r19
    4250:	4c f3       	brlt	.-46     	; 0x4224 <main+0x20d8>
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    4252:	f4 01       	movw	r30, r8
    4254:	80 81       	ld	r24, Z
    4256:	8e 33       	cpi	r24, 0x3E	; 62
    4258:	51 f0       	breq	.+20     	; 0x426e <main+0x2122>
    425a:	31 96       	adiw	r30, 0x01	; 1
    425c:	28 0d       	add	r18, r8
    425e:	39 1d       	adc	r19, r9
    4260:	03 c0       	rjmp	.+6      	; 0x4268 <main+0x211c>
    4262:	81 91       	ld	r24, Z+
    4264:	8e 33       	cpi	r24, 0x3E	; 62
    4266:	19 f0       	breq	.+6      	; 0x426e <main+0x2122>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    4268:	2e 17       	cp	r18, r30
    426a:	3f 07       	cpc	r19, r31
    426c:	d1 f7       	brne	.-12     	; 0x4262 <main+0x2116>
		command[8] = command[19] = '"';										//set <"> for phone number
		command[20] = 0;													//close number with <">, run over the dummy char
		
		sendCommand(command,true);
		
		gsmSMS.UARTstring(ptr,0);
    426e:	40 e0       	ldi	r20, 0x00	; 0
    4270:	be 01       	movw	r22, r28
    4272:	6b 52       	subi	r22, 0x2B	; 43
    4274:	7f 4f       	sbci	r23, 0xFF	; 255
    4276:	8d e4       	ldi	r24, 0x4D	; 77
    4278:	94 e0       	ldi	r25, 0x04	; 4
    427a:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		if (massage5 != NULL)
		{
			gsmSMS.UARTsend(13);
			gsmSMS.UARTstring(massage5,0);
		}
		gsmSMS.UARTsend(26);
    427e:	6a e1       	ldi	r22, 0x1A	; 26
    4280:	8d e4       	ldi	r24, 0x4D	; 77
    4282:	94 e0       	ldi	r25, 0x04	; 4
    4284:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		gsmSMS.UARTsend(13);
    4288:	6d e0       	ldi	r22, 0x0D	; 13
    428a:	8d e4       	ldi	r24, 0x4D	; 77
    428c:	94 e0       	ldi	r25, 0x04	; 4
    428e:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		_startTimeCounterSMSreceived = true;
    4292:	81 e0       	ldi	r24, 0x01	; 1
    4294:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <top+0x107>
    4298:	c9 c0       	rjmp	.+402    	; 0x442c <main+0x22e0>
			top.clearRXackID();
			top.readSMS(arr,100,true,SMSrecievedPhoneNumber);
			int index = top.inputCommandBySMS(arr,100,SMSrecievedPhoneNumber);
			top.commandAction(index,arr);
		}
		else if (top.getRXackID() == 3)
    429a:	83 30       	cpi	r24, 0x03	; 3
    429c:	91 05       	cpc	r25, r1
    429e:	09 f0       	breq	.+2      	; 0x42a2 <main+0x2156>
    42a0:	bd c0       	rjmp	.+378    	; 0x441c <main+0x22d0>
	}
	int getRXackID(){
		return _newDataIndex;
	}
	void clearRXackID(){
		_newDataIndex = 0;
    42a2:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <top+0x10a>
    42a6:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <top+0x109>
		sendCommand("AT+MORING=1",true);
		copyPhoneFromSimToRAM();
	}
	bool sendSMS(const char *ptr,int index, const char *massage2 = NULL, const char *massage3 = NULL, const char *massage4 = NULL, const char *massage5 = NULL){
		char command[25];
		if (*getPhoneNumber(index) == 0)
    42aa:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <top+0x3f>
    42ae:	88 23       	and	r24, r24
    42b0:	09 f4       	brne	.+2      	; 0x42b4 <main+0x2168>
    42b2:	bc c0       	rjmp	.+376    	; 0x442c <main+0x22e0>
    42b4:	ff ef       	ldi	r31, 0xFF	; 255
    42b6:	20 e7       	ldi	r18, 0x70	; 112
    42b8:	32 e0       	ldi	r19, 0x02	; 2
    42ba:	f1 50       	subi	r31, 0x01	; 1
    42bc:	20 40       	sbci	r18, 0x00	; 0
    42be:	30 40       	sbci	r19, 0x00	; 0
    42c0:	e1 f7       	brne	.-8      	; 0x42ba <main+0x216e>
    42c2:	00 c0       	rjmp	.+0      	; 0x42c4 <main+0x2178>
    42c4:	00 00       	nop
		{
			return false;
		}
		_delay_ms(50);
		strcpy(command,"AT+CMGS=");											//copy command
    42c6:	89 e0       	ldi	r24, 0x09	; 9
    42c8:	ed e8       	ldi	r30, 0x8D	; 141
    42ca:	f1 e0       	ldi	r31, 0x01	; 1
    42cc:	d5 01       	movw	r26, r10
    42ce:	01 90       	ld	r0, Z+
    42d0:	0d 92       	st	X+, r0
    42d2:	8a 95       	dec	r24
    42d4:	e1 f7       	brne	.-8      	; 0x42ce <main+0x2182>
		strcpy(command+9,getPhoneNumber(index));							//copy phone number
    42d6:	6c e8       	ldi	r22, 0x8C	; 140
    42d8:	74 e0       	ldi	r23, 0x04	; 4
    42da:	c5 01       	movw	r24, r10
    42dc:	09 96       	adiw	r24, 0x09	; 9
    42de:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
		command[8] = command[19] = '"';										//set <"> for phone number
    42e2:	82 e2       	ldi	r24, 0x22	; 34
    42e4:	d5 01       	movw	r26, r10
    42e6:	53 96       	adiw	r26, 0x13	; 19
    42e8:	8c 93       	st	X, r24
    42ea:	53 97       	sbiw	r26, 0x13	; 19
    42ec:	18 96       	adiw	r26, 0x08	; 8
    42ee:	8c 93       	st	X, r24
    42f0:	18 97       	sbiw	r26, 0x08	; 8
		command[20] = 0;													//close number with <">, run over the dummy char
    42f2:	54 96       	adiw	r26, 0x14	; 20
    42f4:	1c 92       	st	X, r1
	char _1minConterSMSreceived, _10secRestetGSMdelay , _GSMerrorCounter;
	bool _newData, _startTimeCounterSMSreceived, _startTimeCounterGSMreset;
	int _newDataIndex;
	bool sendCommand(const char ptr[], bool checkAck = false){
		int condition;
		gsmSMS.UARTstring(ptr,0);
    42f6:	40 e0       	ldi	r20, 0x00	; 0
    42f8:	b5 01       	movw	r22, r10
    42fa:	8d e4       	ldi	r24, 0x4D	; 77
    42fc:	94 e0       	ldi	r25, 0x04	; 4
    42fe:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		gsmSMS.UARTsend(13);
    4302:	6d e0       	ldi	r22, 0x0D	; 13
    4304:	8d e4       	ldi	r24, 0x4D	; 77
    4306:	94 e0       	ldi	r25, 0x04	; 4
    4308:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		if (checkAck)
		{
			char arr[15] = {0};
    430c:	8f e0       	ldi	r24, 0x0F	; 15
    430e:	f7 01       	movw	r30, r14
    4310:	11 92       	st	Z+, r1
    4312:	8a 95       	dec	r24
    4314:	e9 f7       	brne	.-6      	; 0x4310 <main+0x21c4>
			RXinterruptDisable();
    4316:	e1 ec       	ldi	r30, 0xC1	; 193
    4318:	f0 e0       	ldi	r31, 0x00	; 0
    431a:	80 81       	ld	r24, Z
    431c:	8f 77       	andi	r24, 0x7F	; 127
    431e:	80 83       	st	Z, r24
    4320:	67 01       	movw	r12, r14
			return false;
		}
		return 0;
	}
	int checkForACkPacket(char getData[], int arrSize){
		int i = 0;
    4322:	00 e0       	ldi	r16, 0x00	; 0
    4324:	10 e0       	ldi	r17, 0x00	; 0
		char data = 0;
		
		do 
		{
			data = gsmSMS.UARTreceive();
    4326:	8d e4       	ldi	r24, 0x4D	; 77
    4328:	94 e0       	ldi	r25, 0x04	; 4
    432a:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <_ZN4Uart11UARTreceiveEv>
			getData[i++] = data;
    432e:	0f 5f       	subi	r16, 0xFF	; 255
    4330:	1f 4f       	sbci	r17, 0xFF	; 255
    4332:	d6 01       	movw	r26, r12
    4334:	8d 93       	st	X+, r24
    4336:	6d 01       	movw	r12, r26
		}while(gsmSMS.checkForData() && i < arrSize);
    4338:	8d e4       	ldi	r24, 0x4D	; 77
    433a:	94 e0       	ldi	r25, 0x04	; 4
    433c:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <_ZN4Uart12checkForDataEv>
    4340:	88 23       	and	r24, r24
    4342:	09 f4       	brne	.+2      	; 0x4346 <main+0x21fa>
    4344:	5e c3       	rjmp	.+1724   	; 0x4a02 <main+0x28b6>
    4346:	0e 30       	cpi	r16, 0x0E	; 14
    4348:	11 05       	cpc	r17, r1
    434a:	69 f7       	brne	.-38     	; 0x4326 <main+0x21da>
    434c:	27 c5       	rjmp	.+2638   	; 0x4d9c <main+0x2c50>
    434e:	98 01       	movw	r18, r16
    4350:	11 23       	and	r17, r17
    4352:	14 f4       	brge	.+4      	; 0x4358 <main+0x220c>
    4354:	20 e0       	ldi	r18, 0x00	; 0
    4356:	30 e0       	ldi	r19, 0x00	; 0
    4358:	33 27       	eor	r19, r19
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    435a:	12 16       	cp	r1, r18
    435c:	13 06       	cpc	r1, r19
    435e:	0c f0       	brlt	.+2      	; 0x4362 <main+0x2216>
    4360:	48 c0       	rjmp	.+144    	; 0x43f2 <main+0x22a6>
    4362:	02 c0       	rjmp	.+4      	; 0x4368 <main+0x221c>
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
			if (*arr != 0)
    4364:	2e e0       	ldi	r18, 0x0E	; 14
    4366:	30 e0       	ldi	r19, 0x00	; 0
    4368:	61 e0       	ldi	r22, 0x01	; 1
    436a:	80 e0       	ldi	r24, 0x00	; 0
    436c:	90 e0       	ldi	r25, 0x00	; 0
    436e:	47 e3       	ldi	r20, 0x37	; 55
    4370:	51 e0       	ldi	r21, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    4372:	70 e0       	ldi	r23, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    4374:	f7 01       	movw	r30, r14
    4376:	e8 0f       	add	r30, r24
    4378:	f9 1f       	adc	r31, r25
    437a:	a0 81       	ld	r26, Z
    437c:	a5 34       	cpi	r26, 0x45	; 69
    437e:	61 f4       	brne	.+24     	; 0x4398 <main+0x224c>
    4380:	a2 e3       	ldi	r26, 0x32	; 50
    4382:	b1 e0       	ldi	r27, 0x01	; 1
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    4384:	01 91       	ld	r16, Z+
    4386:	1d 91       	ld	r17, X+
    4388:	01 13       	cpse	r16, r17
					{
						status = false;
    438a:	67 2f       	mov	r22, r23
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    438c:	a4 17       	cp	r26, r20
    438e:	b5 07       	cpc	r27, r21
    4390:	c9 f7       	brne	.-14     	; 0x4384 <main+0x2238>
    4392:	05 96       	adiw	r24, 0x05	; 5
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    4394:	61 11       	cpse	r22, r1
    4396:	2d c0       	rjmp	.+90     	; 0x43f2 <main+0x22a6>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    4398:	01 96       	adiw	r24, 0x01	; 1
    439a:	82 17       	cp	r24, r18
    439c:	93 07       	cpc	r25, r19
    439e:	54 f3       	brlt	.-44     	; 0x4374 <main+0x2228>
    43a0:	51 e0       	ldi	r21, 0x01	; 1
    43a2:	80 e0       	ldi	r24, 0x00	; 0
    43a4:	90 e0       	ldi	r25, 0x00	; 0
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    43a6:	60 e0       	ldi	r22, 0x00	; 0
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    43a8:	f7 01       	movw	r30, r14
    43aa:	e8 0f       	add	r30, r24
    43ac:	f9 1f       	adc	r31, r25
    43ae:	40 81       	ld	r20, Z
    43b0:	4f 34       	cpi	r20, 0x4F	; 79
    43b2:	69 f4       	brne	.+26     	; 0x43ce <main+0x2282>
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    43b4:	e8 ea       	ldi	r30, 0xA8	; 168
    43b6:	f0 e0       	ldi	r31, 0x00	; 0
    43b8:	ec 0f       	add	r30, r28
    43ba:	fd 1f       	adc	r31, r29
    43bc:	e8 0f       	add	r30, r24
    43be:	f9 1f       	adc	r31, r25
    43c0:	40 81       	ld	r20, Z
    43c2:	4b 34       	cpi	r20, 0x4B	; 75
    43c4:	09 f0       	breq	.+2      	; 0x43c8 <main+0x227c>
    43c6:	16 c4       	rjmp	.+2092   	; 0x4bf4 <main+0x2aa8>
    43c8:	02 96       	adiw	r24, 0x02	; 2
					{
						status = false;
					}
				}
				if (status)
    43ca:	51 11       	cpse	r21, r1
    43cc:	12 c0       	rjmp	.+36     	; 0x43f2 <main+0x22a6>
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    43ce:	01 96       	adiw	r24, 0x01	; 1
    43d0:	82 17       	cp	r24, r18
    43d2:	93 07       	cpc	r25, r19
    43d4:	4c f3       	brlt	.-46     	; 0x43a8 <main+0x225c>
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    43d6:	f7 01       	movw	r30, r14
    43d8:	80 81       	ld	r24, Z
    43da:	8e 33       	cpi	r24, 0x3E	; 62
    43dc:	51 f0       	breq	.+20     	; 0x43f2 <main+0x22a6>
    43de:	31 96       	adiw	r30, 0x01	; 1
    43e0:	2e 0d       	add	r18, r14
    43e2:	3f 1d       	adc	r19, r15
    43e4:	03 c0       	rjmp	.+6      	; 0x43ec <main+0x22a0>
    43e6:	81 91       	ld	r24, Z+
    43e8:	8e 33       	cpi	r24, 0x3E	; 62
    43ea:	19 f0       	breq	.+6      	; 0x43f2 <main+0x22a6>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    43ec:	e2 17       	cp	r30, r18
    43ee:	f3 07       	cpc	r31, r19
    43f0:	d1 f7       	brne	.-12     	; 0x43e6 <main+0x229a>
		command[8] = command[19] = '"';										//set <"> for phone number
		command[20] = 0;													//close number with <">, run over the dummy char
		
		sendCommand(command,true);
		
		gsmSMS.UARTstring(ptr,0);
    43f2:	40 e0       	ldi	r20, 0x00	; 0
    43f4:	6d ee       	ldi	r22, 0xED	; 237
    43f6:	72 e0       	ldi	r23, 0x02	; 2
    43f8:	8d e4       	ldi	r24, 0x4D	; 77
    43fa:	94 e0       	ldi	r25, 0x04	; 4
    43fc:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		if (massage5 != NULL)
		{
			gsmSMS.UARTsend(13);
			gsmSMS.UARTstring(massage5,0);
		}
		gsmSMS.UARTsend(26);
    4400:	6a e1       	ldi	r22, 0x1A	; 26
    4402:	8d e4       	ldi	r24, 0x4D	; 77
    4404:	94 e0       	ldi	r25, 0x04	; 4
    4406:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		gsmSMS.UARTsend(13);
    440a:	6d e0       	ldi	r22, 0x0D	; 13
    440c:	8d e4       	ldi	r24, 0x4D	; 77
    440e:	94 e0       	ldi	r25, 0x04	; 4
    4410:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		_startTimeCounterSMSreceived = true;
    4414:	81 e0       	ldi	r24, 0x01	; 1
    4416:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <top+0x107>
    441a:	08 c0       	rjmp	.+16     	; 0x442c <main+0x22e0>
		else if (top.getRXackID() == 3)
		{
			top.clearRXackID();
			top.sendSMS("CALL WAS RECEIVED!",1);
		}
		else if (top.getRXackID() == 7)
    441c:	07 97       	sbiw	r24, 0x07	; 7
    441e:	31 f4       	brne	.+12     	; 0x442c <main+0x22e0>
	}
	int getRXackID(){
		return _newDataIndex;
	}
	void clearRXackID(){
		_newDataIndex = 0;
    4420:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <top+0x10a>
    4424:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <top+0x109>
			}
		}
		return false;
	}
	void emergencyCallIsanswer(){
		_callOneTimeOnEmergencyMode = false;
    4428:	10 92 e6 06 	sts	0x06E6, r1	; 0x8006e6 <top+0x299>
		{
			top.clearRXackID();
			top.emergencyCallIsanswer();
		}
		
		if(top.checkIfMoved())
    442c:	88 e5       	ldi	r24, 0x58	; 88
    442e:	95 e0       	ldi	r25, 0x05	; 5
    4430:	0e 94 9a 08 	call	0x1134	; 0x1134 <_ZN17MovedFromLocation12checkIfMovedEv>
    4434:	88 23       	and	r24, r24
    4436:	79 f0       	breq	.+30     	; 0x4456 <main+0x230a>
		{
			_startTimeCounterCarAlarm = true;
		}
	}
	void resetTimeConter(){
		_10minCounterCarAlarm = 0;
    4438:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <top+0x29e>
		if (_alarmOnOff)
    443c:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <top+0x296>
    4440:	88 23       	and	r24, r24
    4442:	11 f4       	brne	.+4      	; 0x4448 <main+0x22fc>
    4444:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <main+0x86>
		{
			_startTimeCounterEmergencyCarLocation = true;
    4448:	81 e0       	ldi	r24, 0x01	; 1
    444a:	80 93 e8 06 	sts	0x06E8, r24	; 0x8006e8 <top+0x29b>
			_emergencyAlarmON = true;
    444e:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <top+0x297>
    4452:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <main+0x86>
			_alarmOnOff = true;
		}
		return _alarmOnOff;
	}
	void startTimeCounter(){
		if (!_alarmOnOff)
    4456:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <top+0x296>
    445a:	81 11       	cpse	r24, r1
    445c:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <main+0x86>
		{
			_startTimeCounterCarAlarm = true;
    4460:	81 e0       	ldi	r24, 0x01	; 1
    4462:	80 93 e7 06 	sts	0x06E7, r24	; 0x8006e7 <top+0x29a>
    4466:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <main+0x86>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    446a:	f7 01       	movw	r30, r14
    446c:	e0 0f       	add	r30, r16
    446e:	f1 1f       	adc	r31, r17
    4470:	10 82       	st	Z, r1
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    4472:	e1 ec       	ldi	r30, 0xC1	; 193
    4474:	f0 e0       	ldi	r31, 0x00	; 0
    4476:	80 81       	ld	r24, Z
    4478:	80 68       	ori	r24, 0x80	; 128
    447a:	80 83       	st	Z, r24
			if (*arr != 0)
    447c:	d7 01       	movw	r26, r14
    447e:	8c 91       	ld	r24, X
    4480:	81 11       	cpse	r24, r1
    4482:	0c 94 43 11 	jmp	0x2286	; 0x2286 <main+0x13a>
    4486:	0c 94 6f 12 	jmp	0x24de	; 0x24de <main+0x392>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    448a:	f7 01       	movw	r30, r14
    448c:	e0 0f       	add	r30, r16
    448e:	f1 1f       	adc	r31, r17
    4490:	10 82       	st	Z, r1
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    4492:	e1 ec       	ldi	r30, 0xC1	; 193
    4494:	f0 e0       	ldi	r31, 0x00	; 0
    4496:	80 81       	ld	r24, Z
    4498:	80 68       	ori	r24, 0x80	; 128
    449a:	80 83       	st	Z, r24
			if (*arr != 0)
    449c:	f7 01       	movw	r30, r14
    449e:	80 81       	ld	r24, Z
    44a0:	81 11       	cpse	r24, r1
    44a2:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <main+0x2a4>
    44a6:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <main+0x34a>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    44aa:	fe 01       	movw	r30, r28
    44ac:	e0 0f       	add	r30, r16
    44ae:	f1 1f       	adc	r31, r17
    44b0:	11 82       	std	Z+1, r1	; 0x01
    44b2:	11 23       	and	r17, r17
    44b4:	14 f4       	brge	.+4      	; 0x44ba <main+0x236e>
    44b6:	00 e0       	ldi	r16, 0x00	; 0
    44b8:	10 e0       	ldi	r17, 0x00	; 0
    44ba:	11 27       	eor	r17, r17
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    44bc:	10 16       	cp	r1, r16
    44be:	11 06       	cpc	r1, r17
    44c0:	14 f4       	brge	.+4      	; 0x44c6 <main+0x237a>
    44c2:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <main+0x49e>
    44c6:	0c 94 59 13 	jmp	0x26b2	; 0x26b2 <main+0x566>
			while(arr[indexData++] != '\n' && indexData < arrSize);
			indexOk = indexData;	//OK must be after data
		}
		else
		{
			RXinterruptEnable();
    44ca:	e1 ec       	ldi	r30, 0xC1	; 193
    44cc:	f0 e0       	ldi	r31, 0x00	; 0
    44ce:	80 81       	ld	r24, Z
    44d0:	80 68       	ori	r24, 0x80	; 128
    44d2:	80 83       	st	Z, r24
    44d4:	0c 94 40 14 	jmp	0x2880	; 0x2880 <main+0x734>
			while(arr[indexOk++] != '\n' && indexOk < arrSize);
			//_recievedPackByCommand[indexNum+13] = 0;		//set end of string for strcpy()
		}
		else
		{
			RXinterruptEnable();
    44d8:	e1 ec       	ldi	r30, 0xC1	; 193
    44da:	f0 e0       	ldi	r31, 0x00	; 0
    44dc:	80 81       	ld	r24, Z
    44de:	80 68       	ori	r24, 0x80	; 128
    44e0:	80 83       	st	Z, r24
    44e2:	0c 94 40 14 	jmp	0x2880	; 0x2880 <main+0x734>
			return 0;
		}
		
		if (phoneNumber != NULL)
		{
			arr[indexNum+15] = '\0';
    44e6:	fe 01       	movw	r30, r28
    44e8:	e6 0f       	add	r30, r22
    44ea:	f7 1f       	adc	r31, r23
    44ec:	10 8a       	std	Z+16, r1	; 0x10
			//copy the phone number
			strcpy(phoneNumber,arr+indexNum+3);
    44ee:	6d 5f       	subi	r22, 0xFD	; 253
    44f0:	7f 4f       	sbci	r23, 0xFF	; 255
    44f2:	21 e0       	ldi	r18, 0x01	; 1
    44f4:	30 e0       	ldi	r19, 0x00	; 0
    44f6:	2c 0f       	add	r18, r28
    44f8:	3d 1f       	adc	r19, r29
    44fa:	62 0f       	add	r22, r18
    44fc:	73 1f       	adc	r23, r19
    44fe:	ce 01       	movw	r24, r28
    4500:	8a 59       	subi	r24, 0x9A	; 154
    4502:	9f 4f       	sbci	r25, 0xFF	; 255
    4504:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
			//set phone start number, always 0
			phoneNumber[0] = '0';
    4508:	80 e3       	ldi	r24, 0x30	; 48
    450a:	a7 96       	adiw	r28, 0x27	; 39
    450c:	8f af       	std	Y+63, r24	; 0x3f
    450e:	a7 97       	sbiw	r28, 0x27	; 39
			phoneNumber[10] = 0;
    4510:	e1 96       	adiw	r28, 0x31	; 49
    4512:	1f ae       	std	Y+63, r1	; 0x3f
    4514:	e1 97       	sbiw	r28, 0x31	; 49
		}
			
		arr[indexOk-2] = 0;	//put end of string after the end of data
    4516:	ef ef       	ldi	r30, 0xFF	; 255
    4518:	ff ef       	ldi	r31, 0xFF	; 255
    451a:	ec 0f       	add	r30, r28
    451c:	fd 1f       	adc	r31, r29
    451e:	ec 0d       	add	r30, r12
    4520:	fd 1d       	adc	r31, r13
    4522:	10 82       	st	Z, r1
		strcpy(arr,arr+indexData); //copy data
    4524:	b3 01       	movw	r22, r6
    4526:	ce 01       	movw	r24, r28
    4528:	01 96       	adiw	r24, 0x01	; 1
    452a:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
		if (deleteSms)
		{
			deleteSMS(_SMSindex);
    452e:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <top+0x101>
		RXinterruptEnable();
		return true;
	}
	bool deleteSMS(char SMSindex = 1){
		char arr[13];
		if (SMSindex < 10)
    4532:	8a 30       	cpi	r24, 0x0A	; 10
    4534:	10 f0       	brcs	.+4      	; 0x453a <main+0x23ee>
    4536:	0c 94 9e 13 	jmp	0x273c	; 0x273c <main+0x5f0>
    453a:	0c 94 91 13 	jmp	0x2722	; 0x2722 <main+0x5d6>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    453e:	f7 01       	movw	r30, r14
    4540:	e0 0f       	add	r30, r16
    4542:	f1 1f       	adc	r31, r17
    4544:	10 82       	st	Z, r1
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    4546:	e1 ec       	ldi	r30, 0xC1	; 193
    4548:	f0 e0       	ldi	r31, 0x00	; 0
    454a:	80 81       	ld	r24, Z
    454c:	80 68       	ori	r24, 0x80	; 128
    454e:	80 83       	st	Z, r24
			if (*arr != 0)
    4550:	d7 01       	movw	r26, r14
    4552:	8c 91       	ld	r24, X
    4554:	81 11       	cpse	r24, r1
    4556:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <main+0x682>
    455a:	0c 94 3b 14 	jmp	0x2876	; 0x2876 <main+0x72a>
	bool phoneCmp(const char *str1, const char *str2){
		bool result = true;
		
		//check if *str1 OR *str2 equle to 0.
		//if we don't check it, it will fail before the for loop condition and return true.
		if(!(*str1 && *str2))
    455e:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <top+0x4a>
    4562:	88 23       	and	r24, r24
    4564:	11 f4       	brne	.+4      	; 0x456a <main+0x241e>
    4566:	0c 94 87 14 	jmp	0x290e	; 0x290e <main+0x7c2>
    456a:	0c 94 6b 14 	jmp	0x28d6	; 0x28d6 <main+0x78a>
    456e:	9e 01       	movw	r18, r28
    4570:	2b 5e       	subi	r18, 0xEB	; 235
    4572:	3f 4f       	sbci	r19, 0xFF	; 255
    4574:	ce 51       	subi	r28, 0x1E	; 30
    4576:	df 4f       	sbci	r29, 0xFF	; 255
    4578:	e8 81       	ld	r30, Y
    457a:	f9 81       	ldd	r31, Y+1	; 0x01
    457c:	c2 5e       	subi	r28, 0xE2	; 226
    457e:	d0 40       	sbci	r29, 0x00	; 0
    4580:	0c 94 c2 14 	jmp	0x2984	; 0x2984 <main+0x838>
		}
		else if (compWordInArr(ptr,"delete id",9,20))
		{
			return 4;
		}
		else if (compWordInArr(ptr,"delete number",13,20))
    4584:	04 e1       	ldi	r16, 0x14	; 20
    4586:	2d e0       	ldi	r18, 0x0D	; 13
    4588:	40 e0       	ldi	r20, 0x00	; 0
    458a:	53 e0       	ldi	r21, 0x03	; 3
    458c:	be 01       	movw	r22, r28
    458e:	6f 5f       	subi	r22, 0xFF	; 255
    4590:	7f 4f       	sbci	r23, 0xFF	; 255
    4592:	8d e4       	ldi	r24, 0x4D	; 77
    4594:	94 e0       	ldi	r25, 0x04	; 4
    4596:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN11mainControl13compWordInArrEPcPKccc>
    459a:	78 2e       	mov	r7, r24
    459c:	81 11       	cpse	r24, r1
    459e:	2e c0       	rjmp	.+92     	; 0x45fc <main+0x24b0>
    45a0:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <main+0x9d0>
			return 12;
		}
		return 0;
	}
	bool commandAction(int commandIndex, char *ptr){
		char ptr_6_9[13] = "car is armed";
    45a4:	8d e0       	ldi	r24, 0x0D	; 13
    45a6:	ee e0       	ldi	r30, 0x0E	; 14
    45a8:	f3 e0       	ldi	r31, 0x03	; 3
    45aa:	de 01       	movw	r26, r28
    45ac:	ab 52       	subi	r26, 0x2B	; 43
    45ae:	bf 4f       	sbci	r27, 0xFF	; 255
    45b0:	01 90       	ld	r0, Z+
    45b2:	0d 92       	st	X+, r0
    45b4:	8a 95       	dec	r24
    45b6:	e1 f7       	brne	.-8      	; 0x45b0 <main+0x2464>
		char ptr_3_4[16] = "Wrong ID number";
    45b8:	80 e1       	ldi	r24, 0x10	; 16
    45ba:	eb e1       	ldi	r30, 0x1B	; 27
    45bc:	f3 e0       	ldi	r31, 0x03	; 3
    45be:	ca 51       	subi	r28, 0x1A	; 26
    45c0:	df 4f       	sbci	r29, 0xFF	; 255
    45c2:	a8 81       	ld	r26, Y
    45c4:	c6 5e       	subi	r28, 0xE6	; 230
    45c6:	d0 40       	sbci	r29, 0x00	; 0
    45c8:	c9 51       	subi	r28, 0x19	; 25
    45ca:	df 4f       	sbci	r29, 0xFF	; 255
    45cc:	b8 81       	ld	r27, Y
    45ce:	c7 5e       	subi	r28, 0xE7	; 231
    45d0:	d0 40       	sbci	r29, 0x00	; 0
    45d2:	01 90       	ld	r0, Z+
    45d4:	0d 92       	st	X+, r0
    45d6:	8a 95       	dec	r24
    45d8:	e1 f7       	brne	.-8      	; 0x45d2 <main+0x2486>
				return true;
				break;
			}
			case 11:
			{
				_alarmOnOff = true;
    45da:	81 e0       	ldi	r24, 0x01	; 1
    45dc:	80 93 e3 06 	sts	0x06E3, r24	; 0x8006e3 <top+0x296>
			}
		}
		return result;
	}
	char *getPhoneNumber(int index){
		return _phoneBook[index];}
    45e0:	60 91 e2 06 	lds	r22, 0x06E2	; 0x8006e2 <top+0x295>
    45e4:	bb e0       	ldi	r27, 0x0B	; 11
    45e6:	6b 9f       	mul	r22, r27
    45e8:	b0 01       	movw	r22, r0
    45ea:	11 24       	eor	r1, r1
    45ec:	6f 57       	subi	r22, 0x7F	; 127
    45ee:	7b 4f       	sbci	r23, 0xFB	; 251
		sendCommand("AT+MORING=1",true);
		copyPhoneFromSimToRAM();
	}
	bool sendSMS(const char *ptr,int index, const char *massage2 = NULL, const char *massage3 = NULL, const char *massage4 = NULL, const char *massage5 = NULL){
		char command[25];
		if (*getPhoneNumber(index) == 0)
    45f0:	fb 01       	movw	r30, r22
    45f2:	80 81       	ld	r24, Z
    45f4:	88 23       	and	r24, r24
    45f6:	09 f4       	brne	.+2      	; 0x45fa <main+0x24ae>
    45f8:	19 cf       	rjmp	.-462    	; 0x442c <main+0x22e0>
    45fa:	9c cd       	rjmp	.-1224   	; 0x4134 <main+0x1fe8>
			return 12;
		}
		return 0;
	}
	bool commandAction(int commandIndex, char *ptr){
		char ptr_6_9[13] = "car is armed";
    45fc:	8d e0       	ldi	r24, 0x0D	; 13
    45fe:	ee e0       	ldi	r30, 0x0E	; 14
    4600:	f3 e0       	ldi	r31, 0x03	; 3
    4602:	de 01       	movw	r26, r28
    4604:	ab 52       	subi	r26, 0x2B	; 43
    4606:	bf 4f       	sbci	r27, 0xFF	; 255
    4608:	01 90       	ld	r0, Z+
    460a:	0d 92       	st	X+, r0
    460c:	8a 95       	dec	r24
    460e:	e1 f7       	brne	.-8      	; 0x4608 <main+0x24bc>
		char ptr_3_4[16] = "Wrong ID number";
    4610:	80 e1       	ldi	r24, 0x10	; 16
    4612:	eb e1       	ldi	r30, 0x1B	; 27
    4614:	f3 e0       	ldi	r31, 0x03	; 3
    4616:	ca 51       	subi	r28, 0x1A	; 26
    4618:	df 4f       	sbci	r29, 0xFF	; 255
    461a:	a8 81       	ld	r26, Y
    461c:	c6 5e       	subi	r28, 0xE6	; 230
    461e:	d0 40       	sbci	r29, 0x00	; 0
    4620:	c9 51       	subi	r28, 0x19	; 25
    4622:	df 4f       	sbci	r29, 0xFF	; 255
    4624:	b8 81       	ld	r27, Y
    4626:	c7 5e       	subi	r28, 0xE7	; 231
    4628:	d0 40       	sbci	r29, 0x00	; 0
    462a:	01 90       	ld	r0, Z+
    462c:	0d 92       	st	X+, r0
    462e:	8a 95       	dec	r24
    4630:	e1 f7       	brne	.-8      	; 0x462a <main+0x24de>
				return true;
				break;
			}
			case  5:
			{
				if (*(ptr+14) > '0' && *(ptr+14) < '4')
    4632:	8f 85       	ldd	r24, Y+15	; 0x0f
    4634:	9f ec       	ldi	r25, 0xCF	; 207
    4636:	98 0f       	add	r25, r24
    4638:	93 30       	cpi	r25, 0x03	; 3
    463a:	08 f4       	brcc	.+2      	; 0x463e <main+0x24f2>
    463c:	27 c8       	rjmp	.-4018   	; 0x368c <main+0x1540>
    463e:	fe c9       	rjmp	.-3076   	; 0x3a3c <main+0x18f0>
			return 12;
		}
		return 0;
	}
	bool commandAction(int commandIndex, char *ptr){
		char ptr_6_9[13] = "car is armed";
    4640:	8d e0       	ldi	r24, 0x0D	; 13
    4642:	ee e0       	ldi	r30, 0x0E	; 14
    4644:	f3 e0       	ldi	r31, 0x03	; 3
    4646:	de 01       	movw	r26, r28
    4648:	ab 52       	subi	r26, 0x2B	; 43
    464a:	bf 4f       	sbci	r27, 0xFF	; 255
    464c:	01 90       	ld	r0, Z+
    464e:	0d 92       	st	X+, r0
    4650:	8a 95       	dec	r24
    4652:	e1 f7       	brne	.-8      	; 0x464c <main+0x2500>
		char ptr_3_4[16] = "Wrong ID number";
    4654:	80 e1       	ldi	r24, 0x10	; 16
    4656:	eb e1       	ldi	r30, 0x1B	; 27
    4658:	f3 e0       	ldi	r31, 0x03	; 3
    465a:	ca 51       	subi	r28, 0x1A	; 26
    465c:	df 4f       	sbci	r29, 0xFF	; 255
    465e:	a8 81       	ld	r26, Y
    4660:	c6 5e       	subi	r28, 0xE6	; 230
    4662:	d0 40       	sbci	r29, 0x00	; 0
    4664:	c9 51       	subi	r28, 0x19	; 25
    4666:	df 4f       	sbci	r29, 0xFF	; 255
    4668:	b8 81       	ld	r27, Y
    466a:	c7 5e       	subi	r28, 0xE7	; 231
    466c:	d0 40       	sbci	r29, 0x00	; 0
    466e:	01 90       	ld	r0, Z+
    4670:	0d 92       	st	X+, r0
    4672:	8a 95       	dec	r24
    4674:	e1 f7       	brne	.-8      	; 0x466e <main+0x2522>
			}
		}
		return result;
	}
	char *getPhoneNumber(int index){
		return _phoneBook[index];}
    4676:	60 91 e2 06 	lds	r22, 0x06E2	; 0x8006e2 <top+0x295>
    467a:	fb e0       	ldi	r31, 0x0B	; 11
    467c:	6f 9f       	mul	r22, r31
    467e:	b0 01       	movw	r22, r0
    4680:	11 24       	eor	r1, r1
    4682:	6f 57       	subi	r22, 0x7F	; 127
    4684:	7b 4f       	sbci	r23, 0xFB	; 251
		sendCommand("AT+MORING=1",true);
		copyPhoneFromSimToRAM();
	}
	bool sendSMS(const char *ptr,int index, const char *massage2 = NULL, const char *massage3 = NULL, const char *massage4 = NULL, const char *massage5 = NULL){
		char command[25];
		if (*getPhoneNumber(index) == 0)
    4686:	db 01       	movw	r26, r22
    4688:	8c 91       	ld	r24, X
    468a:	88 23       	and	r24, r24
    468c:	09 f4       	brne	.+2      	; 0x4690 <main+0x2544>
    468e:	ce ce       	rjmp	.-612    	; 0x442c <main+0x22e0>
    4690:	0c 94 ec 15 	jmp	0x2bd8	; 0x2bd8 <main+0xa8c>
			return 12;
		}
		return 0;
	}
	bool commandAction(int commandIndex, char *ptr){
		char ptr_6_9[13] = "car is armed";
    4694:	8d e0       	ldi	r24, 0x0D	; 13
    4696:	ee e0       	ldi	r30, 0x0E	; 14
    4698:	f3 e0       	ldi	r31, 0x03	; 3
    469a:	de 01       	movw	r26, r28
    469c:	ab 52       	subi	r26, 0x2B	; 43
    469e:	bf 4f       	sbci	r27, 0xFF	; 255
    46a0:	01 90       	ld	r0, Z+
    46a2:	0d 92       	st	X+, r0
    46a4:	8a 95       	dec	r24
    46a6:	e1 f7       	brne	.-8      	; 0x46a0 <main+0x2554>
		char ptr_3_4[16] = "Wrong ID number";
    46a8:	80 e1       	ldi	r24, 0x10	; 16
    46aa:	eb e1       	ldi	r30, 0x1B	; 27
    46ac:	f3 e0       	ldi	r31, 0x03	; 3
    46ae:	ca 51       	subi	r28, 0x1A	; 26
    46b0:	df 4f       	sbci	r29, 0xFF	; 255
    46b2:	a8 81       	ld	r26, Y
    46b4:	c6 5e       	subi	r28, 0xE6	; 230
    46b6:	d0 40       	sbci	r29, 0x00	; 0
    46b8:	c9 51       	subi	r28, 0x19	; 25
    46ba:	df 4f       	sbci	r29, 0xFF	; 255
    46bc:	b8 81       	ld	r27, Y
    46be:	c7 5e       	subi	r28, 0xE7	; 231
    46c0:	d0 40       	sbci	r29, 0x00	; 0
    46c2:	01 90       	ld	r0, Z+
    46c4:	0d 92       	st	X+, r0
    46c6:	8a 95       	dec	r24
    46c8:	e1 f7       	brne	.-8      	; 0x46c2 <main+0x2576>
				}
				return true;
			}
			case  6:
			{
				if (_alarmOnOff)
    46ca:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <top+0x296>
    46ce:	81 11       	cpse	r24, r1
    46d0:	fc c9       	rjmp	.-3080   	; 0x3aca <main+0x197e>
    46d2:	56 ca       	rjmp	.-2900   	; 0x3b80 <main+0x1a34>
			return 12;
		}
		return 0;
	}
	bool commandAction(int commandIndex, char *ptr){
		char ptr_6_9[13] = "car is armed";
    46d4:	8d e0       	ldi	r24, 0x0D	; 13
    46d6:	ee e0       	ldi	r30, 0x0E	; 14
    46d8:	f3 e0       	ldi	r31, 0x03	; 3
    46da:	de 01       	movw	r26, r28
    46dc:	ab 52       	subi	r26, 0x2B	; 43
    46de:	bf 4f       	sbci	r27, 0xFF	; 255
    46e0:	01 90       	ld	r0, Z+
    46e2:	0d 92       	st	X+, r0
    46e4:	8a 95       	dec	r24
    46e6:	e1 f7       	brne	.-8      	; 0x46e0 <main+0x2594>
		char ptr_3_4[16] = "Wrong ID number";
    46e8:	80 e1       	ldi	r24, 0x10	; 16
    46ea:	eb e1       	ldi	r30, 0x1B	; 27
    46ec:	f3 e0       	ldi	r31, 0x03	; 3
    46ee:	ca 51       	subi	r28, 0x1A	; 26
    46f0:	df 4f       	sbci	r29, 0xFF	; 255
    46f2:	a8 81       	ld	r26, Y
    46f4:	c6 5e       	subi	r28, 0xE6	; 230
    46f6:	d0 40       	sbci	r29, 0x00	; 0
    46f8:	c9 51       	subi	r28, 0x19	; 25
    46fa:	df 4f       	sbci	r29, 0xFF	; 255
    46fc:	b8 81       	ld	r27, Y
    46fe:	c7 5e       	subi	r28, 0xE7	; 231
    4700:	d0 40       	sbci	r29, 0x00	; 0
    4702:	01 90       	ld	r0, Z+
    4704:	0d 92       	st	X+, r0
    4706:	8a 95       	dec	r24
    4708:	e1 f7       	brne	.-8      	; 0x4702 <main+0x25b6>
				return true;
				break;
			}
			case  7:
			{
				_sendPacket[2] = 0x30;
    470a:	80 e3       	ldi	r24, 0x30	; 48
    470c:	80 93 de 06 	sts	0x06DE, r24	; 0x8006de <top+0x291>
			}
		}
		return result;
	}
	char *getPhoneNumber(int index){
		return _phoneBook[index];}
    4710:	60 91 e2 06 	lds	r22, 0x06E2	; 0x8006e2 <top+0x295>
    4714:	bb e0       	ldi	r27, 0x0B	; 11
    4716:	6b 9f       	mul	r22, r27
    4718:	b0 01       	movw	r22, r0
    471a:	11 24       	eor	r1, r1
    471c:	6f 57       	subi	r22, 0x7F	; 127
    471e:	7b 4f       	sbci	r23, 0xFB	; 251
		sendCommand("AT+MORING=1",true);
		copyPhoneFromSimToRAM();
	}
	bool sendSMS(const char *ptr,int index, const char *massage2 = NULL, const char *massage3 = NULL, const char *massage4 = NULL, const char *massage5 = NULL){
		char command[25];
		if (*getPhoneNumber(index) == 0)
    4720:	fb 01       	movw	r30, r22
    4722:	80 81       	ld	r24, Z
    4724:	88 23       	and	r24, r24
    4726:	09 f4       	brne	.+2      	; 0x472a <main+0x25de>
    4728:	81 ce       	rjmp	.-766    	; 0x442c <main+0x22e0>
    472a:	84 ca       	rjmp	.-2808   	; 0x3c34 <main+0x1ae8>
			return 12;
		}
		return 0;
	}
	bool commandAction(int commandIndex, char *ptr){
		char ptr_6_9[13] = "car is armed";
    472c:	8d e0       	ldi	r24, 0x0D	; 13
    472e:	ee e0       	ldi	r30, 0x0E	; 14
    4730:	f3 e0       	ldi	r31, 0x03	; 3
    4732:	de 01       	movw	r26, r28
    4734:	ab 52       	subi	r26, 0x2B	; 43
    4736:	bf 4f       	sbci	r27, 0xFF	; 255
    4738:	01 90       	ld	r0, Z+
    473a:	0d 92       	st	X+, r0
    473c:	8a 95       	dec	r24
    473e:	e1 f7       	brne	.-8      	; 0x4738 <main+0x25ec>
		char ptr_3_4[16] = "Wrong ID number";
    4740:	80 e1       	ldi	r24, 0x10	; 16
    4742:	eb e1       	ldi	r30, 0x1B	; 27
    4744:	f3 e0       	ldi	r31, 0x03	; 3
    4746:	ca 51       	subi	r28, 0x1A	; 26
    4748:	df 4f       	sbci	r29, 0xFF	; 255
    474a:	a8 81       	ld	r26, Y
    474c:	c6 5e       	subi	r28, 0xE6	; 230
    474e:	d0 40       	sbci	r29, 0x00	; 0
    4750:	c9 51       	subi	r28, 0x19	; 25
    4752:	df 4f       	sbci	r29, 0xFF	; 255
    4754:	b8 81       	ld	r27, Y
    4756:	c7 5e       	subi	r28, 0xE7	; 231
    4758:	d0 40       	sbci	r29, 0x00	; 0
    475a:	01 90       	ld	r0, Z+
    475c:	0d 92       	st	X+, r0
    475e:	8a 95       	dec	r24
    4760:	e1 f7       	brne	.-8      	; 0x475a <main+0x260e>
				return true;
				break;
			}
			case  8:
			{
				_emergencyAlarmON = false;
    4762:	10 92 e4 06 	sts	0x06E4, r1	; 0x8006e4 <top+0x297>
				_startTimeCounterEmergencyCarLocation = false;
    4766:	10 92 e8 06 	sts	0x06E8, r1	; 0x8006e8 <top+0x29b>
				_callOneTimeOnEmergencyMode = true;
    476a:	81 e0       	ldi	r24, 0x01	; 1
    476c:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <top+0x299>
			}
		}
		return result;
	}
	char *getPhoneNumber(int index){
		return _phoneBook[index];}
    4770:	60 91 e2 06 	lds	r22, 0x06E2	; 0x8006e2 <top+0x295>
    4774:	fb e0       	ldi	r31, 0x0B	; 11
    4776:	6f 9f       	mul	r22, r31
    4778:	b0 01       	movw	r22, r0
    477a:	11 24       	eor	r1, r1
    477c:	6f 57       	subi	r22, 0x7F	; 127
    477e:	7b 4f       	sbci	r23, 0xFB	; 251
		sendCommand("AT+MORING=1",true);
		copyPhoneFromSimToRAM();
	}
	bool sendSMS(const char *ptr,int index, const char *massage2 = NULL, const char *massage3 = NULL, const char *massage4 = NULL, const char *massage5 = NULL){
		char command[25];
		if (*getPhoneNumber(index) == 0)
    4780:	db 01       	movw	r26, r22
    4782:	8c 91       	ld	r24, X
    4784:	88 23       	and	r24, r24
    4786:	09 f4       	brne	.+2      	; 0x478a <main+0x263e>
    4788:	51 ce       	rjmp	.-862    	; 0x442c <main+0x22e0>
    478a:	07 cb       	rjmp	.-2546   	; 0x3d9a <main+0x1c4e>
			return 12;
		}
		return 0;
	}
	bool commandAction(int commandIndex, char *ptr){
		char ptr_6_9[13] = "car is armed";
    478c:	8d e0       	ldi	r24, 0x0D	; 13
    478e:	ee e0       	ldi	r30, 0x0E	; 14
    4790:	f3 e0       	ldi	r31, 0x03	; 3
    4792:	de 01       	movw	r26, r28
    4794:	ab 52       	subi	r26, 0x2B	; 43
    4796:	bf 4f       	sbci	r27, 0xFF	; 255
    4798:	01 90       	ld	r0, Z+
    479a:	0d 92       	st	X+, r0
    479c:	8a 95       	dec	r24
    479e:	e1 f7       	brne	.-8      	; 0x4798 <main+0x264c>
		char ptr_3_4[16] = "Wrong ID number";
    47a0:	80 e1       	ldi	r24, 0x10	; 16
    47a2:	eb e1       	ldi	r30, 0x1B	; 27
    47a4:	f3 e0       	ldi	r31, 0x03	; 3
    47a6:	ca 51       	subi	r28, 0x1A	; 26
    47a8:	df 4f       	sbci	r29, 0xFF	; 255
    47aa:	a8 81       	ld	r26, Y
    47ac:	c6 5e       	subi	r28, 0xE6	; 230
    47ae:	d0 40       	sbci	r29, 0x00	; 0
    47b0:	c9 51       	subi	r28, 0x19	; 25
    47b2:	df 4f       	sbci	r29, 0xFF	; 255
    47b4:	b8 81       	ld	r27, Y
    47b6:	c7 5e       	subi	r28, 0xE7	; 231
    47b8:	d0 40       	sbci	r29, 0x00	; 0
    47ba:	01 90       	ld	r0, Z+
    47bc:	0d 92       	st	X+, r0
    47be:	8a 95       	dec	r24
    47c0:	e1 f7       	brne	.-8      	; 0x47ba <main+0x266e>
		tempPhone[11] = '\0';
		strcpy(_phoneBook[4],tempPhone);
	}
	bool call(int index){
		char arr[16];
		strcpy(arr,"ATD");
    47c2:	81 e4       	ldi	r24, 0x41	; 65
    47c4:	94 e5       	ldi	r25, 0x54	; 84
    47c6:	f5 01       	movw	r30, r10
    47c8:	91 83       	std	Z+1, r25	; 0x01
    47ca:	80 83       	st	Z, r24
    47cc:	84 e4       	ldi	r24, 0x44	; 68
    47ce:	90 e0       	ldi	r25, 0x00	; 0
    47d0:	93 83       	std	Z+3, r25	; 0x03
    47d2:	82 83       	std	Z+2, r24	; 0x02
		strcpy(arr+3,getPhoneNumber(1));
    47d4:	6c e8       	ldi	r22, 0x8C	; 140
    47d6:	74 e0       	ldi	r23, 0x04	; 4
    47d8:	c5 01       	movw	r24, r10
    47da:	03 96       	adiw	r24, 0x03	; 3
    47dc:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
		arr[13] = ';';
    47e0:	8b e3       	ldi	r24, 0x3B	; 59
    47e2:	d5 01       	movw	r26, r10
    47e4:	1d 96       	adiw	r26, 0x0d	; 13
    47e6:	8c 93       	st	X, r24
    47e8:	1d 97       	sbiw	r26, 0x0d	; 13
		arr[14] = 0;
    47ea:	1e 96       	adiw	r26, 0x0e	; 14
    47ec:	1c 92       	st	X, r1
	char _1minConterSMSreceived, _10secRestetGSMdelay , _GSMerrorCounter;
	bool _newData, _startTimeCounterSMSreceived, _startTimeCounterGSMreset;
	int _newDataIndex;
	bool sendCommand(const char ptr[], bool checkAck = false){
		int condition;
		gsmSMS.UARTstring(ptr,0);
    47ee:	40 e0       	ldi	r20, 0x00	; 0
    47f0:	b5 01       	movw	r22, r10
    47f2:	8d e4       	ldi	r24, 0x4D	; 77
    47f4:	94 e0       	ldi	r25, 0x04	; 4
    47f6:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		gsmSMS.UARTsend(13);
    47fa:	6d e0       	ldi	r22, 0x0D	; 13
    47fc:	8d e4       	ldi	r24, 0x4D	; 77
    47fe:	94 e0       	ldi	r25, 0x04	; 4
    4800:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN4Uart8UARTsendEh>
		if (checkAck)
		{
			char arr[15] = {0};
    4804:	8f e0       	ldi	r24, 0x0F	; 15
    4806:	f4 01       	movw	r30, r8
    4808:	11 92       	st	Z+, r1
    480a:	8a 95       	dec	r24
    480c:	e9 f7       	brne	.-6      	; 0x4808 <main+0x26bc>
			RXinterruptDisable();
    480e:	e1 ec       	ldi	r30, 0xC1	; 193
    4810:	f0 e0       	ldi	r31, 0x00	; 0
    4812:	80 81       	ld	r24, Z
    4814:	8f 77       	andi	r24, 0x7F	; 127
    4816:	80 83       	st	Z, r24
    4818:	64 01       	movw	r12, r8
			return false;
		}
		return 0;
	}
	int checkForACkPacket(char getData[], int arrSize){
		int i = 0;
    481a:	00 e0       	ldi	r16, 0x00	; 0
    481c:	10 e0       	ldi	r17, 0x00	; 0
    481e:	6f cb       	rjmp	.-2338   	; 0x3efe <main+0x1db2>
			return 12;
		}
		return 0;
	}
	bool commandAction(int commandIndex, char *ptr){
		char ptr_6_9[13] = "car is armed";
    4820:	8d e0       	ldi	r24, 0x0D	; 13
    4822:	ee e0       	ldi	r30, 0x0E	; 14
    4824:	f3 e0       	ldi	r31, 0x03	; 3
    4826:	de 01       	movw	r26, r28
    4828:	ab 52       	subi	r26, 0x2B	; 43
    482a:	bf 4f       	sbci	r27, 0xFF	; 255
    482c:	01 90       	ld	r0, Z+
    482e:	0d 92       	st	X+, r0
    4830:	8a 95       	dec	r24
    4832:	e1 f7       	brne	.-8      	; 0x482c <main+0x26e0>
		char ptr_3_4[16] = "Wrong ID number";
    4834:	80 e1       	ldi	r24, 0x10	; 16
    4836:	eb e1       	ldi	r30, 0x1B	; 27
    4838:	f3 e0       	ldi	r31, 0x03	; 3
    483a:	ca 51       	subi	r28, 0x1A	; 26
    483c:	df 4f       	sbci	r29, 0xFF	; 255
    483e:	a8 81       	ld	r26, Y
    4840:	c6 5e       	subi	r28, 0xE6	; 230
    4842:	d0 40       	sbci	r29, 0x00	; 0
    4844:	c9 51       	subi	r28, 0x19	; 25
    4846:	df 4f       	sbci	r29, 0xFF	; 255
    4848:	b8 81       	ld	r27, Y
    484a:	c7 5e       	subi	r28, 0xE7	; 231
    484c:	d0 40       	sbci	r29, 0x00	; 0
    484e:	01 90       	ld	r0, Z+
    4850:	0d 92       	st	X+, r0
    4852:	8a 95       	dec	r24
    4854:	e1 f7       	brne	.-8      	; 0x484e <main+0x2702>
			}
		}
		return result;
	}
	char *getPhoneNumber(int index){
		return _phoneBook[index];}
    4856:	60 91 e2 06 	lds	r22, 0x06E2	; 0x8006e2 <top+0x295>
    485a:	fb e0       	ldi	r31, 0x0B	; 11
    485c:	6f 9f       	mul	r22, r31
    485e:	b0 01       	movw	r22, r0
    4860:	11 24       	eor	r1, r1
    4862:	6f 57       	subi	r22, 0x7F	; 127
    4864:	7b 4f       	sbci	r23, 0xFB	; 251
		sendCommand("AT+MORING=1",true);
		copyPhoneFromSimToRAM();
	}
	bool sendSMS(const char *ptr,int index, const char *massage2 = NULL, const char *massage3 = NULL, const char *massage4 = NULL, const char *massage5 = NULL){
		char command[25];
		if (*getPhoneNumber(index) == 0)
    4866:	db 01       	movw	r26, r22
    4868:	8c 91       	ld	r24, X
    486a:	88 23       	and	r24, r24
    486c:	09 f4       	brne	.+2      	; 0x4870 <main+0x2724>
    486e:	de cd       	rjmp	.-1092   	; 0x442c <main+0x22e0>
    4870:	af cb       	rjmp	.-2210   	; 0x3fd0 <main+0x1e84>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    4872:	f4 01       	movw	r30, r8
    4874:	e0 0f       	add	r30, r16
    4876:	f1 1f       	adc	r31, r17
    4878:	10 82       	st	Z, r1
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    487a:	e1 ec       	ldi	r30, 0xC1	; 193
    487c:	f0 e0       	ldi	r31, 0x00	; 0
    487e:	80 81       	ld	r24, Z
    4880:	80 68       	ori	r24, 0x80	; 128
    4882:	80 83       	st	Z, r24
			if (*arr != 0)
    4884:	f4 01       	movw	r30, r8
    4886:	80 81       	ld	r24, Z
    4888:	81 11       	cpse	r24, r1
    488a:	0c 94 39 16 	jmp	0x2c72	; 0x2c72 <main+0xb26>
    488e:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <main+0xbcc>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    4892:	f5 01       	movw	r30, r10
    4894:	e0 0f       	add	r30, r16
    4896:	f1 1f       	adc	r31, r17
    4898:	10 82       	st	Z, r1
		char dataIn[50] = {0};
		RXinterruptDisable();
		arrCommand[8] = index + '0';
		gsmSMS.UARTstring(arrCommand,0);	
		checkForACkPacket(dataIn, 49);
		RXinterruptEnable();
    489a:	d3 01       	movw	r26, r6
    489c:	8c 91       	ld	r24, X
    489e:	80 68       	ori	r24, 0x80	; 128
    48a0:	8c 93       	st	X, r24
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    48a2:	f5 01       	movw	r30, r10
    48a4:	80 81       	ld	r24, Z
    48a6:	82 32       	cpi	r24, 0x22	; 34
    48a8:	19 f0       	breq	.+6      	; 0x48b0 <main+0x2764>
    48aa:	31 96       	adiw	r30, 0x01	; 1
    48ac:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <main+0xd0c>
    48b0:	d5 01       	movw	r26, r10
    48b2:	1f 96       	adiw	r26, 0x0f	; 15
    48b4:	8c 91       	ld	r24, X
    48b6:	82 32       	cpi	r24, 0x22	; 34
    48b8:	11 f4       	brne	.+4      	; 0x48be <main+0x2772>
    48ba:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <main+0xd2c>
    48be:	f5 01       	movw	r30, r10
    48c0:	70 96       	adiw	r30, 0x10	; 16
    48c2:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <main+0xd1e>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    48c6:	f4 01       	movw	r30, r8
    48c8:	e0 0f       	add	r30, r16
    48ca:	f1 1f       	adc	r31, r17
    48cc:	10 82       	st	Z, r1
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    48ce:	e1 ec       	ldi	r30, 0xC1	; 193
    48d0:	f0 e0       	ldi	r31, 0x00	; 0
    48d2:	80 81       	ld	r24, Z
    48d4:	80 68       	ori	r24, 0x80	; 128
    48d6:	80 83       	st	Z, r24
			if (*arr != 0)
    48d8:	f4 01       	movw	r30, r8
    48da:	80 81       	ld	r24, Z
    48dc:	81 11       	cpse	r24, r1
    48de:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <main+0xf9a>
    48e2:	0c 94 c6 18 	jmp	0x318c	; 0x318c <main+0x1040>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    48e6:	f4 01       	movw	r30, r8
    48e8:	e0 0f       	add	r30, r16
    48ea:	f1 1f       	adc	r31, r17
    48ec:	10 82       	st	Z, r1
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    48ee:	e1 ec       	ldi	r30, 0xC1	; 193
    48f0:	f0 e0       	ldi	r31, 0x00	; 0
    48f2:	80 81       	ld	r24, Z
    48f4:	80 68       	ori	r24, 0x80	; 128
    48f6:	80 83       	st	Z, r24
			if (*arr != 0)
    48f8:	d4 01       	movw	r26, r8
    48fa:	8c 91       	ld	r24, X
    48fc:	81 11       	cpse	r24, r1
    48fe:	0c 94 29 19 	jmp	0x3252	; 0x3252 <main+0x1106>
    4902:	0c 94 7c 19 	jmp	0x32f8	; 0x32f8 <main+0x11ac>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    4906:	f4 01       	movw	r30, r8
    4908:	e0 0f       	add	r30, r16
    490a:	f1 1f       	adc	r31, r17
    490c:	10 82       	st	Z, r1
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    490e:	e1 ec       	ldi	r30, 0xC1	; 193
    4910:	f0 e0       	ldi	r31, 0x00	; 0
    4912:	80 81       	ld	r24, Z
    4914:	80 68       	ori	r24, 0x80	; 128
    4916:	80 83       	st	Z, r24
			if (*arr != 0)
    4918:	f4 01       	movw	r30, r8
    491a:	80 81       	ld	r24, Z
    491c:	81 11       	cpse	r24, r1
    491e:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <main+0x129a>
    4922:	0c 94 46 1a 	jmp	0x348c	; 0x348c <main+0x1340>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    4926:	f5 01       	movw	r30, r10
    4928:	e0 0f       	add	r30, r16
    492a:	f1 1f       	adc	r31, r17
    492c:	10 82       	st	Z, r1
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    492e:	e1 ec       	ldi	r30, 0xC1	; 193
    4930:	f0 e0       	ldi	r31, 0x00	; 0
    4932:	80 81       	ld	r24, Z
    4934:	80 68       	ori	r24, 0x80	; 128
    4936:	80 83       	st	Z, r24
			if (*arr != 0)
    4938:	d5 01       	movw	r26, r10
    493a:	8c 91       	ld	r24, X
    493c:	81 11       	cpse	r24, r1
    493e:	0c 94 7e 1b 	jmp	0x36fc	; 0x36fc <main+0x15b0>
    4942:	35 c8       	rjmp	.-3990   	; 0x39ae <main+0x1862>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    4944:	f5 01       	movw	r30, r10
    4946:	e0 0f       	add	r30, r16
    4948:	f1 1f       	adc	r31, r17
    494a:	10 82       	st	Z, r1
		char dataIn[50] = {0};
		RXinterruptDisable();
		arrCommand[8] = index + '0';
		gsmSMS.UARTstring(arrCommand,0);	
		checkForACkPacket(dataIn, 49);
		RXinterruptEnable();
    494c:	f3 01       	movw	r30, r6
    494e:	80 81       	ld	r24, Z
    4950:	80 68       	ori	r24, 0x80	; 128
    4952:	80 83       	st	Z, r24
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    4954:	d5 01       	movw	r26, r10
    4956:	8c 91       	ld	r24, X
    4958:	82 32       	cpi	r24, 0x22	; 34
    495a:	21 f0       	breq	.+8      	; 0x4964 <main+0x2818>
    495c:	f5 01       	movw	r30, r10
    495e:	31 96       	adiw	r30, 0x01	; 1
    4960:	0c 94 36 1c 	jmp	0x386c	; 0x386c <main+0x1720>
    4964:	f5 01       	movw	r30, r10
    4966:	87 85       	ldd	r24, Z+15	; 0x0f
    4968:	82 32       	cpi	r24, 0x22	; 34
    496a:	11 f4       	brne	.+4      	; 0x4970 <main+0x2824>
    496c:	0c 94 46 1c 	jmp	0x388c	; 0x388c <main+0x1740>
    4970:	70 96       	adiw	r30, 0x10	; 16
    4972:	0c 94 3f 1c 	jmp	0x387e	; 0x387e <main+0x1732>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    4976:	f4 01       	movw	r30, r8
    4978:	e0 0f       	add	r30, r16
    497a:	f1 1f       	adc	r31, r17
    497c:	10 82       	st	Z, r1
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    497e:	e1 ec       	ldi	r30, 0xC1	; 193
    4980:	f0 e0       	ldi	r31, 0x00	; 0
    4982:	80 81       	ld	r24, Z
    4984:	80 68       	ori	r24, 0x80	; 128
    4986:	80 83       	st	Z, r24
			if (*arr != 0)
    4988:	d4 01       	movw	r26, r8
    498a:	8c 91       	ld	r24, X
    498c:	81 11       	cpse	r24, r1
    498e:	9e c9       	rjmp	.-3268   	; 0x3ccc <main+0x1b80>
    4990:	ef c9       	rjmp	.-3106   	; 0x3d70 <main+0x1c24>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    4992:	f4 01       	movw	r30, r8
    4994:	e0 0f       	add	r30, r16
    4996:	f1 1f       	adc	r31, r17
    4998:	10 82       	st	Z, r1
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    499a:	e1 ec       	ldi	r30, 0xC1	; 193
    499c:	f0 e0       	ldi	r31, 0x00	; 0
    499e:	80 81       	ld	r24, Z
    49a0:	80 68       	ori	r24, 0x80	; 128
    49a2:	80 83       	st	Z, r24
			if (*arr != 0)
    49a4:	f4 01       	movw	r30, r8
    49a6:	80 81       	ld	r24, Z
    49a8:	81 11       	cpse	r24, r1
    49aa:	42 ca       	rjmp	.-2940   	; 0x3e30 <main+0x1ce4>
    49ac:	93 ca       	rjmp	.-2778   	; 0x3ed4 <main+0x1d88>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    49ae:	f4 01       	movw	r30, r8
    49b0:	e0 0f       	add	r30, r16
    49b2:	f1 1f       	adc	r31, r17
    49b4:	10 82       	st	Z, r1
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    49b6:	e1 ec       	ldi	r30, 0xC1	; 193
    49b8:	f0 e0       	ldi	r31, 0x00	; 0
    49ba:	80 81       	ld	r24, Z
    49bc:	80 68       	ori	r24, 0x80	; 128
    49be:	80 83       	st	Z, r24
			if (*arr != 0)
    49c0:	d4 01       	movw	r26, r8
    49c2:	8c 91       	ld	r24, X
    49c4:	81 11       	cpse	r24, r1
    49c6:	af ca       	rjmp	.-2722   	; 0x3f26 <main+0x1dda>
    49c8:	31 cd       	rjmp	.-1438   	; 0x442c <main+0x22e0>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    49ca:	f4 01       	movw	r30, r8
    49cc:	e0 0f       	add	r30, r16
    49ce:	f1 1f       	adc	r31, r17
    49d0:	10 82       	st	Z, r1
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    49d2:	e1 ec       	ldi	r30, 0xC1	; 193
    49d4:	f0 e0       	ldi	r31, 0x00	; 0
    49d6:	80 81       	ld	r24, Z
    49d8:	80 68       	ori	r24, 0x80	; 128
    49da:	80 83       	st	Z, r24
			if (*arr != 0)
    49dc:	f4 01       	movw	r30, r8
    49de:	80 81       	ld	r24, Z
    49e0:	81 11       	cpse	r24, r1
    49e2:	41 cb       	rjmp	.-2430   	; 0x4066 <main+0x1f1a>
    49e4:	92 cb       	rjmp	.-2268   	; 0x410a <main+0x1fbe>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    49e6:	f4 01       	movw	r30, r8
    49e8:	e0 0f       	add	r30, r16
    49ea:	f1 1f       	adc	r31, r17
    49ec:	10 82       	st	Z, r1
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    49ee:	e1 ec       	ldi	r30, 0xC1	; 193
    49f0:	f0 e0       	ldi	r31, 0x00	; 0
    49f2:	80 81       	ld	r24, Z
    49f4:	80 68       	ori	r24, 0x80	; 128
    49f6:	80 83       	st	Z, r24
			if (*arr != 0)
    49f8:	d4 01       	movw	r26, r8
    49fa:	8c 91       	ld	r24, X
    49fc:	81 11       	cpse	r24, r1
    49fe:	e5 cb       	rjmp	.-2102   	; 0x41ca <main+0x207e>
    4a00:	36 cc       	rjmp	.-1940   	; 0x426e <main+0x2122>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    4a02:	f7 01       	movw	r30, r14
    4a04:	e0 0f       	add	r30, r16
    4a06:	f1 1f       	adc	r31, r17
    4a08:	10 82       	st	Z, r1
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    4a0a:	e1 ec       	ldi	r30, 0xC1	; 193
    4a0c:	f0 e0       	ldi	r31, 0x00	; 0
    4a0e:	80 81       	ld	r24, Z
    4a10:	80 68       	ori	r24, 0x80	; 128
    4a12:	80 83       	st	Z, r24
			if (*arr != 0)
    4a14:	f7 01       	movw	r30, r14
    4a16:	80 81       	ld	r24, Z
    4a18:	81 11       	cpse	r24, r1
    4a1a:	99 cc       	rjmp	.-1742   	; 0x434e <main+0x2202>
    4a1c:	ea cc       	rjmp	.-1580   	; 0x43f2 <main+0x22a6>
    4a1e:	02 96       	adiw	r24, 0x02	; 2
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    4a20:	56 2f       	mov	r21, r22
    4a22:	0c 94 84 11 	jmp	0x2308	; 0x2308 <main+0x1bc>
    4a26:	02 96       	adiw	r24, 0x02	; 2
    4a28:	56 2f       	mov	r21, r22
    4a2a:	0c 94 39 12 	jmp	0x2472	; 0x2472 <main+0x326>
			RXinterruptEnable();
			return 0;
		}
			
		//check if the data exist before getting into the While LOOP
		if (compWordInArr(arr+indexData,'\n',1,size))
    4a2e:	b6 01       	movw	r22, r12
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    4a30:	a1 e0       	ldi	r26, 0x01	; 1
    4a32:	b0 e0       	ldi	r27, 0x00	; 0
    4a34:	ac 0f       	add	r26, r28
    4a36:	bd 1f       	adc	r27, r29
    4a38:	ac 0d       	add	r26, r12
    4a3a:	bd 1d       	adc	r27, r13
    4a3c:	8c 91       	ld	r24, X
    4a3e:	8a 30       	cpi	r24, 0x0A	; 10
    4a40:	11 f0       	breq	.+4      	; 0x4a46 <main+0x28fa>
    4a42:	0c 94 43 13 	jmp	0x2686	; 0x2686 <main+0x53a>
    4a46:	0c 94 5f 13 	jmp	0x26be	; 0x26be <main+0x572>
    4a4a:	02 96       	adiw	r24, 0x02	; 2
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    4a4c:	56 2f       	mov	r21, r22
    4a4e:	0c 94 28 14 	jmp	0x2850	; 0x2850 <main+0x704>
		_newDataIndex = 0;
		setup(BAUD9600);}
	~SMS(){}
	char cmpSMSPhoneNumberToStorage(char *SMSPhoneNum){
		if(phoneCmp(SMSPhoneNum,_phoneBook[1])){
			return 1;
    4a52:	81 e0       	ldi	r24, 0x01	; 1
    4a54:	09 c0       	rjmp	.+18     	; 0x4a68 <main+0x291c>
    4a56:	81 e0       	ldi	r24, 0x01	; 1
    4a58:	07 c0       	rjmp	.+14     	; 0x4a68 <main+0x291c>
		}
		else if(phoneCmp(SMSPhoneNum,_phoneBook[2])){
			return 2;
    4a5a:	82 e0       	ldi	r24, 0x02	; 2
    4a5c:	05 c0       	rjmp	.+10     	; 0x4a68 <main+0x291c>
    4a5e:	82 e0       	ldi	r24, 0x02	; 2
    4a60:	03 c0       	rjmp	.+6      	; 0x4a68 <main+0x291c>
		}
		else if(phoneCmp(SMSPhoneNum,_phoneBook[3])){
			return 3;
    4a62:	83 e0       	ldi	r24, 0x03	; 3
    4a64:	01 c0       	rjmp	.+2      	; 0x4a68 <main+0x291c>
    4a66:	83 e0       	ldi	r24, 0x03	; 3
			_emergencyAlarmON = true;
		}
	}
	int inputCommandBySMS(char *ptr, int arrSize, char *phoneNumber)
	{
		_indexOfContact = cmpSMSPhoneNumberToStorage(phoneNumber);
    4a68:	80 93 e2 06 	sts	0x06E2, r24	; 0x8006e2 <top+0x295>
    4a6c:	80 cd       	rjmp	.-1280   	; 0x456e <main+0x2422>
    4a6e:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <top+0x295>
		if (_indexOfContact == 0)
		{
			if (*getPhoneNumber(1) != 0 || *getPhoneNumber(2) != 0 || *getPhoneNumber(3) != 0)
    4a72:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <top+0x3f>
    4a76:	81 11       	cpse	r24, r1
    4a78:	d9 cc       	rjmp	.-1614   	; 0x442c <main+0x22e0>
    4a7a:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <main+0x806>
			return 12;
		}
		return 0;
	}
	bool commandAction(int commandIndex, char *ptr){
		char ptr_6_9[13] = "car is armed";
    4a7e:	8d e0       	ldi	r24, 0x0D	; 13
    4a80:	ee e0       	ldi	r30, 0x0E	; 14
    4a82:	f3 e0       	ldi	r31, 0x03	; 3
    4a84:	de 01       	movw	r26, r28
    4a86:	ab 52       	subi	r26, 0x2B	; 43
    4a88:	bf 4f       	sbci	r27, 0xFF	; 255
    4a8a:	01 90       	ld	r0, Z+
    4a8c:	0d 92       	st	X+, r0
    4a8e:	8a 95       	dec	r24
    4a90:	e1 f7       	brne	.-8      	; 0x4a8a <main+0x293e>
		char ptr_3_4[16] = "Wrong ID number";
    4a92:	80 e1       	ldi	r24, 0x10	; 16
    4a94:	eb e1       	ldi	r30, 0x1B	; 27
    4a96:	f3 e0       	ldi	r31, 0x03	; 3
    4a98:	ca 51       	subi	r28, 0x1A	; 26
    4a9a:	df 4f       	sbci	r29, 0xFF	; 255
    4a9c:	a8 81       	ld	r26, Y
    4a9e:	c6 5e       	subi	r28, 0xE6	; 230
    4aa0:	d0 40       	sbci	r29, 0x00	; 0
    4aa2:	c9 51       	subi	r28, 0x19	; 25
    4aa4:	df 4f       	sbci	r29, 0xFF	; 255
    4aa6:	b8 81       	ld	r27, Y
    4aa8:	c7 5e       	subi	r28, 0xE7	; 231
    4aaa:	d0 40       	sbci	r29, 0x00	; 0
    4aac:	01 90       	ld	r0, Z+
    4aae:	0d 92       	st	X+, r0
    4ab0:	8a 95       	dec	r24
    4ab2:	e1 f7       	brne	.-8      	; 0x4aac <main+0x2960>
				return true;
				break;
			}
			case  3:
			{
				if (ptr[10] > '0' && '9' >= ptr[10])
    4ab4:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ab6:	9f ec       	ldi	r25, 0xCF	; 207
    4ab8:	98 0f       	add	r25, r24
    4aba:	99 30       	cpi	r25, 0x09	; 9
    4abc:	10 f4       	brcc	.+4      	; 0x4ac2 <main+0x2976>
    4abe:	0c 94 92 19 	jmp	0x3324	; 0x3324 <main+0x11d8>
    4ac2:	0c 94 5b 1a 	jmp	0x34b6	; 0x34b6 <main+0x136a>
			return 12;
		}
		return 0;
	}
	bool commandAction(int commandIndex, char *ptr){
		char ptr_6_9[13] = "car is armed";
    4ac6:	8d e0       	ldi	r24, 0x0D	; 13
    4ac8:	ee e0       	ldi	r30, 0x0E	; 14
    4aca:	f3 e0       	ldi	r31, 0x03	; 3
    4acc:	de 01       	movw	r26, r28
    4ace:	ab 52       	subi	r26, 0x2B	; 43
    4ad0:	bf 4f       	sbci	r27, 0xFF	; 255
    4ad2:	01 90       	ld	r0, Z+
    4ad4:	0d 92       	st	X+, r0
    4ad6:	8a 95       	dec	r24
    4ad8:	e1 f7       	brne	.-8      	; 0x4ad2 <main+0x2986>
		char ptr_3_4[16] = "Wrong ID number";
    4ada:	80 e1       	ldi	r24, 0x10	; 16
    4adc:	eb e1       	ldi	r30, 0x1B	; 27
    4ade:	f3 e0       	ldi	r31, 0x03	; 3
    4ae0:	ca 51       	subi	r28, 0x1A	; 26
    4ae2:	df 4f       	sbci	r29, 0xFF	; 255
    4ae4:	a8 81       	ld	r26, Y
    4ae6:	c6 5e       	subi	r28, 0xE6	; 230
    4ae8:	d0 40       	sbci	r29, 0x00	; 0
    4aea:	c9 51       	subi	r28, 0x19	; 25
    4aec:	df 4f       	sbci	r29, 0xFF	; 255
    4aee:	b8 81       	ld	r27, Y
    4af0:	c7 5e       	subi	r28, 0xE7	; 231
    4af2:	d0 40       	sbci	r29, 0x00	; 0
    4af4:	01 90       	ld	r0, Z+
    4af6:	0d 92       	st	X+, r0
    4af8:	8a 95       	dec	r24
    4afa:	e1 f7       	brne	.-8      	; 0x4af4 <main+0x29a8>
				return true;
				break;
			}
			case  4:
			{
				if (ptr[10] > '0' && '9' >= ptr[10])
    4afc:	8b 85       	ldd	r24, Y+11	; 0x0b
    4afe:	9f ec       	ldi	r25, 0xCF	; 207
    4b00:	98 0f       	add	r25, r24
    4b02:	99 30       	cpi	r25, 0x09	; 9
    4b04:	10 f4       	brcc	.+4      	; 0x4b0a <main+0x29be>
    4b06:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <main+0x1408>
    4b0a:	0c 94 f7 1a 	jmp	0x35ee	; 0x35ee <main+0x14a2>
			return 12;
		}
		return 0;
	}
	bool commandAction(int commandIndex, char *ptr){
		char ptr_6_9[13] = "car is armed";
    4b0e:	8d e0       	ldi	r24, 0x0D	; 13
    4b10:	ee e0       	ldi	r30, 0x0E	; 14
    4b12:	f3 e0       	ldi	r31, 0x03	; 3
    4b14:	de 01       	movw	r26, r28
    4b16:	ab 52       	subi	r26, 0x2B	; 43
    4b18:	bf 4f       	sbci	r27, 0xFF	; 255
    4b1a:	01 90       	ld	r0, Z+
    4b1c:	0d 92       	st	X+, r0
    4b1e:	8a 95       	dec	r24
    4b20:	e1 f7       	brne	.-8      	; 0x4b1a <main+0x29ce>
		char ptr_3_4[16] = "Wrong ID number";
    4b22:	80 e1       	ldi	r24, 0x10	; 16
    4b24:	eb e1       	ldi	r30, 0x1B	; 27
    4b26:	f3 e0       	ldi	r31, 0x03	; 3
    4b28:	ca 51       	subi	r28, 0x1A	; 26
    4b2a:	df 4f       	sbci	r29, 0xFF	; 255
    4b2c:	a8 81       	ld	r26, Y
    4b2e:	c6 5e       	subi	r28, 0xE6	; 230
    4b30:	d0 40       	sbci	r29, 0x00	; 0
    4b32:	c9 51       	subi	r28, 0x19	; 25
    4b34:	df 4f       	sbci	r29, 0xFF	; 255
    4b36:	b8 81       	ld	r27, Y
    4b38:	c7 5e       	subi	r28, 0xE7	; 231
    4b3a:	d0 40       	sbci	r29, 0x00	; 0
    4b3c:	01 90       	ld	r0, Z+
    4b3e:	0d 92       	st	X+, r0
    4b40:	8a 95       	dec	r24
    4b42:	e1 f7       	brne	.-8      	; 0x4b3c <main+0x29f0>
				return true;
				break;
			}
			case  1:
			{
				if (*(ptr+21) == ' ')
    4b44:	8e 89       	ldd	r24, Y+22	; 0x16
    4b46:	80 32       	cpi	r24, 0x20	; 32
    4b48:	11 f0       	breq	.+4      	; 0x4b4e <main+0x2a02>
    4b4a:	0c 94 18 18 	jmp	0x3030	; 0x3030 <main+0xee4>
    4b4e:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <main+0xbf8>
			return 12;
		}
		return 0;
	}
	bool commandAction(int commandIndex, char *ptr){
		char ptr_6_9[13] = "car is armed";
    4b52:	8d e0       	ldi	r24, 0x0D	; 13
    4b54:	ee e0       	ldi	r30, 0x0E	; 14
    4b56:	f3 e0       	ldi	r31, 0x03	; 3
    4b58:	de 01       	movw	r26, r28
    4b5a:	ab 52       	subi	r26, 0x2B	; 43
    4b5c:	bf 4f       	sbci	r27, 0xFF	; 255
    4b5e:	01 90       	ld	r0, Z+
    4b60:	0d 92       	st	X+, r0
    4b62:	8a 95       	dec	r24
    4b64:	e1 f7       	brne	.-8      	; 0x4b5e <main+0x2a12>
		char ptr_3_4[16] = "Wrong ID number";
    4b66:	80 e1       	ldi	r24, 0x10	; 16
    4b68:	eb e1       	ldi	r30, 0x1B	; 27
    4b6a:	f3 e0       	ldi	r31, 0x03	; 3
    4b6c:	ca 51       	subi	r28, 0x1A	; 26
    4b6e:	df 4f       	sbci	r29, 0xFF	; 255
    4b70:	a8 81       	ld	r26, Y
    4b72:	c6 5e       	subi	r28, 0xE6	; 230
    4b74:	d0 40       	sbci	r29, 0x00	; 0
    4b76:	c9 51       	subi	r28, 0x19	; 25
    4b78:	df 4f       	sbci	r29, 0xFF	; 255
    4b7a:	b8 81       	ld	r27, Y
    4b7c:	c7 5e       	subi	r28, 0xE7	; 231
    4b7e:	d0 40       	sbci	r29, 0x00	; 0
    4b80:	01 90       	ld	r0, Z+
    4b82:	0d 92       	st	X+, r0
    4b84:	8a 95       	dec	r24
    4b86:	e1 f7       	brne	.-8      	; 0x4b80 <main+0x2a34>
				return true;
				break;
			}
			case  2:
			{
				_alarmOnOff = false;
    4b88:	10 92 e3 06 	sts	0x06E3, r1	; 0x8006e3 <top+0x296>
				_carAlarmTimerOverFlow = false;
    4b8c:	10 92 e9 06 	sts	0x06E9, r1	; 0x8006e9 <top+0x29c>
			}
		}
		return result;
	}
	char *getPhoneNumber(int index){
		return _phoneBook[index];}
    4b90:	60 91 e2 06 	lds	r22, 0x06E2	; 0x8006e2 <top+0x295>
    4b94:	fb e0       	ldi	r31, 0x0B	; 11
    4b96:	6f 9f       	mul	r22, r31
    4b98:	b0 01       	movw	r22, r0
    4b9a:	11 24       	eor	r1, r1
    4b9c:	6f 57       	subi	r22, 0x7F	; 127
    4b9e:	7b 4f       	sbci	r23, 0xFB	; 251
		sendCommand("AT+MORING=1",true);
		copyPhoneFromSimToRAM();
	}
	bool sendSMS(const char *ptr,int index, const char *massage2 = NULL, const char *massage3 = NULL, const char *massage4 = NULL, const char *massage5 = NULL){
		char command[25];
		if (*getPhoneNumber(index) == 0)
    4ba0:	db 01       	movw	r26, r22
    4ba2:	8c 91       	ld	r24, X
    4ba4:	88 23       	and	r24, r24
    4ba6:	09 f4       	brne	.+2      	; 0x4baa <main+0x2a5e>
    4ba8:	41 cc       	rjmp	.-1918   	; 0x442c <main+0x22e0>
    4baa:	0c 94 dc 18 	jmp	0x31b8	; 0x31b8 <main+0x106c>
    4bae:	02 96       	adiw	r24, 0x02	; 2
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    4bb0:	56 2f       	mov	r21, r22
    4bb2:	0c 94 7a 16 	jmp	0x2cf4	; 0x2cf4 <main+0xba8>
    4bb6:	02 96       	adiw	r24, 0x02	; 2
    4bb8:	56 2f       	mov	r21, r22
    4bba:	0c 94 b4 18 	jmp	0x3168	; 0x3168 <main+0x101c>
    4bbe:	02 96       	adiw	r24, 0x02	; 2
    4bc0:	56 2f       	mov	r21, r22
    4bc2:	0c 94 6a 19 	jmp	0x32d4	; 0x32d4 <main+0x1188>
    4bc6:	02 96       	adiw	r24, 0x02	; 2
    4bc8:	56 2f       	mov	r21, r22
    4bca:	0c 94 34 1a 	jmp	0x3468	; 0x3468 <main+0x131c>
    4bce:	02 96       	adiw	r24, 0x02	; 2
    4bd0:	56 2f       	mov	r21, r22
    4bd2:	0c 94 bf 1b 	jmp	0x377e	; 0x377e <main+0x1632>
    4bd6:	02 96       	adiw	r24, 0x02	; 2
    4bd8:	56 2f       	mov	r21, r22
    4bda:	b8 c8       	rjmp	.-3728   	; 0x3d4c <main+0x1c00>
    4bdc:	02 96       	adiw	r24, 0x02	; 2
    4bde:	56 2f       	mov	r21, r22
    4be0:	67 c9       	rjmp	.-3378   	; 0x3eb0 <main+0x1d64>
    4be2:	02 96       	adiw	r24, 0x02	; 2
    4be4:	56 2f       	mov	r21, r22
    4be6:	df c9       	rjmp	.-3138   	; 0x3fa6 <main+0x1e5a>
    4be8:	02 96       	adiw	r24, 0x02	; 2
    4bea:	56 2f       	mov	r21, r22
    4bec:	7c ca       	rjmp	.-2824   	; 0x40e6 <main+0x1f9a>
    4bee:	02 96       	adiw	r24, 0x02	; 2
    4bf0:	56 2f       	mov	r21, r22
    4bf2:	2b cb       	rjmp	.-2474   	; 0x424a <main+0x20fe>
    4bf4:	02 96       	adiw	r24, 0x02	; 2
    4bf6:	56 2f       	mov	r21, r22
    4bf8:	ea cb       	rjmp	.-2092   	; 0x43ce <main+0x2282>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    4bfa:	f7 01       	movw	r30, r14
    4bfc:	16 86       	std	Z+14, r1	; 0x0e
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    4bfe:	e1 ec       	ldi	r30, 0xC1	; 193
    4c00:	f0 e0       	ldi	r31, 0x00	; 0
    4c02:	80 81       	ld	r24, Z
    4c04:	80 68       	ori	r24, 0x80	; 128
    4c06:	80 83       	st	Z, r24
			if (*arr != 0)
    4c08:	d7 01       	movw	r26, r14
    4c0a:	8c 91       	ld	r24, X
    4c0c:	88 23       	and	r24, r24
    4c0e:	11 f4       	brne	.+4      	; 0x4c14 <main+0x2ac8>
    4c10:	0c 94 6f 12 	jmp	0x24de	; 0x24de <main+0x392>
    4c14:	0c 94 4e 11 	jmp	0x229c	; 0x229c <main+0x150>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    4c18:	f7 01       	movw	r30, r14
    4c1a:	16 86       	std	Z+14, r1	; 0x0e
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    4c1c:	e1 ec       	ldi	r30, 0xC1	; 193
    4c1e:	f0 e0       	ldi	r31, 0x00	; 0
    4c20:	80 81       	ld	r24, Z
    4c22:	80 68       	ori	r24, 0x80	; 128
    4c24:	80 83       	st	Z, r24
			if (*arr != 0)
    4c26:	d7 01       	movw	r26, r14
    4c28:	8c 91       	ld	r24, X
    4c2a:	88 23       	and	r24, r24
    4c2c:	11 f4       	brne	.+4      	; 0x4c32 <main+0x2ae6>
    4c2e:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <main+0x34a>
    4c32:	0c 94 03 12 	jmp	0x2406	; 0x2406 <main+0x2ba>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    4c36:	a6 96       	adiw	r28, 0x26	; 38
    4c38:	1f ae       	std	Y+63, r1	; 0x3f
    4c3a:	a6 97       	sbiw	r28, 0x26	; 38
    4c3c:	04 e6       	ldi	r16, 0x64	; 100
    4c3e:	10 e0       	ldi	r17, 0x00	; 0
    4c40:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <main+0x49e>
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    4c44:	66 24       	eor	r6, r6
    4c46:	63 94       	inc	r6
    4c48:	71 2c       	mov	r7, r1
    4c4a:	6c 0e       	add	r6, r28
    4c4c:	7d 1e       	adc	r7, r29
    4c4e:	6c 0c       	add	r6, r12
    4c50:	7d 1c       	adc	r7, r13
    4c52:	f3 01       	movw	r30, r6
    4c54:	80 81       	ld	r24, Z
    4c56:	8a 30       	cpi	r24, 0x0A	; 10
    4c58:	11 f0       	breq	.+4      	; 0x4c5e <main+0x2b12>
    4c5a:	0c 94 6d 13 	jmp	0x26da	; 0x26da <main+0x58e>
    4c5e:	0c 94 82 13 	jmp	0x2704	; 0x2704 <main+0x5b8>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    4c62:	d7 01       	movw	r26, r14
    4c64:	1e 96       	adiw	r26, 0x0e	; 14
    4c66:	1c 92       	st	X, r1
    4c68:	1e 97       	sbiw	r26, 0x0e	; 14
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    4c6a:	e1 ec       	ldi	r30, 0xC1	; 193
    4c6c:	f0 e0       	ldi	r31, 0x00	; 0
    4c6e:	80 81       	ld	r24, Z
    4c70:	80 68       	ori	r24, 0x80	; 128
    4c72:	80 83       	st	Z, r24
			if (*arr != 0)
    4c74:	8c 91       	ld	r24, X
    4c76:	88 23       	and	r24, r24
    4c78:	11 f4       	brne	.+4      	; 0x4c7e <main+0x2b32>
    4c7a:	0c 94 3b 14 	jmp	0x2876	; 0x2876 <main+0x72a>
    4c7e:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <main+0x698>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    4c82:	f4 01       	movw	r30, r8
    4c84:	16 86       	std	Z+14, r1	; 0x0e
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    4c86:	e1 ec       	ldi	r30, 0xC1	; 193
    4c88:	f0 e0       	ldi	r31, 0x00	; 0
    4c8a:	80 81       	ld	r24, Z
    4c8c:	80 68       	ori	r24, 0x80	; 128
    4c8e:	80 83       	st	Z, r24
			if (*arr != 0)
    4c90:	d4 01       	movw	r26, r8
    4c92:	8c 91       	ld	r24, X
    4c94:	88 23       	and	r24, r24
    4c96:	11 f4       	brne	.+4      	; 0x4c9c <main+0x2b50>
    4c98:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <main+0xbcc>
    4c9c:	0c 94 44 16 	jmp	0x2c88	; 0x2c88 <main+0xb3c>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    4ca0:	f4 01       	movw	r30, r8
    4ca2:	16 86       	std	Z+14, r1	; 0x0e
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    4ca4:	e1 ec       	ldi	r30, 0xC1	; 193
    4ca6:	f0 e0       	ldi	r31, 0x00	; 0
    4ca8:	80 81       	ld	r24, Z
    4caa:	80 68       	ori	r24, 0x80	; 128
    4cac:	80 83       	st	Z, r24
			if (*arr != 0)
    4cae:	d4 01       	movw	r26, r8
    4cb0:	8c 91       	ld	r24, X
    4cb2:	88 23       	and	r24, r24
    4cb4:	11 f4       	brne	.+4      	; 0x4cba <main+0x2b6e>
    4cb6:	0c 94 c6 18 	jmp	0x318c	; 0x318c <main+0x1040>
    4cba:	0c 94 7e 18 	jmp	0x30fc	; 0x30fc <main+0xfb0>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    4cbe:	f4 01       	movw	r30, r8
    4cc0:	16 86       	std	Z+14, r1	; 0x0e
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    4cc2:	e1 ec       	ldi	r30, 0xC1	; 193
    4cc4:	f0 e0       	ldi	r31, 0x00	; 0
    4cc6:	80 81       	ld	r24, Z
    4cc8:	80 68       	ori	r24, 0x80	; 128
    4cca:	80 83       	st	Z, r24
			if (*arr != 0)
    4ccc:	d4 01       	movw	r26, r8
    4cce:	8c 91       	ld	r24, X
    4cd0:	88 23       	and	r24, r24
    4cd2:	11 f4       	brne	.+4      	; 0x4cd8 <main+0x2b8c>
    4cd4:	0c 94 7c 19 	jmp	0x32f8	; 0x32f8 <main+0x11ac>
    4cd8:	0c 94 34 19 	jmp	0x3268	; 0x3268 <main+0x111c>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    4cdc:	f4 01       	movw	r30, r8
    4cde:	16 86       	std	Z+14, r1	; 0x0e
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    4ce0:	e1 ec       	ldi	r30, 0xC1	; 193
    4ce2:	f0 e0       	ldi	r31, 0x00	; 0
    4ce4:	80 81       	ld	r24, Z
    4ce6:	80 68       	ori	r24, 0x80	; 128
    4ce8:	80 83       	st	Z, r24
			if (*arr != 0)
    4cea:	d4 01       	movw	r26, r8
    4cec:	8c 91       	ld	r24, X
    4cee:	88 23       	and	r24, r24
    4cf0:	11 f4       	brne	.+4      	; 0x4cf6 <main+0x2baa>
    4cf2:	0c 94 46 1a 	jmp	0x348c	; 0x348c <main+0x1340>
    4cf6:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <main+0x12b0>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    4cfa:	f5 01       	movw	r30, r10
    4cfc:	16 86       	std	Z+14, r1	; 0x0e
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    4cfe:	e1 ec       	ldi	r30, 0xC1	; 193
    4d00:	f0 e0       	ldi	r31, 0x00	; 0
    4d02:	80 81       	ld	r24, Z
    4d04:	80 68       	ori	r24, 0x80	; 128
    4d06:	80 83       	st	Z, r24
			if (*arr != 0)
    4d08:	d5 01       	movw	r26, r10
    4d0a:	8c 91       	ld	r24, X
    4d0c:	88 23       	and	r24, r24
    4d0e:	11 f4       	brne	.+4      	; 0x4d14 <main+0x2bc8>
    4d10:	0c 94 d7 1c 	jmp	0x39ae	; 0x39ae <main+0x1862>
    4d14:	0c 94 89 1b 	jmp	0x3712	; 0x3712 <main+0x15c6>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    4d18:	f4 01       	movw	r30, r8
    4d1a:	16 86       	std	Z+14, r1	; 0x0e
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    4d1c:	e1 ec       	ldi	r30, 0xC1	; 193
    4d1e:	f0 e0       	ldi	r31, 0x00	; 0
    4d20:	80 81       	ld	r24, Z
    4d22:	80 68       	ori	r24, 0x80	; 128
    4d24:	80 83       	st	Z, r24
			if (*arr != 0)
    4d26:	d4 01       	movw	r26, r8
    4d28:	8c 91       	ld	r24, X
    4d2a:	88 23       	and	r24, r24
    4d2c:	09 f4       	brne	.+2      	; 0x4d30 <main+0x2be4>
    4d2e:	20 c8       	rjmp	.-4032   	; 0x3d70 <main+0x1c24>
    4d30:	0c 94 71 1e 	jmp	0x3ce2	; 0x3ce2 <main+0x1b96>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    4d34:	f4 01       	movw	r30, r8
    4d36:	16 86       	std	Z+14, r1	; 0x0e
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    4d38:	e1 ec       	ldi	r30, 0xC1	; 193
    4d3a:	f0 e0       	ldi	r31, 0x00	; 0
    4d3c:	80 81       	ld	r24, Z
    4d3e:	80 68       	ori	r24, 0x80	; 128
    4d40:	80 83       	st	Z, r24
			if (*arr != 0)
    4d42:	d4 01       	movw	r26, r8
    4d44:	8c 91       	ld	r24, X
    4d46:	88 23       	and	r24, r24
    4d48:	09 f4       	brne	.+2      	; 0x4d4c <main+0x2c00>
    4d4a:	c4 c8       	rjmp	.-3704   	; 0x3ed4 <main+0x1d88>
    4d4c:	7c c8       	rjmp	.-3848   	; 0x3e46 <main+0x1cfa>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    4d4e:	f4 01       	movw	r30, r8
    4d50:	16 86       	std	Z+14, r1	; 0x0e
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    4d52:	e1 ec       	ldi	r30, 0xC1	; 193
    4d54:	f0 e0       	ldi	r31, 0x00	; 0
    4d56:	80 81       	ld	r24, Z
    4d58:	80 68       	ori	r24, 0x80	; 128
    4d5a:	80 83       	st	Z, r24
			if (*arr != 0)
    4d5c:	d4 01       	movw	r26, r8
    4d5e:	8c 91       	ld	r24, X
    4d60:	88 23       	and	r24, r24
    4d62:	09 f4       	brne	.+2      	; 0x4d66 <main+0x2c1a>
    4d64:	63 cb       	rjmp	.-2362   	; 0x442c <main+0x22e0>
    4d66:	ea c8       	rjmp	.-3628   	; 0x3f3c <main+0x1df0>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    4d68:	f4 01       	movw	r30, r8
    4d6a:	16 86       	std	Z+14, r1	; 0x0e
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    4d6c:	e1 ec       	ldi	r30, 0xC1	; 193
    4d6e:	f0 e0       	ldi	r31, 0x00	; 0
    4d70:	80 81       	ld	r24, Z
    4d72:	80 68       	ori	r24, 0x80	; 128
    4d74:	80 83       	st	Z, r24
			if (*arr != 0)
    4d76:	d4 01       	movw	r26, r8
    4d78:	8c 91       	ld	r24, X
    4d7a:	88 23       	and	r24, r24
    4d7c:	09 f4       	brne	.+2      	; 0x4d80 <main+0x2c34>
    4d7e:	c5 c9       	rjmp	.-3190   	; 0x410a <main+0x1fbe>
    4d80:	7d c9       	rjmp	.-3334   	; 0x407c <main+0x1f30>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    4d82:	f4 01       	movw	r30, r8
    4d84:	16 86       	std	Z+14, r1	; 0x0e
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    4d86:	e1 ec       	ldi	r30, 0xC1	; 193
    4d88:	f0 e0       	ldi	r31, 0x00	; 0
    4d8a:	80 81       	ld	r24, Z
    4d8c:	80 68       	ori	r24, 0x80	; 128
    4d8e:	80 83       	st	Z, r24
			if (*arr != 0)
    4d90:	d4 01       	movw	r26, r8
    4d92:	8c 91       	ld	r24, X
    4d94:	88 23       	and	r24, r24
    4d96:	09 f4       	brne	.+2      	; 0x4d9a <main+0x2c4e>
    4d98:	6a ca       	rjmp	.-2860   	; 0x426e <main+0x2122>
    4d9a:	22 ca       	rjmp	.-3004   	; 0x41e0 <main+0x2094>
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    4d9c:	f7 01       	movw	r30, r14
    4d9e:	16 86       	std	Z+14, r1	; 0x0e
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    4da0:	e1 ec       	ldi	r30, 0xC1	; 193
    4da2:	f0 e0       	ldi	r31, 0x00	; 0
    4da4:	80 81       	ld	r24, Z
    4da6:	80 68       	ori	r24, 0x80	; 128
    4da8:	80 83       	st	Z, r24
			if (*arr != 0)
    4daa:	d7 01       	movw	r26, r14
    4dac:	8c 91       	ld	r24, X
    4dae:	88 23       	and	r24, r24
    4db0:	09 f4       	brne	.+2      	; 0x4db4 <main+0x2c68>
    4db2:	1f cb       	rjmp	.-2498   	; 0x43f2 <main+0x22a6>
    4db4:	d7 ca       	rjmp	.-2642   	; 0x4364 <main+0x2218>

00004db6 <_GLOBAL__sub_I_check>:
		else
		{
			top.startTimeCounter();
		}
    }
}
    4db6:	2f 92       	push	r2
    4db8:	3f 92       	push	r3
    4dba:	4f 92       	push	r4
    4dbc:	5f 92       	push	r5
    4dbe:	6f 92       	push	r6
    4dc0:	7f 92       	push	r7
    4dc2:	8f 92       	push	r8
    4dc4:	9f 92       	push	r9
    4dc6:	af 92       	push	r10
    4dc8:	bf 92       	push	r11
    4dca:	cf 92       	push	r12
    4dcc:	df 92       	push	r13
    4dce:	ef 92       	push	r14
    4dd0:	ff 92       	push	r15
    4dd2:	0f 93       	push	r16
    4dd4:	1f 93       	push	r17
    4dd6:	cf 93       	push	r28
    4dd8:	df 93       	push	r29
    4dda:	cd b7       	in	r28, 0x3d	; 61
    4ddc:	de b7       	in	r29, 0x3e	; 62
    4dde:	cf 55       	subi	r28, 0x5F	; 95
    4de0:	d1 09       	sbc	r29, r1
    4de2:	0f b6       	in	r0, 0x3f	; 63
    4de4:	f8 94       	cli
    4de6:	de bf       	out	0x3e, r29	; 62
    4de8:	0f be       	out	0x3f, r0	; 63
    4dea:	cd bf       	out	0x3d, r28	; 61
			}
		}
	}
};

Uart check;
    4dec:	60 e8       	ldi	r22, 0x80	; 128
    4dee:	75 e2       	ldi	r23, 0x25	; 37
    4df0:	8d ee       	ldi	r24, 0xED	; 237
    4df2:	96 e0       	ldi	r25, 0x06	; 6
    4df4:	f9 d5       	rcall	.+3058   	; 0x59e8 <_ZN4UartC1E8BaudRate>
			_startTimeCounterGSMreset = true;
			_GSMerrorCounter = 0;
		}
	}
public:
	SMS(){
    4df6:	60 e8       	ldi	r22, 0x80	; 128
    4df8:	75 e2       	ldi	r23, 0x25	; 37
    4dfa:	8d e4       	ldi	r24, 0x4D	; 77
    4dfc:	94 e0       	ldi	r25, 0x04	; 4
    4dfe:	f4 d5       	rcall	.+3048   	; 0x59e8 <_ZN4UartC1E8BaudRate>
		DDRC = 0x02;
    4e00:	82 e0       	ldi	r24, 0x02	; 2
    4e02:	87 b9       	out	0x07, r24	; 7
		DDRD |= (1<<5);
    4e04:	55 9a       	sbi	0x0a, 5	; 10
		PORTD |= (1<<5);
    4e06:	5d 9a       	sbi	0x0b, 5	; 11
		*_phoneBook[1] = 0;
    4e08:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <top+0x3f>
		*_phoneBook[2] = 0;
    4e0c:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <top+0x4a>
		*_phoneBook[3] = 0;
    4e10:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <top+0x55>
		*_phoneBook[4] = 0;
    4e14:	10 92 ad 04 	sts	0x04AD, r1	; 0x8004ad <top+0x60>
		_GSMerrorCounter = _1minConterSMSreceived = 0;
    4e18:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <top+0x103>
    4e1c:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <top+0x105>
		_startTimeCounterSMSreceived = false;
    4e20:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <top+0x107>
		_newData = false;
    4e24:	10 92 53 05 	sts	0x0553, r1	; 0x800553 <top+0x106>
		_newDataIndex = 0;
    4e28:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <top+0x10a>
    4e2c:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <top+0x109>
		gsmSMS.setBaudRate(baud);
	}
	void setup(BaudRate BAUD = BAUD9600){
		//_delay_ms(3000);
		
		gsmSMS.setBaudRate(BAUD);
    4e30:	60 e8       	ldi	r22, 0x80	; 128
    4e32:	75 e2       	ldi	r23, 0x25	; 37
    4e34:	8d e4       	ldi	r24, 0x4D	; 77
    4e36:	94 e0       	ldi	r25, 0x04	; 4
    4e38:	b0 d5       	rcall	.+2912   	; 0x599a <_ZN4Uart11setBaudRateE8BaudRate>
		char ptr[15] = {'A','T','+','C','S','C','S','=','"','G','S','M','"',0};
    4e3a:	fe 01       	movw	r30, r28
    4e3c:	ef 5a       	subi	r30, 0xAF	; 175
    4e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e40:	1f e0       	ldi	r17, 0x0F	; 15
    4e42:	df 01       	movw	r26, r30
    4e44:	81 2f       	mov	r24, r17
    4e46:	1d 92       	st	X+, r1
    4e48:	8a 95       	dec	r24
    4e4a:	e9 f7       	brne	.-6      	; 0x4e46 <_GLOBAL__sub_I_check+0x90>
    4e4c:	81 e4       	ldi	r24, 0x41	; 65
    4e4e:	80 83       	st	Z, r24
    4e50:	84 e5       	ldi	r24, 0x54	; 84
    4e52:	81 83       	std	Z+1, r24	; 0x01
    4e54:	8b e2       	ldi	r24, 0x2B	; 43
    4e56:	82 83       	std	Z+2, r24	; 0x02
    4e58:	93 e4       	ldi	r25, 0x43	; 67
    4e5a:	93 83       	std	Z+3, r25	; 0x03
    4e5c:	83 e5       	ldi	r24, 0x53	; 83
    4e5e:	84 83       	std	Z+4, r24	; 0x04
    4e60:	95 83       	std	Z+5, r25	; 0x05
    4e62:	86 83       	std	Z+6, r24	; 0x06
    4e64:	9d e3       	ldi	r25, 0x3D	; 61
    4e66:	97 83       	std	Z+7, r25	; 0x07
    4e68:	92 e2       	ldi	r25, 0x22	; 34
    4e6a:	90 87       	std	Z+8, r25	; 0x08
    4e6c:	27 e4       	ldi	r18, 0x47	; 71
    4e6e:	21 87       	std	Z+9, r18	; 0x09
    4e70:	82 87       	std	Z+10, r24	; 0x0a
    4e72:	8d e4       	ldi	r24, 0x4D	; 77
    4e74:	83 87       	std	Z+11, r24	; 0x0b
    4e76:	94 87       	std	Z+12, r25	; 0x0c
	char _1minConterSMSreceived, _10secRestetGSMdelay , _GSMerrorCounter;
	bool _newData, _startTimeCounterSMSreceived, _startTimeCounterGSMreset;
	int _newDataIndex;
	bool sendCommand(const char ptr[], bool checkAck = false){
		int condition;
		gsmSMS.UARTstring(ptr,0);
    4e78:	40 e0       	ldi	r20, 0x00	; 0
    4e7a:	bf 01       	movw	r22, r30
    4e7c:	8d e4       	ldi	r24, 0x4D	; 77
    4e7e:	94 e0       	ldi	r25, 0x04	; 4
    4e80:	37 d6       	rcall	.+3182   	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		gsmSMS.UARTsend(13);
    4e82:	6d e0       	ldi	r22, 0x0D	; 13
    4e84:	8d e4       	ldi	r24, 0x4D	; 77
    4e86:	94 e0       	ldi	r25, 0x04	; 4
    4e88:	2b d6       	rcall	.+3158   	; 0x5ae0 <_ZN4Uart8UARTsendEh>
    4e8a:	fe 01       	movw	r30, r28
		if (checkAck)
		{
			char arr[15] = {0};
    4e8c:	31 96       	adiw	r30, 0x01	; 1
    4e8e:	df 01       	movw	r26, r30
    4e90:	1d 92       	st	X+, r1
    4e92:	1a 95       	dec	r17
    4e94:	e9 f7       	brne	.-6      	; 0x4e90 <_GLOBAL__sub_I_check+0xda>
    4e96:	a1 ec       	ldi	r26, 0xC1	; 193
			RXinterruptDisable();
    4e98:	b0 e0       	ldi	r27, 0x00	; 0
    4e9a:	8c 91       	ld	r24, X
    4e9c:	8f 77       	andi	r24, 0x7F	; 127
    4e9e:	8c 93       	st	X, r24
    4ea0:	7f 01       	movw	r14, r30
			return false;
		}
		return 0;
	}
	int checkForACkPacket(char getData[], int arrSize){
		int i = 0;
    4ea2:	00 e0       	ldi	r16, 0x00	; 0
    4ea4:	10 e0       	ldi	r17, 0x00	; 0
		char data = 0;
		
		do 
		{
			data = gsmSMS.UARTreceive();
    4ea6:	8d e4       	ldi	r24, 0x4D	; 77
    4ea8:	94 e0       	ldi	r25, 0x04	; 4
    4eaa:	05 d6       	rcall	.+3082   	; 0x5ab6 <_ZN4Uart11UARTreceiveEv>
    4eac:	0f 5f       	subi	r16, 0xFF	; 255
			getData[i++] = data;
    4eae:	1f 4f       	sbci	r17, 0xFF	; 255
    4eb0:	f7 01       	movw	r30, r14
    4eb2:	81 93       	st	Z+, r24
    4eb4:	7f 01       	movw	r14, r30
		}while(gsmSMS.checkForData() && i < arrSize);
    4eb6:	8d e4       	ldi	r24, 0x4D	; 77
    4eb8:	94 e0       	ldi	r25, 0x04	; 4
    4eba:	dc d5       	rcall	.+3000   	; 0x5a74 <_ZN4Uart12checkForDataEv>
    4ebc:	88 23       	and	r24, r24
    4ebe:	09 f4       	brne	.+2      	; 0x4ec2 <_GLOBAL__sub_I_check+0x10c>
    4ec0:	43 c2       	rjmp	.+1158   	; 0x5348 <_GLOBAL__sub_I_check+0x592>
    4ec2:	0e 30       	cpi	r16, 0x0E	; 14
    4ec4:	11 05       	cpc	r17, r1
    4ec6:	79 f7       	brne	.-34     	; 0x4ea6 <_GLOBAL__sub_I_check+0xf0>
    4ec8:	84 c2       	rjmp	.+1288   	; 0x53d2 <_GLOBAL__sub_I_check+0x61c>
    4eca:	a8 01       	movw	r20, r16
    4ecc:	11 23       	and	r17, r17
    4ece:	14 f4       	brge	.+4      	; 0x4ed4 <_GLOBAL__sub_I_check+0x11e>
    4ed0:	40 e0       	ldi	r20, 0x00	; 0
    4ed2:	50 e0       	ldi	r21, 0x00	; 0
    4ed4:	55 27       	eor	r21, r21
    4ed6:	14 16       	cp	r1, r20
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    4ed8:	15 06       	cpc	r1, r21
    4eda:	0c f0       	brlt	.+2      	; 0x4ede <_GLOBAL__sub_I_check+0x128>
    4edc:	52 c0       	rjmp	.+164    	; 0x4f82 <_GLOBAL__sub_I_check+0x1cc>
    4ede:	02 c0       	rjmp	.+4      	; 0x4ee4 <_GLOBAL__sub_I_check+0x12e>
    4ee0:	4e e0       	ldi	r20, 0x0E	; 14
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
			if (*arr != 0)
    4ee2:	50 e0       	ldi	r21, 0x00	; 0
    4ee4:	11 e0       	ldi	r17, 0x01	; 1
    4ee6:	80 e0       	ldi	r24, 0x00	; 0
    4ee8:	90 e0       	ldi	r25, 0x00	; 0
    4eea:	67 e3       	ldi	r22, 0x37	; 55
    4eec:	71 e0       	ldi	r23, 0x01	; 1
    4eee:	00 e0       	ldi	r16, 0x00	; 0
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    4ef0:	e1 e0       	ldi	r30, 0x01	; 1
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    4ef2:	f0 e0       	ldi	r31, 0x00	; 0
    4ef4:	ec 0f       	add	r30, r28
    4ef6:	fd 1f       	adc	r31, r29
    4ef8:	e8 0f       	add	r30, r24
    4efa:	f9 1f       	adc	r31, r25
    4efc:	20 81       	ld	r18, Z
    4efe:	25 34       	cpi	r18, 0x45	; 69
    4f00:	61 f4       	brne	.+24     	; 0x4f1a <_GLOBAL__sub_I_check+0x164>
    4f02:	a2 e3       	ldi	r26, 0x32	; 50
    4f04:	b1 e0       	ldi	r27, 0x01	; 1
    4f06:	31 91       	ld	r19, Z+
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    4f08:	2d 91       	ld	r18, X+
    4f0a:	32 13       	cpse	r19, r18
    4f0c:	10 2f       	mov	r17, r16
					{
						status = false;
    4f0e:	a6 17       	cp	r26, r22
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    4f10:	b7 07       	cpc	r27, r23
    4f12:	c9 f7       	brne	.-14     	; 0x4f06 <_GLOBAL__sub_I_check+0x150>
    4f14:	05 96       	adiw	r24, 0x05	; 5
    4f16:	11 11       	cpse	r17, r1
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    4f18:	34 c0       	rjmp	.+104    	; 0x4f82 <_GLOBAL__sub_I_check+0x1cc>
    4f1a:	01 96       	adiw	r24, 0x01	; 1
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    4f1c:	84 17       	cp	r24, r20
    4f1e:	95 07       	cpc	r25, r21
    4f20:	3c f3       	brlt	.-50     	; 0x4ef0 <_GLOBAL__sub_I_check+0x13a>
    4f22:	31 e0       	ldi	r19, 0x01	; 1
    4f24:	80 e0       	ldi	r24, 0x00	; 0
    4f26:	90 e0       	ldi	r25, 0x00	; 0
    4f28:	60 e0       	ldi	r22, 0x00	; 0
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    4f2a:	e1 e0       	ldi	r30, 0x01	; 1
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    4f2c:	f0 e0       	ldi	r31, 0x00	; 0
    4f2e:	ec 0f       	add	r30, r28
    4f30:	fd 1f       	adc	r31, r29
    4f32:	e8 0f       	add	r30, r24
    4f34:	f9 1f       	adc	r31, r25
    4f36:	20 81       	ld	r18, Z
    4f38:	2f 34       	cpi	r18, 0x4F	; 79
    4f3a:	69 f4       	brne	.+26     	; 0x4f56 <_GLOBAL__sub_I_check+0x1a0>
    4f3c:	e2 e0       	ldi	r30, 0x02	; 2
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    4f3e:	f0 e0       	ldi	r31, 0x00	; 0
    4f40:	ec 0f       	add	r30, r28
    4f42:	fd 1f       	adc	r31, r29
    4f44:	e8 0f       	add	r30, r24
    4f46:	f9 1f       	adc	r31, r25
    4f48:	20 81       	ld	r18, Z
    4f4a:	2b 34       	cpi	r18, 0x4B	; 75
    4f4c:	09 f0       	breq	.+2      	; 0x4f50 <_GLOBAL__sub_I_check+0x19a>
    4f4e:	38 c2       	rjmp	.+1136   	; 0x53c0 <_GLOBAL__sub_I_check+0x60a>
    4f50:	02 96       	adiw	r24, 0x02	; 2
    4f52:	31 11       	cpse	r19, r1
					{
						status = false;
					}
				}
				if (status)
    4f54:	16 c0       	rjmp	.+44     	; 0x4f82 <_GLOBAL__sub_I_check+0x1cc>
    4f56:	01 96       	adiw	r24, 0x01	; 1
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    4f58:	84 17       	cp	r24, r20
    4f5a:	95 07       	cpc	r25, r21
    4f5c:	34 f3       	brlt	.-52     	; 0x4f2a <_GLOBAL__sub_I_check+0x174>
    4f5e:	89 81       	ldd	r24, Y+1	; 0x01
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    4f60:	8e 33       	cpi	r24, 0x3E	; 62
    4f62:	79 f0       	breq	.+30     	; 0x4f82 <_GLOBAL__sub_I_check+0x1cc>
    4f64:	fe 01       	movw	r30, r28
    4f66:	32 96       	adiw	r30, 0x02	; 2
    4f68:	81 e0       	ldi	r24, 0x01	; 1
    4f6a:	90 e0       	ldi	r25, 0x00	; 0
    4f6c:	8c 0f       	add	r24, r28
    4f6e:	9d 1f       	adc	r25, r29
    4f70:	48 0f       	add	r20, r24
    4f72:	59 1f       	adc	r21, r25
    4f74:	03 c0       	rjmp	.+6      	; 0x4f7c <_GLOBAL__sub_I_check+0x1c6>
    4f76:	81 91       	ld	r24, Z+
    4f78:	8e 33       	cpi	r24, 0x3E	; 62
    4f7a:	19 f0       	breq	.+6      	; 0x4f82 <_GLOBAL__sub_I_check+0x1cc>
    4f7c:	4e 17       	cp	r20, r30
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    4f7e:	5f 07       	cpc	r21, r31
    4f80:	d1 f7       	brne	.-12     	; 0x4f76 <_GLOBAL__sub_I_check+0x1c0>
	char _1minConterSMSreceived, _10secRestetGSMdelay , _GSMerrorCounter;
	bool _newData, _startTimeCounterSMSreceived, _startTimeCounterGSMreset;
	int _newDataIndex;
	bool sendCommand(const char ptr[], bool checkAck = false){
		int condition;
		gsmSMS.UARTstring(ptr,0);
    4f82:	40 e0       	ldi	r20, 0x00	; 0
    4f84:	67 e7       	ldi	r22, 0x77	; 119
    4f86:	71 e0       	ldi	r23, 0x01	; 1
    4f88:	8d e4       	ldi	r24, 0x4D	; 77
    4f8a:	94 e0       	ldi	r25, 0x04	; 4
    4f8c:	b1 d5       	rcall	.+2914   	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		gsmSMS.UARTsend(13);
    4f8e:	6d e0       	ldi	r22, 0x0D	; 13
    4f90:	8d e4       	ldi	r24, 0x4D	; 77
    4f92:	94 e0       	ldi	r25, 0x04	; 4
    4f94:	a5 d5       	rcall	.+2890   	; 0x5ae0 <_ZN4Uart8UARTsendEh>
    4f96:	fe 01       	movw	r30, r28
		if (checkAck)
		{
			char arr[15] = {0};
    4f98:	31 96       	adiw	r30, 0x01	; 1
    4f9a:	8f e0       	ldi	r24, 0x0F	; 15
    4f9c:	df 01       	movw	r26, r30
    4f9e:	1d 92       	st	X+, r1
    4fa0:	8a 95       	dec	r24
    4fa2:	e9 f7       	brne	.-6      	; 0x4f9e <_GLOBAL__sub_I_check+0x1e8>
    4fa4:	a1 ec       	ldi	r26, 0xC1	; 193
			RXinterruptDisable();
    4fa6:	b0 e0       	ldi	r27, 0x00	; 0
    4fa8:	8c 91       	ld	r24, X
    4faa:	8f 77       	andi	r24, 0x7F	; 127
    4fac:	8c 93       	st	X, r24
    4fae:	7f 01       	movw	r14, r30
			return false;
		}
		return 0;
	}
	int checkForACkPacket(char getData[], int arrSize){
		int i = 0;
    4fb0:	00 e0       	ldi	r16, 0x00	; 0
    4fb2:	10 e0       	ldi	r17, 0x00	; 0
		char data = 0;
		
		do 
		{
			data = gsmSMS.UARTreceive();
    4fb4:	8d e4       	ldi	r24, 0x4D	; 77
    4fb6:	94 e0       	ldi	r25, 0x04	; 4
    4fb8:	7e d5       	rcall	.+2812   	; 0x5ab6 <_ZN4Uart11UARTreceiveEv>
			getData[i++] = data;
    4fba:	0f 5f       	subi	r16, 0xFF	; 255
    4fbc:	1f 4f       	sbci	r17, 0xFF	; 255
    4fbe:	f7 01       	movw	r30, r14
    4fc0:	81 93       	st	Z+, r24
    4fc2:	7f 01       	movw	r14, r30
		}while(gsmSMS.checkForData() && i < arrSize);
    4fc4:	8d e4       	ldi	r24, 0x4D	; 77
    4fc6:	94 e0       	ldi	r25, 0x04	; 4
    4fc8:	55 d5       	rcall	.+2730   	; 0x5a74 <_ZN4Uart12checkForDataEv>
    4fca:	88 23       	and	r24, r24
    4fcc:	09 f4       	brne	.+2      	; 0x4fd0 <_GLOBAL__sub_I_check+0x21a>
    4fce:	c9 c1       	rjmp	.+914    	; 0x5362 <_GLOBAL__sub_I_check+0x5ac>
    4fd0:	0e 30       	cpi	r16, 0x0E	; 14
    4fd2:	11 05       	cpc	r17, r1
    4fd4:	79 f7       	brne	.-34     	; 0x4fb4 <_GLOBAL__sub_I_check+0x1fe>
    4fd6:	08 c2       	rjmp	.+1040   	; 0x53e8 <_GLOBAL__sub_I_check+0x632>
    4fd8:	a8 01       	movw	r20, r16
    4fda:	11 23       	and	r17, r17
    4fdc:	14 f4       	brge	.+4      	; 0x4fe2 <_GLOBAL__sub_I_check+0x22c>
    4fde:	40 e0       	ldi	r20, 0x00	; 0
    4fe0:	50 e0       	ldi	r21, 0x00	; 0
    4fe2:	55 27       	eor	r21, r21
    4fe4:	14 16       	cp	r1, r20
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    4fe6:	15 06       	cpc	r1, r21
    4fe8:	0c f0       	brlt	.+2      	; 0x4fec <_GLOBAL__sub_I_check+0x236>
    4fea:	52 c0       	rjmp	.+164    	; 0x5090 <_GLOBAL__sub_I_check+0x2da>
    4fec:	02 c0       	rjmp	.+4      	; 0x4ff2 <_GLOBAL__sub_I_check+0x23c>
    4fee:	4e e0       	ldi	r20, 0x0E	; 14
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
			if (*arr != 0)
    4ff0:	50 e0       	ldi	r21, 0x00	; 0
    4ff2:	11 e0       	ldi	r17, 0x01	; 1
    4ff4:	80 e0       	ldi	r24, 0x00	; 0
    4ff6:	90 e0       	ldi	r25, 0x00	; 0
    4ff8:	67 e3       	ldi	r22, 0x37	; 55
    4ffa:	71 e0       	ldi	r23, 0x01	; 1
    4ffc:	00 e0       	ldi	r16, 0x00	; 0
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    4ffe:	e1 e0       	ldi	r30, 0x01	; 1
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    5000:	f0 e0       	ldi	r31, 0x00	; 0
    5002:	ec 0f       	add	r30, r28
    5004:	fd 1f       	adc	r31, r29
    5006:	e8 0f       	add	r30, r24
    5008:	f9 1f       	adc	r31, r25
    500a:	20 81       	ld	r18, Z
    500c:	25 34       	cpi	r18, 0x45	; 69
    500e:	61 f4       	brne	.+24     	; 0x5028 <_GLOBAL__sub_I_check+0x272>
    5010:	a2 e3       	ldi	r26, 0x32	; 50
    5012:	b1 e0       	ldi	r27, 0x01	; 1
    5014:	31 91       	ld	r19, Z+
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    5016:	2d 91       	ld	r18, X+
    5018:	32 13       	cpse	r19, r18
    501a:	10 2f       	mov	r17, r16
					{
						status = false;
    501c:	6a 17       	cp	r22, r26
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    501e:	7b 07       	cpc	r23, r27
    5020:	c9 f7       	brne	.-14     	; 0x5014 <_GLOBAL__sub_I_check+0x25e>
    5022:	05 96       	adiw	r24, 0x05	; 5
    5024:	11 11       	cpse	r17, r1
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    5026:	34 c0       	rjmp	.+104    	; 0x5090 <_GLOBAL__sub_I_check+0x2da>
    5028:	01 96       	adiw	r24, 0x01	; 1
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    502a:	84 17       	cp	r24, r20
    502c:	95 07       	cpc	r25, r21
    502e:	3c f3       	brlt	.-50     	; 0x4ffe <_GLOBAL__sub_I_check+0x248>
    5030:	31 e0       	ldi	r19, 0x01	; 1
    5032:	80 e0       	ldi	r24, 0x00	; 0
    5034:	90 e0       	ldi	r25, 0x00	; 0
    5036:	60 e0       	ldi	r22, 0x00	; 0
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    5038:	e1 e0       	ldi	r30, 0x01	; 1
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    503a:	f0 e0       	ldi	r31, 0x00	; 0
    503c:	ec 0f       	add	r30, r28
    503e:	fd 1f       	adc	r31, r29
    5040:	e8 0f       	add	r30, r24
    5042:	f9 1f       	adc	r31, r25
    5044:	20 81       	ld	r18, Z
    5046:	2f 34       	cpi	r18, 0x4F	; 79
    5048:	69 f4       	brne	.+26     	; 0x5064 <_GLOBAL__sub_I_check+0x2ae>
    504a:	e2 e0       	ldi	r30, 0x02	; 2
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    504c:	f0 e0       	ldi	r31, 0x00	; 0
    504e:	ec 0f       	add	r30, r28
    5050:	fd 1f       	adc	r31, r29
    5052:	e8 0f       	add	r30, r24
    5054:	f9 1f       	adc	r31, r25
    5056:	20 81       	ld	r18, Z
    5058:	2b 34       	cpi	r18, 0x4B	; 75
    505a:	09 f0       	breq	.+2      	; 0x505e <_GLOBAL__sub_I_check+0x2a8>
    505c:	b4 c1       	rjmp	.+872    	; 0x53c6 <_GLOBAL__sub_I_check+0x610>
    505e:	02 96       	adiw	r24, 0x02	; 2
    5060:	31 11       	cpse	r19, r1
					{
						status = false;
					}
				}
				if (status)
    5062:	16 c0       	rjmp	.+44     	; 0x5090 <_GLOBAL__sub_I_check+0x2da>
    5064:	01 96       	adiw	r24, 0x01	; 1
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    5066:	84 17       	cp	r24, r20
    5068:	95 07       	cpc	r25, r21
    506a:	34 f3       	brlt	.-52     	; 0x5038 <_GLOBAL__sub_I_check+0x282>
    506c:	89 81       	ldd	r24, Y+1	; 0x01
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    506e:	8e 33       	cpi	r24, 0x3E	; 62
    5070:	79 f0       	breq	.+30     	; 0x5090 <_GLOBAL__sub_I_check+0x2da>
    5072:	fe 01       	movw	r30, r28
    5074:	32 96       	adiw	r30, 0x02	; 2
    5076:	81 e0       	ldi	r24, 0x01	; 1
    5078:	90 e0       	ldi	r25, 0x00	; 0
    507a:	8c 0f       	add	r24, r28
    507c:	9d 1f       	adc	r25, r29
    507e:	48 0f       	add	r20, r24
    5080:	59 1f       	adc	r21, r25
    5082:	03 c0       	rjmp	.+6      	; 0x508a <_GLOBAL__sub_I_check+0x2d4>
    5084:	81 91       	ld	r24, Z+
    5086:	8e 33       	cpi	r24, 0x3E	; 62
    5088:	19 f0       	breq	.+6      	; 0x5090 <_GLOBAL__sub_I_check+0x2da>
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    508a:	4e 17       	cp	r20, r30
    508c:	5f 07       	cpc	r21, r31
	char _1minConterSMSreceived, _10secRestetGSMdelay , _GSMerrorCounter;
	bool _newData, _startTimeCounterSMSreceived, _startTimeCounterGSMreset;
	int _newDataIndex;
	bool sendCommand(const char ptr[], bool checkAck = false){
		int condition;
		gsmSMS.UARTstring(ptr,0);
    508e:	d1 f7       	brne	.-12     	; 0x5084 <_GLOBAL__sub_I_check+0x2ce>
    5090:	40 e0       	ldi	r20, 0x00	; 0
    5092:	61 e8       	ldi	r22, 0x81	; 129
    5094:	71 e0       	ldi	r23, 0x01	; 1
    5096:	8d e4       	ldi	r24, 0x4D	; 77
    5098:	94 e0       	ldi	r25, 0x04	; 4
    509a:	2a d5       	rcall	.+2644   	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
		gsmSMS.UARTsend(13);
    509c:	6d e0       	ldi	r22, 0x0D	; 13
    509e:	8d e4       	ldi	r24, 0x4D	; 77
    50a0:	94 e0       	ldi	r25, 0x04	; 4
    50a2:	1e d5       	rcall	.+2620   	; 0x5ae0 <_ZN4Uart8UARTsendEh>
    50a4:	fe 01       	movw	r30, r28
		if (checkAck)
		{
			char arr[15] = {0};
    50a6:	31 96       	adiw	r30, 0x01	; 1
    50a8:	8f e0       	ldi	r24, 0x0F	; 15
    50aa:	df 01       	movw	r26, r30
    50ac:	1d 92       	st	X+, r1
    50ae:	8a 95       	dec	r24
    50b0:	e9 f7       	brne	.-6      	; 0x50ac <_GLOBAL__sub_I_check+0x2f6>
			RXinterruptDisable();
    50b2:	a1 ec       	ldi	r26, 0xC1	; 193
    50b4:	b0 e0       	ldi	r27, 0x00	; 0
    50b6:	8c 91       	ld	r24, X
    50b8:	8f 77       	andi	r24, 0x7F	; 127
    50ba:	8c 93       	st	X, r24
			return false;
		}
		return 0;
	}
	int checkForACkPacket(char getData[], int arrSize){
		int i = 0;
    50bc:	7f 01       	movw	r14, r30
    50be:	00 e0       	ldi	r16, 0x00	; 0
		char data = 0;
		
		do 
		{
			data = gsmSMS.UARTreceive();
    50c0:	10 e0       	ldi	r17, 0x00	; 0
    50c2:	8d e4       	ldi	r24, 0x4D	; 77
    50c4:	94 e0       	ldi	r25, 0x04	; 4
    50c6:	f7 d4       	rcall	.+2542   	; 0x5ab6 <_ZN4Uart11UARTreceiveEv>
			getData[i++] = data;
    50c8:	0f 5f       	subi	r16, 0xFF	; 255
    50ca:	1f 4f       	sbci	r17, 0xFF	; 255
    50cc:	f7 01       	movw	r30, r14
    50ce:	81 93       	st	Z+, r24
    50d0:	7f 01       	movw	r14, r30
		}while(gsmSMS.checkForData() && i < arrSize);
    50d2:	8d e4       	ldi	r24, 0x4D	; 77
    50d4:	94 e0       	ldi	r25, 0x04	; 4
    50d6:	ce d4       	rcall	.+2460   	; 0x5a74 <_ZN4Uart12checkForDataEv>
    50d8:	88 23       	and	r24, r24
    50da:	09 f4       	brne	.+2      	; 0x50de <_GLOBAL__sub_I_check+0x328>
    50dc:	4f c1       	rjmp	.+670    	; 0x537c <_GLOBAL__sub_I_check+0x5c6>
    50de:	0e 30       	cpi	r16, 0x0E	; 14
    50e0:	11 05       	cpc	r17, r1
    50e2:	79 f7       	brne	.-34     	; 0x50c2 <_GLOBAL__sub_I_check+0x30c>
    50e4:	8c c1       	rjmp	.+792    	; 0x53fe <_GLOBAL__sub_I_check+0x648>
    50e6:	a8 01       	movw	r20, r16
    50e8:	11 23       	and	r17, r17
    50ea:	14 f4       	brge	.+4      	; 0x50f0 <_GLOBAL__sub_I_check+0x33a>
    50ec:	40 e0       	ldi	r20, 0x00	; 0
    50ee:	50 e0       	ldi	r21, 0x00	; 0
    50f0:	55 27       	eor	r21, r21
    50f2:	14 16       	cp	r1, r20
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    50f4:	15 06       	cpc	r1, r21
    50f6:	0c f0       	brlt	.+2      	; 0x50fa <_GLOBAL__sub_I_check+0x344>
    50f8:	52 c0       	rjmp	.+164    	; 0x519e <_GLOBAL__sub_I_check+0x3e8>
    50fa:	02 c0       	rjmp	.+4      	; 0x5100 <_GLOBAL__sub_I_check+0x34a>
    50fc:	4e e0       	ldi	r20, 0x0E	; 14
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
			if (*arr != 0)
    50fe:	50 e0       	ldi	r21, 0x00	; 0
    5100:	11 e0       	ldi	r17, 0x01	; 1
    5102:	80 e0       	ldi	r24, 0x00	; 0
    5104:	90 e0       	ldi	r25, 0x00	; 0
    5106:	67 e3       	ldi	r22, 0x37	; 55
    5108:	71 e0       	ldi	r23, 0x01	; 1
    510a:	00 e0       	ldi	r16, 0x00	; 0
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
					{
						status = false;
    510c:	e1 e0       	ldi	r30, 0x01	; 1
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    510e:	f0 e0       	ldi	r31, 0x00	; 0
    5110:	ec 0f       	add	r30, r28
    5112:	fd 1f       	adc	r31, r29
    5114:	e8 0f       	add	r30, r24
    5116:	f9 1f       	adc	r31, r25
    5118:	20 81       	ld	r18, Z
    511a:	25 34       	cpi	r18, 0x45	; 69
    511c:	61 f4       	brne	.+24     	; 0x5136 <_GLOBAL__sub_I_check+0x380>
    511e:	a2 e3       	ldi	r26, 0x32	; 50
    5120:	b1 e0       	ldi	r27, 0x01	; 1
    5122:	31 91       	ld	r19, Z+
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    5124:	2d 91       	ld	r18, X+
    5126:	32 13       	cpse	r19, r18
    5128:	10 2f       	mov	r17, r16
					{
						status = false;
    512a:	a6 17       	cp	r26, r22
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
    512c:	b7 07       	cpc	r27, r23
    512e:	c9 f7       	brne	.-14     	; 0x5122 <_GLOBAL__sub_I_check+0x36c>
    5130:	05 96       	adiw	r24, 0x05	; 5
    5132:	11 11       	cpse	r17, r1
					if (!(arr[i] == word[j]))
					{
						status = false;
					}
				}
				if (status)
    5134:	34 c0       	rjmp	.+104    	; 0x519e <_GLOBAL__sub_I_check+0x3e8>
    5136:	01 96       	adiw	r24, 0x01	; 1
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    5138:	84 17       	cp	r24, r20
    513a:	95 07       	cpc	r25, r21
    513c:	3c f3       	brlt	.-50     	; 0x510c <_GLOBAL__sub_I_check+0x356>
    513e:	31 e0       	ldi	r19, 0x01	; 1
    5140:	80 e0       	ldi	r24, 0x00	; 0
    5142:	90 e0       	ldi	r25, 0x00	; 0
    5144:	60 e0       	ldi	r22, 0x00	; 0
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    5146:	e1 e0       	ldi	r30, 0x01	; 1
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == *word)
    5148:	f0 e0       	ldi	r31, 0x00	; 0
    514a:	ec 0f       	add	r30, r28
    514c:	fd 1f       	adc	r31, r29
    514e:	e8 0f       	add	r30, r24
    5150:	f9 1f       	adc	r31, r25
    5152:	20 81       	ld	r18, Z
    5154:	2f 34       	cpi	r18, 0x4F	; 79
    5156:	69 f4       	brne	.+26     	; 0x5172 <_GLOBAL__sub_I_check+0x3bc>
    5158:	e2 e0       	ldi	r30, 0x02	; 2
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    515a:	f0 e0       	ldi	r31, 0x00	; 0
    515c:	ec 0f       	add	r30, r28
    515e:	fd 1f       	adc	r31, r29
    5160:	e8 0f       	add	r30, r24
    5162:	f9 1f       	adc	r31, r25
    5164:	20 81       	ld	r18, Z
    5166:	2b 34       	cpi	r18, 0x4B	; 75
    5168:	09 f0       	breq	.+2      	; 0x516c <_GLOBAL__sub_I_check+0x3b6>
    516a:	30 c1       	rjmp	.+608    	; 0x53cc <_GLOBAL__sub_I_check+0x616>
    516c:	02 96       	adiw	r24, 0x02	; 2
    516e:	31 11       	cpse	r19, r1
					{
						status = false;
					}
				}
				if (status)
    5170:	16 c0       	rjmp	.+44     	; 0x519e <_GLOBAL__sub_I_check+0x3e8>
    5172:	01 96       	adiw	r24, 0x01	; 1
		return 0;
	}
	bool compWordInArr(const char *arr,const char *word, char wordSize, char arrMaxSize)
	{
		bool status = true;
		for(int i = 0; i < arrMaxSize; i++)
    5174:	84 17       	cp	r24, r20
    5176:	95 07       	cpc	r25, r21
    5178:	34 f3       	brlt	.-52     	; 0x5146 <_GLOBAL__sub_I_check+0x390>
    517a:	89 81       	ldd	r24, Y+1	; 0x01
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    517c:	8e 33       	cpi	r24, 0x3E	; 62
    517e:	79 f0       	breq	.+30     	; 0x519e <_GLOBAL__sub_I_check+0x3e8>
    5180:	fe 01       	movw	r30, r28
    5182:	32 96       	adiw	r30, 0x02	; 2
    5184:	81 e0       	ldi	r24, 0x01	; 1
    5186:	90 e0       	ldi	r25, 0x00	; 0
    5188:	8c 0f       	add	r24, r28
    518a:	9d 1f       	adc	r25, r29
    518c:	48 0f       	add	r20, r24
    518e:	59 1f       	adc	r21, r25
    5190:	03 c0       	rjmp	.+6      	; 0x5198 <_GLOBAL__sub_I_check+0x3e2>
    5192:	81 91       	ld	r24, Z+
    5194:	8e 33       	cpi	r24, 0x3E	; 62
    5196:	19 f0       	breq	.+6      	; 0x519e <_GLOBAL__sub_I_check+0x3e8>
    5198:	4e 17       	cp	r20, r30
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    519a:	5f 07       	cpc	r21, r31
    519c:	d1 f7       	brne	.-12     	; 0x5192 <_GLOBAL__sub_I_check+0x3dc>
    519e:	fe 01       	movw	r30, r28
			return sendCommand(arr,true);
		}
		return false;
	}
	void copyPhoneFromSimToRAM(){
		char phoneNum[15] = {0};
    51a0:	ee 5b       	subi	r30, 0xBE	; 190
    51a2:	ff 4f       	sbci	r31, 0xFF	; 255
    51a4:	8f e0       	ldi	r24, 0x0F	; 15
    51a6:	df 01       	movw	r26, r30
    51a8:	1d 92       	st	X+, r1
    51aa:	8a 95       	dec	r24
    51ac:	e9 f7       	brne	.-6      	; 0x51a8 <_GLOBAL__sub_I_check+0x3f2>
    51ae:	0f 2e       	mov	r0, r31
    51b0:	fc e8       	ldi	r31, 0x8C	; 140
    51b2:	6f 2e       	mov	r6, r31
    51b4:	f4 e0       	ldi	r31, 0x04	; 4
    51b6:	7f 2e       	mov	r7, r31
    51b8:	f0 2d       	mov	r31, r0
    51ba:	0f 2e       	mov	r0, r31
    51bc:	f1 e3       	ldi	r31, 0x31	; 49
    51be:	3f 2e       	mov	r3, r31
    51c0:	f0 2d       	mov	r31, r0
    51c2:	0f 2e       	mov	r0, r31
		bool newData = _newData;
		_newData = false;
		return newData;
	}
	char *getPhoneBookNumber(char phoneNum[],char index){
		char arrCommand[15] ={"AT+CPBR=X\r\n"};
    51c4:	f3 e0       	ldi	r31, 0x03	; 3
    51c6:	2f 2e       	mov	r2, r31
    51c8:	f0 2d       	mov	r31, r0
    51ca:	2e 01       	movw	r4, r28
    51cc:	bf e3       	ldi	r27, 0x3F	; 63
    51ce:	4b 0e       	add	r4, r27
    51d0:	51 1c       	adc	r5, r1
    51d2:	e1 54       	subi	r30, 0x41	; 65
		char dataIn[50] = {0};
    51d4:	f1 09       	sbc	r31, r1
    51d6:	4f 01       	movw	r8, r30
    51d8:	0f 2e       	mov	r0, r31
		RXinterruptDisable();
    51da:	f1 ec       	ldi	r31, 0xC1	; 193
    51dc:	af 2e       	mov	r10, r31
    51de:	b1 2c       	mov	r11, r1
    51e0:	f0 2d       	mov	r31, r0
    51e2:	6e 01       	movw	r12, r28
    51e4:	f2 e3       	ldi	r31, 0x32	; 50
    51e6:	cf 0e       	add	r12, r31
    51e8:	d1 1c       	adc	r13, r1
    51ea:	8c e0       	ldi	r24, 0x0C	; 12
		bool newData = _newData;
		_newData = false;
		return newData;
	}
	char *getPhoneBookNumber(char phoneNum[],char index){
		char arrCommand[15] ={"AT+CPBR=X\r\n"};
    51ec:	e0 e0       	ldi	r30, 0x00	; 0
    51ee:	f1 e0       	ldi	r31, 0x01	; 1
    51f0:	de 01       	movw	r26, r28
    51f2:	d3 96       	adiw	r26, 0x33	; 51
    51f4:	01 90       	ld	r0, Z+
    51f6:	0d 92       	st	X+, r0
    51f8:	8a 95       	dec	r24
    51fa:	e1 f7       	brne	.-8      	; 0x51f4 <_GLOBAL__sub_I_check+0x43e>
    51fc:	d2 01       	movw	r26, r4
    51fe:	e2 2d       	mov	r30, r2
    5200:	1d 92       	st	X+, r1
    5202:	ea 95       	dec	r30
    5204:	e9 f7       	brne	.-6      	; 0x5200 <_GLOBAL__sub_I_check+0x44a>
    5206:	d4 01       	movw	r26, r8
		char dataIn[50] = {0};
    5208:	e2 e3       	ldi	r30, 0x32	; 50
    520a:	1d 92       	st	X+, r1
    520c:	ea 95       	dec	r30
    520e:	e9 f7       	brne	.-6      	; 0x520a <_GLOBAL__sub_I_check+0x454>
		RXinterruptDisable();
    5210:	d5 01       	movw	r26, r10
    5212:	8c 91       	ld	r24, X
    5214:	8f 77       	andi	r24, 0x7F	; 127
		arrCommand[8] = index + '0';
    5216:	8c 93       	st	X, r24
		gsmSMS.UARTstring(arrCommand,0);	
    5218:	3b ae       	std	Y+59, r3	; 0x3b
    521a:	40 e0       	ldi	r20, 0x00	; 0
    521c:	be 01       	movw	r22, r28
    521e:	6d 5c       	subi	r22, 0xCD	; 205
    5220:	7f 4f       	sbci	r23, 0xFF	; 255
    5222:	8d e4       	ldi	r24, 0x4D	; 77
    5224:	94 e0       	ldi	r25, 0x04	; 4
    5226:	64 d4       	rcall	.+2248   	; 0x5af0 <_ZN4Uart10UARTstringEPKcc>
			return false;
		}
		return 0;
	}
	int checkForACkPacket(char getData[], int arrSize){
		int i = 0;
    5228:	74 01       	movw	r14, r8
    522a:	00 e0       	ldi	r16, 0x00	; 0
		char data = 0;
		
		do 
		{
			data = gsmSMS.UARTreceive();
    522c:	10 e0       	ldi	r17, 0x00	; 0
    522e:	8d e4       	ldi	r24, 0x4D	; 77
    5230:	94 e0       	ldi	r25, 0x04	; 4
    5232:	41 d4       	rcall	.+2178   	; 0x5ab6 <_ZN4Uart11UARTreceiveEv>
			getData[i++] = data;
    5234:	0f 5f       	subi	r16, 0xFF	; 255
    5236:	1f 4f       	sbci	r17, 0xFF	; 255
    5238:	f7 01       	movw	r30, r14
    523a:	81 93       	st	Z+, r24
    523c:	7f 01       	movw	r14, r30
		}while(gsmSMS.checkForData() && i < arrSize);
    523e:	8d e4       	ldi	r24, 0x4D	; 77
    5240:	94 e0       	ldi	r25, 0x04	; 4
    5242:	18 d4       	rcall	.+2096   	; 0x5a74 <_ZN4Uart12checkForDataEv>
    5244:	88 23       	and	r24, r24
    5246:	09 f4       	brne	.+2      	; 0x524a <_GLOBAL__sub_I_check+0x494>
    5248:	a6 c0       	rjmp	.+332    	; 0x5396 <_GLOBAL__sub_I_check+0x5e0>
    524a:	01 33       	cpi	r16, 0x31	; 49
    524c:	11 05       	cpc	r17, r1
    524e:	79 f7       	brne	.-34     	; 0x522e <_GLOBAL__sub_I_check+0x478>
    5250:	a2 c0       	rjmp	.+324    	; 0x5396 <_GLOBAL__sub_I_check+0x5e0>
    5252:	81 91       	ld	r24, Z+
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    5254:	82 32       	cpi	r24, 0x22	; 34
    5256:	09 f4       	brne	.+2      	; 0x525a <_GLOBAL__sub_I_check+0x4a4>
    5258:	ac c0       	rjmp	.+344    	; 0x53b2 <_GLOBAL__sub_I_check+0x5fc>
    525a:	ce 16       	cp	r12, r30
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    525c:	df 06       	cpc	r13, r31
    525e:	c9 f7       	brne	.-14     	; 0x5252 <_GLOBAL__sub_I_check+0x49c>
    5260:	28 c0       	rjmp	.+80     	; 0x52b2 <_GLOBAL__sub_I_check+0x4fc>
    5262:	81 91       	ld	r24, Z+
		{
			if (arr[i] == word)
    5264:	82 32       	cpi	r24, 0x22	; 34
    5266:	21 f0       	breq	.+8      	; 0x5270 <_GLOBAL__sub_I_check+0x4ba>
    5268:	ce 16       	cp	r12, r30
		}
		return false;
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
    526a:	df 06       	cpc	r13, r31
    526c:	d1 f7       	brne	.-12     	; 0x5262 <_GLOBAL__sub_I_check+0x4ac>
    526e:	21 c0       	rjmp	.+66     	; 0x52b2 <_GLOBAL__sub_I_check+0x4fc>
    5270:	89 81       	ldd	r24, Y+1	; 0x01
		checkForACkPacket(dataIn, 49);
		RXinterruptEnable();
		if (compWordInArr(dataIn,'"',1,49) && compWordInArr(dataIn+15,'"',1,34))
		{
			int counter = 0;
			while(dataIn[counter] != '0' && counter < 15)
    5272:	80 33       	cpi	r24, 0x30	; 48
    5274:	71 f0       	breq	.+28     	; 0x5292 <_GLOBAL__sub_I_check+0x4dc>
    5276:	fe 01       	movw	r30, r28
    5278:	32 96       	adiw	r30, 0x02	; 2
    527a:	60 e0       	ldi	r22, 0x00	; 0
    527c:	70 e0       	ldi	r23, 0x00	; 0
    527e:	03 c0       	rjmp	.+6      	; 0x5286 <_GLOBAL__sub_I_check+0x4d0>
    5280:	6f 30       	cpi	r22, 0x0F	; 15
    5282:	71 05       	cpc	r23, r1
    5284:	41 f0       	breq	.+16     	; 0x5296 <_GLOBAL__sub_I_check+0x4e0>
    5286:	6f 5f       	subi	r22, 0xFF	; 255
			{
				counter++;
    5288:	7f 4f       	sbci	r23, 0xFF	; 255
    528a:	81 91       	ld	r24, Z+
		checkForACkPacket(dataIn, 49);
		RXinterruptEnable();
		if (compWordInArr(dataIn,'"',1,49) && compWordInArr(dataIn+15,'"',1,34))
		{
			int counter = 0;
			while(dataIn[counter] != '0' && counter < 15)
    528c:	80 33       	cpi	r24, 0x30	; 48
    528e:	c1 f7       	brne	.-16     	; 0x5280 <_GLOBAL__sub_I_check+0x4ca>
    5290:	02 c0       	rjmp	.+4      	; 0x5296 <_GLOBAL__sub_I_check+0x4e0>
    5292:	60 e0       	ldi	r22, 0x00	; 0
    5294:	70 e0       	ldi	r23, 0x00	; 0
    5296:	eb e0       	ldi	r30, 0x0B	; 11
			{
				counter++;
			}
			dataIn[counter+10] = '\0';
    5298:	f0 e0       	ldi	r31, 0x00	; 0
    529a:	ec 0f       	add	r30, r28
    529c:	fd 1f       	adc	r31, r29
    529e:	e6 0f       	add	r30, r22
    52a0:	f7 1f       	adc	r31, r23
    52a2:	10 82       	st	Z, r1
    52a4:	68 0d       	add	r22, r8
			strcpy(phoneNum,dataIn+counter);
    52a6:	79 1d       	adc	r23, r9
    52a8:	ce 01       	movw	r24, r28
    52aa:	8e 5b       	subi	r24, 0xBE	; 190
    52ac:	9f 4f       	sbci	r25, 0xFF	; 255
    52ae:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
    52b2:	23 96       	adiw	r28, 0x03	; 3
	void copyPhoneFromSimToRAM(){
		char phoneNum[15] = {0};
		for(int i = 1; i < 4; i++)
		{
			getPhoneBookNumber(phoneNum,i);
			if (*phoneNum != 0)
    52b4:	8f ad       	ldd	r24, Y+63	; 0x3f
    52b6:	23 97       	sbiw	r28, 0x03	; 3
    52b8:	88 23       	and	r24, r24
    52ba:	31 f0       	breq	.+12     	; 0x52c8 <_GLOBAL__sub_I_check+0x512>
    52bc:	be 01       	movw	r22, r28
			{
				strcpy(_phoneBook[i],phoneNum);
    52be:	6e 5b       	subi	r22, 0xBE	; 190
    52c0:	7f 4f       	sbci	r23, 0xFF	; 255
    52c2:	c3 01       	movw	r24, r6
    52c4:	0e 94 76 31 	call	0x62ec	; 0x62ec <strcpy>
    52c8:	33 94       	inc	r3
    52ca:	fb e0       	ldi	r31, 0x0B	; 11
    52cc:	6f 0e       	add	r6, r31
    52ce:	71 1c       	adc	r7, r1
		}
		return false;
	}
	void copyPhoneFromSimToRAM(){
		char phoneNum[15] = {0};
		for(int i = 1; i < 4; i++)
    52d0:	84 e3       	ldi	r24, 0x34	; 52
    52d2:	38 12       	cpse	r3, r24
    52d4:	8a cf       	rjmp	.-236    	; 0x51ea <_GLOBAL__sub_I_check+0x434>
		}
		return false;
	}	
public:
	mainControl()
	{
    52d6:	88 e5       	ldi	r24, 0x58	; 88
    52d8:	95 e0       	ldi	r25, 0x05	; 5
    52da:	0e 94 43 08 	call	0x1086	; 0x1086 <_ZN17MovedFromLocationC1Ev>
    52de:	8c ec       	ldi	r24, 0xCC	; 204
    52e0:	96 e0       	ldi	r25, 0x06	; 6
    52e2:	fc d2       	rcall	.+1528   	; 0x58dc <_ZN18Nrf24l01_HandShakeC1Ev>
    52e4:	10 92 e4 06 	sts	0x06E4, r1	; 0x8006e4 <top+0x297>
		_carAlarmTimerOverFlow = _alarmOnOff = _doorOpenClose = _emergencyAlarmON = false;
    52e8:	10 92 e5 06 	sts	0x06E5, r1	; 0x8006e5 <top+0x298>
    52ec:	10 92 e3 06 	sts	0x06E3, r1	; 0x8006e3 <top+0x296>
    52f0:	10 92 e9 06 	sts	0x06E9, r1	; 0x8006e9 <top+0x29c>
    52f4:	10 92 ea 06 	sts	0x06EA, r1	; 0x8006ea <top+0x29d>
		_emergencyCarLocationTimerOverFlow = false;
    52f8:	11 e0       	ldi	r17, 0x01	; 1
		_callOneTimeOnEmergencyMode = true;
    52fa:	10 93 e6 06 	sts	0x06E6, r17	; 0x8006e6 <top+0x299>
    52fe:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <top+0x295>
		_10minCounterCarAlarm = _30secCounterEmergencyCarLocation = _indexOfContact = 0;
    5302:	10 92 ec 06 	sts	0x06EC, r1	; 0x8006ec <top+0x29f>
    5306:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <top+0x29e>
	}
	unsigned char *packet(){
		return _sendPacket;
	}
	void resetPacket(){
		_sendPacket[0] = 0xEF;
    530a:	8f ee       	ldi	r24, 0xEF	; 239
    530c:	80 93 dc 06 	sts	0x06DC, r24	; 0x8006dc <top+0x28f>
		_sendPacket[1] = 0xAA;
    5310:	8a ea       	ldi	r24, 0xAA	; 170
    5312:	80 93 dd 06 	sts	0x06DD, r24	; 0x8006dd <top+0x290>
		_sendPacket[2] = _sendPacket[3] = _sendPacket[4] = _sendPacket[5] = 0;
    5316:	10 92 e1 06 	sts	0x06E1, r1	; 0x8006e1 <top+0x294>
    531a:	10 92 e0 06 	sts	0x06E0, r1	; 0x8006e0 <top+0x293>
    531e:	10 92 df 06 	sts	0x06DF, r1	; 0x8006df <top+0x292>
    5322:	10 92 de 06 	sts	0x06DE, r1	; 0x8006de <top+0x291>
		_carAlarmTimerOverFlow = _alarmOnOff = _doorOpenClose = _emergencyAlarmON = false;
		_emergencyCarLocationTimerOverFlow = false;
		_callOneTimeOnEmergencyMode = true;
		_10minCounterCarAlarm = _30secCounterEmergencyCarLocation = _indexOfContact = 0;
		resetPacket();
		Set_RX_Mode();
    5326:	8c ec       	ldi	r24, 0xCC	; 204
    5328:	96 e0       	ldi	r25, 0x06	; 6
    532a:	e2 d1       	rcall	.+964    	; 0x56f0 <_ZN8Nrf24l0111Set_RX_ModeEv>
    532c:	86 ee       	ldi	r24, 0xE6	; 230
	bool _doorOpenClose, _callOneTimeOnEmergencyMode;
	bool _startTimeCounterCarAlarm, _startTimeCounterEmergencyCarLocation;
	bool _carAlarmTimerOverFlow, _emergencyCarLocationTimerOverFlow;
	char  _10minCounterCarAlarm, _30secCounterEmergencyCarLocation;
	void timerSetting(){
			TCNT1 = 63974;   // for 1 sec at 16 MHz
    532e:	99 ef       	ldi	r25, 0xF9	; 249
    5330:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    5334:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    5338:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>

			TCCR1A = 0x00;
    533c:	85 e0       	ldi	r24, 0x05	; 5
			TCCR1B = (1<<CS10) | (1<<CS12);;  // Timer mode with 1024 prescler
    533e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    5342:	10 93 6f 00 	sts	0x006F, r17	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
			TIMSK1 = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
    5346:	66 c0       	rjmp	.+204    	; 0x5414 <_GLOBAL__sub_I_check+0x65e>
		else
		{
			top.startTimeCounter();
		}
    }
}
    5348:	fe 01       	movw	r30, r28
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    534a:	e0 0f       	add	r30, r16
    534c:	f1 1f       	adc	r31, r17
    534e:	11 82       	std	Z+1, r1	; 0x01
    5350:	e1 ec       	ldi	r30, 0xC1	; 193
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    5352:	f0 e0       	ldi	r31, 0x00	; 0
    5354:	80 81       	ld	r24, Z
    5356:	80 68       	ori	r24, 0x80	; 128
    5358:	80 83       	st	Z, r24
    535a:	89 81       	ldd	r24, Y+1	; 0x01
			if (*arr != 0)
    535c:	81 11       	cpse	r24, r1
    535e:	b5 cd       	rjmp	.-1174   	; 0x4eca <_GLOBAL__sub_I_check+0x114>
    5360:	10 ce       	rjmp	.-992    	; 0x4f82 <_GLOBAL__sub_I_check+0x1cc>
    5362:	fe 01       	movw	r30, r28
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    5364:	e0 0f       	add	r30, r16
    5366:	f1 1f       	adc	r31, r17
    5368:	11 82       	std	Z+1, r1	; 0x01
    536a:	e1 ec       	ldi	r30, 0xC1	; 193
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    536c:	f0 e0       	ldi	r31, 0x00	; 0
    536e:	80 81       	ld	r24, Z
    5370:	80 68       	ori	r24, 0x80	; 128
    5372:	80 83       	st	Z, r24
    5374:	89 81       	ldd	r24, Y+1	; 0x01
			if (*arr != 0)
    5376:	81 11       	cpse	r24, r1
    5378:	2f ce       	rjmp	.-930    	; 0x4fd8 <_GLOBAL__sub_I_check+0x222>
    537a:	8a ce       	rjmp	.-748    	; 0x5090 <_GLOBAL__sub_I_check+0x2da>
    537c:	fe 01       	movw	r30, r28
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    537e:	e0 0f       	add	r30, r16
    5380:	f1 1f       	adc	r31, r17
    5382:	11 82       	std	Z+1, r1	; 0x01
    5384:	e1 ec       	ldi	r30, 0xC1	; 193
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    5386:	f0 e0       	ldi	r31, 0x00	; 0
    5388:	80 81       	ld	r24, Z
    538a:	80 68       	ori	r24, 0x80	; 128
    538c:	80 83       	st	Z, r24
    538e:	89 81       	ldd	r24, Y+1	; 0x01
			if (*arr != 0)
    5390:	81 11       	cpse	r24, r1
    5392:	a9 ce       	rjmp	.-686    	; 0x50e6 <_GLOBAL__sub_I_check+0x330>
    5394:	04 cf       	rjmp	.-504    	; 0x519e <_GLOBAL__sub_I_check+0x3e8>
    5396:	f4 01       	movw	r30, r8
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    5398:	e0 0f       	add	r30, r16
    539a:	f1 1f       	adc	r31, r17
    539c:	10 82       	st	Z, r1
    539e:	d5 01       	movw	r26, r10
		char dataIn[50] = {0};
		RXinterruptDisable();
		arrCommand[8] = index + '0';
		gsmSMS.UARTstring(arrCommand,0);	
		checkForACkPacket(dataIn, 49);
		RXinterruptEnable();
    53a0:	8c 91       	ld	r24, X
    53a2:	80 68       	ori	r24, 0x80	; 128
    53a4:	8c 93       	st	X, r24
    53a6:	89 81       	ldd	r24, Y+1	; 0x01
	}
	bool compWordInArr(const char *arr,const char word, char wordSize, char arrMaxSize)
	{
		for(int i = 0; i < arrMaxSize; i++)
		{
			if (arr[i] == word)
    53a8:	82 32       	cpi	r24, 0x22	; 34
    53aa:	19 f0       	breq	.+6      	; 0x53b2 <_GLOBAL__sub_I_check+0x5fc>
    53ac:	fe 01       	movw	r30, r28
    53ae:	32 96       	adiw	r30, 0x02	; 2
    53b0:	50 cf       	rjmp	.-352    	; 0x5252 <_GLOBAL__sub_I_check+0x49c>
    53b2:	88 89       	ldd	r24, Y+16	; 0x10
    53b4:	82 32       	cpi	r24, 0x22	; 34
    53b6:	09 f4       	brne	.+2      	; 0x53ba <_GLOBAL__sub_I_check+0x604>
    53b8:	5b cf       	rjmp	.-330    	; 0x5270 <_GLOBAL__sub_I_check+0x4ba>
    53ba:	fe 01       	movw	r30, r28
    53bc:	71 96       	adiw	r30, 0x11	; 17
    53be:	51 cf       	rjmp	.-350    	; 0x5262 <_GLOBAL__sub_I_check+0x4ac>
    53c0:	02 96       	adiw	r24, 0x02	; 2
    53c2:	36 2f       	mov	r19, r22
		{
			if (arr[i] == *word)
			{
				for (int j = 0; j < wordSize; j++,i++)
				{
					if (!(arr[i] == word[j]))
    53c4:	c8 cd       	rjmp	.-1136   	; 0x4f56 <_GLOBAL__sub_I_check+0x1a0>
    53c6:	02 96       	adiw	r24, 0x02	; 2
    53c8:	36 2f       	mov	r19, r22
    53ca:	4c ce       	rjmp	.-872    	; 0x5064 <_GLOBAL__sub_I_check+0x2ae>
    53cc:	02 96       	adiw	r24, 0x02	; 2
    53ce:	36 2f       	mov	r19, r22
    53d0:	d0 ce       	rjmp	.-608    	; 0x5172 <_GLOBAL__sub_I_check+0x3bc>
    53d2:	1f 86       	std	Y+15, r1	; 0x0f
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    53d4:	e1 ec       	ldi	r30, 0xC1	; 193
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    53d6:	f0 e0       	ldi	r31, 0x00	; 0
    53d8:	80 81       	ld	r24, Z
    53da:	80 68       	ori	r24, 0x80	; 128
    53dc:	80 83       	st	Z, r24
    53de:	89 81       	ldd	r24, Y+1	; 0x01
			if (*arr != 0)
    53e0:	88 23       	and	r24, r24
    53e2:	09 f4       	brne	.+2      	; 0x53e6 <_GLOBAL__sub_I_check+0x630>
    53e4:	ce cd       	rjmp	.-1124   	; 0x4f82 <_GLOBAL__sub_I_check+0x1cc>
    53e6:	7c cd       	rjmp	.-1288   	; 0x4ee0 <_GLOBAL__sub_I_check+0x12a>
    53e8:	1f 86       	std	Y+15, r1	; 0x0f
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    53ea:	e1 ec       	ldi	r30, 0xC1	; 193
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    53ec:	f0 e0       	ldi	r31, 0x00	; 0
    53ee:	80 81       	ld	r24, Z
    53f0:	80 68       	ori	r24, 0x80	; 128
    53f2:	80 83       	st	Z, r24
    53f4:	89 81       	ldd	r24, Y+1	; 0x01
			if (*arr != 0)
    53f6:	88 23       	and	r24, r24
    53f8:	09 f4       	brne	.+2      	; 0x53fc <_GLOBAL__sub_I_check+0x646>
    53fa:	4a ce       	rjmp	.-876    	; 0x5090 <_GLOBAL__sub_I_check+0x2da>
    53fc:	f8 cd       	rjmp	.-1040   	; 0x4fee <_GLOBAL__sub_I_check+0x238>
    53fe:	1f 86       	std	Y+15, r1	; 0x0f
		{
			data = gsmSMS.UARTreceive();
			getData[i++] = data;
		}while(gsmSMS.checkForData() && i < arrSize);
		
		getData[i] = 0;
    5400:	e1 ec       	ldi	r30, 0xC1	; 193
		if (checkAck)
		{
			char arr[15] = {0};
			RXinterruptDisable();
			condition = checkForACkPacket(arr, 14);
			RXinterruptEnable();
    5402:	f0 e0       	ldi	r31, 0x00	; 0
    5404:	80 81       	ld	r24, Z
    5406:	80 68       	ori	r24, 0x80	; 128
    5408:	80 83       	st	Z, r24
    540a:	89 81       	ldd	r24, Y+1	; 0x01
			if (*arr != 0)
    540c:	88 23       	and	r24, r24
    540e:	09 f4       	brne	.+2      	; 0x5412 <_GLOBAL__sub_I_check+0x65c>
    5410:	c6 ce       	rjmp	.-628    	; 0x519e <_GLOBAL__sub_I_check+0x3e8>
    5412:	74 ce       	rjmp	.-792    	; 0x50fc <_GLOBAL__sub_I_check+0x346>
    5414:	c1 5a       	subi	r28, 0xA1	; 161
		else
		{
			top.startTimeCounter();
		}
    }
}
    5416:	df 4f       	sbci	r29, 0xFF	; 255
    5418:	0f b6       	in	r0, 0x3f	; 63
    541a:	f8 94       	cli
    541c:	de bf       	out	0x3e, r29	; 62
    541e:	0f be       	out	0x3f, r0	; 63
    5420:	cd bf       	out	0x3d, r28	; 61
    5422:	df 91       	pop	r29
    5424:	cf 91       	pop	r28
    5426:	1f 91       	pop	r17
    5428:	0f 91       	pop	r16
    542a:	ff 90       	pop	r15
    542c:	ef 90       	pop	r14
    542e:	df 90       	pop	r13
    5430:	cf 90       	pop	r12
    5432:	bf 90       	pop	r11
    5434:	af 90       	pop	r10
    5436:	9f 90       	pop	r9
    5438:	8f 90       	pop	r8
    543a:	7f 90       	pop	r7
    543c:	6f 90       	pop	r6
    543e:	5f 90       	pop	r5
    5440:	4f 90       	pop	r4
    5442:	3f 90       	pop	r3
    5444:	2f 90       	pop	r2
    5446:	08 95       	ret

00005448 <_GLOBAL__sub_D_check>:
    5448:	8c ec       	ldi	r24, 0xCC	; 204


#ifndef NRF24L01_HANDSHAKE_H_
#define NRF24L01_HANDSHAKE_H_

class Nrf24l01_HandShake : public Nrf24l01{
    544a:	96 e0       	ldi	r25, 0x06	; 6
    544c:	31 c1       	rjmp	.+610    	; 0x56b0 <_ZN8Nrf24l01D1Ev>
    544e:	08 95       	ret

00005450 <_ZN8Nrf24l019SPI_SETUPEv>:
	{
		Reset_IRQ();
		Reset_IRQ();
		return false;
	}
}
    5450:	f8 94       	cli
    5452:	8f e2       	ldi	r24, 0x2F	; 47
    5454:	84 b9       	out	0x04, r24	; 4
    5456:	81 e5       	ldi	r24, 0x51	; 81
    5458:	8c bd       	out	0x2c, r24	; 44
    545a:	82 e0       	ldi	r24, 0x02	; 2
    545c:	85 b9       	out	0x05, r24	; 5
    545e:	81 e0       	ldi	r24, 0x01	; 1
    5460:	85 b9       	out	0x05, r24	; 5
    5462:	78 94       	sei
    5464:	08 95       	ret

00005466 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>:
    5466:	6e bd       	out	0x2e, r22	; 46
    5468:	0d b4       	in	r0, 0x2d	; 45
    546a:	07 fe       	sbrs	r0, 7
    546c:	fd cf       	rjmp	.-6      	; 0x5468 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh+0x2>
    546e:	8e b5       	in	r24, 0x2e	; 46
    5470:	08 95       	ret

00005472 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh>:
    5472:	bf 92       	push	r11
    5474:	cf 92       	push	r12
    5476:	df 92       	push	r13
    5478:	ef 92       	push	r14
    547a:	ff 92       	push	r15
    547c:	0f 93       	push	r16
    547e:	1f 93       	push	r17
    5480:	cf 93       	push	r28
    5482:	df 93       	push	r29
    5484:	7c 01       	movw	r14, r24
    5486:	6a 01       	movw	r12, r20
    5488:	12 2f       	mov	r17, r18
    548a:	f8 94       	cli
    548c:	85 e3       	ldi	r24, 0x35	; 53
    548e:	8a 95       	dec	r24
    5490:	f1 f7       	brne	.-4      	; 0x548e <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh+0x1c>
    5492:	00 00       	nop
    5494:	f8 94       	cli
    5496:	15 b8       	out	0x05, r1	; 5
    5498:	60 35       	cpi	r22, 0x50	; 80
    549a:	49 f0       	breq	.+18     	; 0x54ae <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh+0x3c>
    549c:	60 5e       	subi	r22, 0xE0	; 224
    549e:	c7 01       	movw	r24, r14
    54a0:	e2 df       	rcall	.-60     	; 0x5466 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>
    54a2:	b8 2e       	mov	r11, r24
    54a4:	8a e1       	ldi	r24, 0x1A	; 26
    54a6:	8a 95       	dec	r24
    54a8:	f1 f7       	brne	.-4      	; 0x54a6 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh+0x34>
    54aa:	00 c0       	rjmp	.+0      	; 0x54ac <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh+0x3a>
    54ac:	08 c0       	rjmp	.+16     	; 0x54be <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh+0x4c>
    54ae:	60 ea       	ldi	r22, 0xA0	; 160
    54b0:	c7 01       	movw	r24, r14
    54b2:	d9 df       	rcall	.-78     	; 0x5466 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>
    54b4:	b8 2e       	mov	r11, r24
    54b6:	85 e3       	ldi	r24, 0x35	; 53
    54b8:	8a 95       	dec	r24
    54ba:	f1 f7       	brne	.-4      	; 0x54b8 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh+0x46>
    54bc:	00 00       	nop
    54be:	11 23       	and	r17, r17
    54c0:	71 f0       	breq	.+28     	; 0x54de <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh+0x6c>
    54c2:	e6 01       	movw	r28, r12
    54c4:	11 50       	subi	r17, 0x01	; 1
    54c6:	01 2f       	mov	r16, r17
    54c8:	10 e0       	ldi	r17, 0x00	; 0
    54ca:	0f 5f       	subi	r16, 0xFF	; 255
    54cc:	1f 4f       	sbci	r17, 0xFF	; 255
    54ce:	0c 0d       	add	r16, r12
    54d0:	1d 1d       	adc	r17, r13
    54d2:	69 91       	ld	r22, Y+
    54d4:	c7 01       	movw	r24, r14
    54d6:	c7 df       	rcall	.-114    	; 0x5466 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>
    54d8:	c0 17       	cp	r28, r16
    54da:	d1 07       	cpc	r29, r17
    54dc:	d1 f7       	brne	.-12     	; 0x54d2 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh+0x60>
    54de:	82 e0       	ldi	r24, 0x02	; 2
    54e0:	85 b9       	out	0x05, r24	; 5
    54e2:	85 e3       	ldi	r24, 0x35	; 53
    54e4:	8a 95       	dec	r24
    54e6:	f1 f7       	brne	.-4      	; 0x54e4 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh+0x72>
    54e8:	00 00       	nop
    54ea:	78 94       	sei
    54ec:	8b 2d       	mov	r24, r11
    54ee:	df 91       	pop	r29
    54f0:	cf 91       	pop	r28
    54f2:	1f 91       	pop	r17
    54f4:	0f 91       	pop	r16
    54f6:	ff 90       	pop	r15
    54f8:	ef 90       	pop	r14
    54fa:	df 90       	pop	r13
    54fc:	cf 90       	pop	r12
    54fe:	bf 90       	pop	r11
    5500:	08 95       	ret

00005502 <_ZN8Nrf24l0114Main_setup_nRFEv>:
    5502:	ff 92       	push	r15
    5504:	0f 93       	push	r16
    5506:	1f 93       	push	r17
    5508:	cf 93       	push	r28
    550a:	df 93       	push	r29
    550c:	00 d0       	rcall	.+0      	; 0x550e <_ZN8Nrf24l0114Main_setup_nRFEv+0xc>
    550e:	00 d0       	rcall	.+0      	; 0x5510 <_ZN8Nrf24l0114Main_setup_nRFEv+0xe>
    5510:	00 d0       	rcall	.+0      	; 0x5512 <_ZN8Nrf24l0114Main_setup_nRFEv+0x10>
    5512:	cd b7       	in	r28, 0x3d	; 61
    5514:	de b7       	in	r29, 0x3e	; 62
    5516:	8c 01       	movw	r16, r24
    5518:	f8 94       	cli
    551a:	2f ef       	ldi	r18, 0xFF	; 255
    551c:	8b ed       	ldi	r24, 0xDB	; 219
    551e:	95 e0       	ldi	r25, 0x05	; 5
    5520:	21 50       	subi	r18, 0x01	; 1
    5522:	80 40       	sbci	r24, 0x00	; 0
    5524:	90 40       	sbci	r25, 0x00	; 0
    5526:	e1 f7       	brne	.-8      	; 0x5520 <_ZN8Nrf24l0114Main_setup_nRFEv+0x1e>
    5528:	00 c0       	rjmp	.+0      	; 0x552a <_ZN8Nrf24l0114Main_setup_nRFEv+0x28>
    552a:	00 00       	nop
    552c:	ff 24       	eor	r15, r15
    552e:	f3 94       	inc	r15
    5530:	f9 82       	std	Y+1, r15	; 0x01
    5532:	21 e0       	ldi	r18, 0x01	; 1
    5534:	ae 01       	movw	r20, r28
    5536:	4f 5f       	subi	r20, 0xFF	; 255
    5538:	5f 4f       	sbci	r21, 0xFF	; 255
    553a:	61 e0       	ldi	r22, 0x01	; 1
    553c:	c8 01       	movw	r24, r16
    553e:	99 df       	rcall	.-206    	; 0x5472 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh>
    5540:	f9 82       	std	Y+1, r15	; 0x01
    5542:	21 e0       	ldi	r18, 0x01	; 1
    5544:	ae 01       	movw	r20, r28
    5546:	4f 5f       	subi	r20, 0xFF	; 255
    5548:	5f 4f       	sbci	r21, 0xFF	; 255
    554a:	62 e0       	ldi	r22, 0x02	; 2
    554c:	c8 01       	movw	r24, r16
    554e:	91 df       	rcall	.-222    	; 0x5472 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh>
    5550:	0f 2e       	mov	r0, r31
    5552:	f3 e0       	ldi	r31, 0x03	; 3
    5554:	ff 2e       	mov	r15, r31
    5556:	f0 2d       	mov	r31, r0
    5558:	f9 82       	std	Y+1, r15	; 0x01
    555a:	21 e0       	ldi	r18, 0x01	; 1
    555c:	ae 01       	movw	r20, r28
    555e:	4f 5f       	subi	r20, 0xFF	; 255
    5560:	5f 4f       	sbci	r21, 0xFF	; 255
    5562:	63 e0       	ldi	r22, 0x03	; 3
    5564:	c8 01       	movw	r24, r16
    5566:	85 df       	rcall	.-246    	; 0x5472 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh>
    5568:	f9 82       	std	Y+1, r15	; 0x01
    556a:	21 e0       	ldi	r18, 0x01	; 1
    556c:	ae 01       	movw	r20, r28
    556e:	4f 5f       	subi	r20, 0xFF	; 255
    5570:	5f 4f       	sbci	r21, 0xFF	; 255
    5572:	65 e0       	ldi	r22, 0x05	; 5
    5574:	c8 01       	movw	r24, r16
    5576:	7d df       	rcall	.-262    	; 0x5472 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh>
    5578:	8f e2       	ldi	r24, 0x2F	; 47
    557a:	89 83       	std	Y+1, r24	; 0x01
    557c:	21 e0       	ldi	r18, 0x01	; 1
    557e:	ae 01       	movw	r20, r28
    5580:	4f 5f       	subi	r20, 0xFF	; 255
    5582:	5f 4f       	sbci	r21, 0xFF	; 255
    5584:	64 e0       	ldi	r22, 0x04	; 4
    5586:	c8 01       	movw	r24, r16
    5588:	74 df       	rcall	.-280    	; 0x5472 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh>
    558a:	86 e2       	ldi	r24, 0x26	; 38
    558c:	89 83       	std	Y+1, r24	; 0x01
    558e:	21 e0       	ldi	r18, 0x01	; 1
    5590:	ae 01       	movw	r20, r28
    5592:	4f 5f       	subi	r20, 0xFF	; 255
    5594:	5f 4f       	sbci	r21, 0xFF	; 255
    5596:	66 e0       	ldi	r22, 0x06	; 6
    5598:	c8 01       	movw	r24, r16
    559a:	6b df       	rcall	.-298    	; 0x5472 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh>
    559c:	85 e1       	ldi	r24, 0x15	; 21
    559e:	89 83       	std	Y+1, r24	; 0x01
    55a0:	85 e3       	ldi	r24, 0x35	; 53
    55a2:	8a 83       	std	Y+2, r24	; 0x02
    55a4:	87 e1       	ldi	r24, 0x17	; 23
    55a6:	8b 83       	std	Y+3, r24	; 0x03
    55a8:	85 ec       	ldi	r24, 0xC5	; 197
    55aa:	8c 83       	std	Y+4, r24	; 0x04
    55ac:	82 e3       	ldi	r24, 0x32	; 50
    55ae:	8d 83       	std	Y+5, r24	; 0x05
    55b0:	25 e0       	ldi	r18, 0x05	; 5
    55b2:	ae 01       	movw	r20, r28
    55b4:	4f 5f       	subi	r20, 0xFF	; 255
    55b6:	5f 4f       	sbci	r21, 0xFF	; 255
    55b8:	6a e0       	ldi	r22, 0x0A	; 10
    55ba:	c8 01       	movw	r24, r16
    55bc:	5a df       	rcall	.-332    	; 0x5472 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh>
    55be:	25 e0       	ldi	r18, 0x05	; 5
    55c0:	ae 01       	movw	r20, r28
    55c2:	4f 5f       	subi	r20, 0xFF	; 255
    55c4:	5f 4f       	sbci	r21, 0xFF	; 255
    55c6:	60 e1       	ldi	r22, 0x10	; 16
    55c8:	c8 01       	movw	r24, r16
    55ca:	53 df       	rcall	.-346    	; 0x5472 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh>
    55cc:	86 e0       	ldi	r24, 0x06	; 6
    55ce:	89 83       	std	Y+1, r24	; 0x01
    55d0:	21 e0       	ldi	r18, 0x01	; 1
    55d2:	ae 01       	movw	r20, r28
    55d4:	4f 5f       	subi	r20, 0xFF	; 255
    55d6:	5f 4f       	sbci	r21, 0xFF	; 255
    55d8:	61 e1       	ldi	r22, 0x11	; 17
    55da:	c8 01       	movw	r24, r16
    55dc:	4a df       	rcall	.-364    	; 0x5472 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh>
    55de:	78 94       	sei
    55e0:	26 96       	adiw	r28, 0x06	; 6
    55e2:	0f b6       	in	r0, 0x3f	; 63
    55e4:	f8 94       	cli
    55e6:	de bf       	out	0x3e, r29	; 62
    55e8:	0f be       	out	0x3f, r0	; 63
    55ea:	cd bf       	out	0x3d, r28	; 61
    55ec:	df 91       	pop	r29
    55ee:	cf 91       	pop	r28
    55f0:	1f 91       	pop	r17
    55f2:	0f 91       	pop	r16
    55f4:	ff 90       	pop	r15
    55f6:	08 95       	ret

000055f8 <_ZN8Nrf24l0118Read_Data_From_nRFEhPhh>:
    55f8:	bf 92       	push	r11
    55fa:	cf 92       	push	r12
    55fc:	df 92       	push	r13
    55fe:	ef 92       	push	r14
    5600:	ff 92       	push	r15
    5602:	0f 93       	push	r16
    5604:	1f 93       	push	r17
    5606:	cf 93       	push	r28
    5608:	df 93       	push	r29
    560a:	7c 01       	movw	r14, r24
    560c:	6a 01       	movw	r12, r20
    560e:	12 2f       	mov	r17, r18
    5610:	85 e3       	ldi	r24, 0x35	; 53
    5612:	8a 95       	dec	r24
    5614:	f1 f7       	brne	.-4      	; 0x5612 <_ZN8Nrf24l0118Read_Data_From_nRFEhPhh+0x1a>
    5616:	00 00       	nop
    5618:	f8 94       	cli
    561a:	15 b8       	out	0x05, r1	; 5
    561c:	8a e0       	ldi	r24, 0x0A	; 10
    561e:	8a 95       	dec	r24
    5620:	f1 f7       	brne	.-4      	; 0x561e <_ZN8Nrf24l0118Read_Data_From_nRFEhPhh+0x26>
    5622:	00 c0       	rjmp	.+0      	; 0x5624 <_ZN8Nrf24l0118Read_Data_From_nRFEhPhh+0x2c>
    5624:	60 35       	cpi	r22, 0x50	; 80
    5626:	41 f0       	breq	.+16     	; 0x5638 <_ZN8Nrf24l0118Read_Data_From_nRFEhPhh+0x40>
    5628:	c7 01       	movw	r24, r14
    562a:	1d df       	rcall	.-454    	; 0x5466 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>
    562c:	b8 2e       	mov	r11, r24
    562e:	85 e3       	ldi	r24, 0x35	; 53
    5630:	8a 95       	dec	r24
    5632:	f1 f7       	brne	.-4      	; 0x5630 <_ZN8Nrf24l0118Read_Data_From_nRFEhPhh+0x38>
    5634:	00 00       	nop
    5636:	08 c0       	rjmp	.+16     	; 0x5648 <_ZN8Nrf24l0118Read_Data_From_nRFEhPhh+0x50>
    5638:	61 e6       	ldi	r22, 0x61	; 97
    563a:	c7 01       	movw	r24, r14
    563c:	14 df       	rcall	.-472    	; 0x5466 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>
    563e:	b8 2e       	mov	r11, r24
    5640:	85 e3       	ldi	r24, 0x35	; 53
    5642:	8a 95       	dec	r24
    5644:	f1 f7       	brne	.-4      	; 0x5642 <_ZN8Nrf24l0118Read_Data_From_nRFEhPhh+0x4a>
    5646:	00 00       	nop
    5648:	11 23       	and	r17, r17
    564a:	99 f0       	breq	.+38     	; 0x5672 <_ZN8Nrf24l0118Read_Data_From_nRFEhPhh+0x7a>
    564c:	e6 01       	movw	r28, r12
    564e:	11 50       	subi	r17, 0x01	; 1
    5650:	01 2f       	mov	r16, r17
    5652:	10 e0       	ldi	r17, 0x00	; 0
    5654:	0f 5f       	subi	r16, 0xFF	; 255
    5656:	1f 4f       	sbci	r17, 0xFF	; 255
    5658:	0c 0d       	add	r16, r12
    565a:	1d 1d       	adc	r17, r13
    565c:	6f ef       	ldi	r22, 0xFF	; 255
    565e:	c7 01       	movw	r24, r14
    5660:	02 df       	rcall	.-508    	; 0x5466 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>
    5662:	89 93       	st	Y+, r24
    5664:	85 e3       	ldi	r24, 0x35	; 53
    5666:	8a 95       	dec	r24
    5668:	f1 f7       	brne	.-4      	; 0x5666 <_ZN8Nrf24l0118Read_Data_From_nRFEhPhh+0x6e>
    566a:	00 00       	nop
    566c:	c0 17       	cp	r28, r16
    566e:	d1 07       	cpc	r29, r17
    5670:	a9 f7       	brne	.-22     	; 0x565c <_ZN8Nrf24l0118Read_Data_From_nRFEhPhh+0x64>
    5672:	82 e0       	ldi	r24, 0x02	; 2
    5674:	85 b9       	out	0x05, r24	; 5
    5676:	85 e3       	ldi	r24, 0x35	; 53
    5678:	8a 95       	dec	r24
    567a:	f1 f7       	brne	.-4      	; 0x5678 <_ZN8Nrf24l0118Read_Data_From_nRFEhPhh+0x80>
    567c:	00 00       	nop
    567e:	78 94       	sei
    5680:	8b 2d       	mov	r24, r11
    5682:	df 91       	pop	r29
    5684:	cf 91       	pop	r28
    5686:	1f 91       	pop	r17
    5688:	0f 91       	pop	r16
    568a:	ff 90       	pop	r15
    568c:	ef 90       	pop	r14
    568e:	df 90       	pop	r13
    5690:	cf 90       	pop	r12
    5692:	bf 90       	pop	r11
    5694:	08 95       	ret

00005696 <_ZN8Nrf24l01C1Ev>:
    5696:	cf 93       	push	r28
    5698:	df 93       	push	r29
    569a:	ec 01       	movw	r28, r24
    569c:	d9 de       	rcall	.-590    	; 0x5450 <_ZN8Nrf24l019SPI_SETUPEv>
    569e:	ce 01       	movw	r24, r28
    56a0:	30 df       	rcall	.-416    	; 0x5502 <_ZN8Nrf24l0114Main_setup_nRFEv>
    56a2:	1b 82       	std	Y+3, r1	; 0x03
    56a4:	1a 82       	std	Y+2, r1	; 0x02
    56a6:	19 82       	std	Y+1, r1	; 0x01
    56a8:	18 82       	st	Y, r1
    56aa:	df 91       	pop	r29
    56ac:	cf 91       	pop	r28
    56ae:	08 95       	ret

000056b0 <_ZN8Nrf24l01D1Ev>:
    56b0:	08 95       	ret

000056b2 <_ZN8Nrf24l019Reset_IRQEv>:
    56b2:	cf 93       	push	r28
    56b4:	df 93       	push	r29
    56b6:	ec 01       	movw	r28, r24
    56b8:	85 e3       	ldi	r24, 0x35	; 53
    56ba:	8a 95       	dec	r24
    56bc:	f1 f7       	brne	.-4      	; 0x56ba <_ZN8Nrf24l019Reset_IRQEv+0x8>
    56be:	00 00       	nop
    56c0:	15 b8       	out	0x05, r1	; 5
    56c2:	85 e3       	ldi	r24, 0x35	; 53
    56c4:	8a 95       	dec	r24
    56c6:	f1 f7       	brne	.-4      	; 0x56c4 <_ZN8Nrf24l019Reset_IRQEv+0x12>
    56c8:	00 00       	nop
    56ca:	67 e2       	ldi	r22, 0x27	; 39
    56cc:	ce 01       	movw	r24, r28
    56ce:	cb de       	rcall	.-618    	; 0x5466 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>
    56d0:	85 e3       	ldi	r24, 0x35	; 53
    56d2:	8a 95       	dec	r24
    56d4:	f1 f7       	brne	.-4      	; 0x56d2 <_ZN8Nrf24l019Reset_IRQEv+0x20>
    56d6:	00 00       	nop
    56d8:	60 e7       	ldi	r22, 0x70	; 112
    56da:	ce 01       	movw	r24, r28
    56dc:	c4 de       	rcall	.-632    	; 0x5466 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>
    56de:	85 e3       	ldi	r24, 0x35	; 53
    56e0:	8a 95       	dec	r24
    56e2:	f1 f7       	brne	.-4      	; 0x56e0 <_ZN8Nrf24l019Reset_IRQEv+0x2e>
    56e4:	00 00       	nop
    56e6:	82 e0       	ldi	r24, 0x02	; 2
    56e8:	85 b9       	out	0x05, r24	; 5
    56ea:	df 91       	pop	r29
    56ec:	cf 91       	pop	r28
    56ee:	08 95       	ret

000056f0 <_ZN8Nrf24l0111Set_RX_ModeEv>:
    56f0:	cf 93       	push	r28
    56f2:	df 93       	push	r29
    56f4:	00 d0       	rcall	.+0      	; 0x56f6 <_ZN8Nrf24l0111Set_RX_ModeEv+0x6>
    56f6:	cd b7       	in	r28, 0x3d	; 61
    56f8:	de b7       	in	r29, 0x3e	; 62
    56fa:	f8 94       	cli
    56fc:	2f e0       	ldi	r18, 0x0F	; 15
    56fe:	29 83       	std	Y+1, r18	; 0x01
    5700:	21 e0       	ldi	r18, 0x01	; 1
    5702:	ae 01       	movw	r20, r28
    5704:	4f 5f       	subi	r20, 0xFF	; 255
    5706:	5f 4f       	sbci	r21, 0xFF	; 255
    5708:	60 e0       	ldi	r22, 0x00	; 0
    570a:	b3 de       	rcall	.-666    	; 0x5472 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh>
    570c:	15 b8       	out	0x05, r1	; 5
    570e:	8f e3       	ldi	r24, 0x3F	; 63
    5710:	9f e1       	ldi	r25, 0x1F	; 31
    5712:	01 97       	sbiw	r24, 0x01	; 1
    5714:	f1 f7       	brne	.-4      	; 0x5712 <_ZN8Nrf24l0111Set_RX_ModeEv+0x22>
    5716:	00 c0       	rjmp	.+0      	; 0x5718 <_ZN8Nrf24l0111Set_RX_ModeEv+0x28>
    5718:	00 00       	nop
    571a:	78 94       	sei
    571c:	0f 90       	pop	r0
    571e:	0f 90       	pop	r0
    5720:	df 91       	pop	r29
    5722:	cf 91       	pop	r28
    5724:	08 95       	ret

00005726 <_ZN8Nrf24l0112Read_PayloadEPh>:
    5726:	ef 92       	push	r14
    5728:	ff 92       	push	r15
    572a:	0f 93       	push	r16
    572c:	1f 93       	push	r17
    572e:	cf 93       	push	r28
    5730:	df 93       	push	r29
    5732:	8c 01       	movw	r16, r24
    5734:	eb 01       	movw	r28, r22
    5736:	15 b8       	out	0x05, r1	; 5
    5738:	61 e6       	ldi	r22, 0x61	; 97
    573a:	95 de       	rcall	.-726    	; 0x5466 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>
    573c:	85 e3       	ldi	r24, 0x35	; 53
    573e:	8a 95       	dec	r24
    5740:	f1 f7       	brne	.-4      	; 0x573e <_ZN8Nrf24l0112Read_PayloadEPh+0x18>
    5742:	00 00       	nop
    5744:	7e 01       	movw	r14, r28
    5746:	86 e0       	ldi	r24, 0x06	; 6
    5748:	e8 0e       	add	r14, r24
    574a:	f1 1c       	adc	r15, r1
    574c:	6f ef       	ldi	r22, 0xFF	; 255
    574e:	c8 01       	movw	r24, r16
    5750:	8a de       	rcall	.-748    	; 0x5466 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>
    5752:	89 93       	st	Y+, r24
    5754:	85 e3       	ldi	r24, 0x35	; 53
    5756:	8a 95       	dec	r24
    5758:	f1 f7       	brne	.-4      	; 0x5756 <_ZN8Nrf24l0112Read_PayloadEPh+0x30>
    575a:	00 00       	nop
    575c:	ec 16       	cp	r14, r28
    575e:	fd 06       	cpc	r15, r29
    5760:	a9 f7       	brne	.-22     	; 0x574c <_ZN8Nrf24l0112Read_PayloadEPh+0x26>
    5762:	82 e0       	ldi	r24, 0x02	; 2
    5764:	85 b9       	out	0x05, r24	; 5
    5766:	85 e3       	ldi	r24, 0x35	; 53
    5768:	8a 95       	dec	r24
    576a:	f1 f7       	brne	.-4      	; 0x5768 <_ZN8Nrf24l0112Read_PayloadEPh+0x42>
    576c:	00 00       	nop
    576e:	df 91       	pop	r29
    5770:	cf 91       	pop	r28
    5772:	1f 91       	pop	r17
    5774:	0f 91       	pop	r16
    5776:	ff 90       	pop	r15
    5778:	ef 90       	pop	r14
    577a:	08 95       	ret

0000577c <_ZN8Nrf24l0115Receive_PayloadEPh>:
    577c:	cf 92       	push	r12
    577e:	df 92       	push	r13
    5780:	ff 92       	push	r15
    5782:	0f 93       	push	r16
    5784:	1f 93       	push	r17
    5786:	cf 93       	push	r28
    5788:	df 93       	push	r29
    578a:	00 d0       	rcall	.+0      	; 0x578c <_ZN8Nrf24l0115Receive_PayloadEPh+0x10>
    578c:	cd b7       	in	r28, 0x3d	; 61
    578e:	de b7       	in	r29, 0x3e	; 62
    5790:	8c 01       	movw	r16, r24
    5792:	6b 01       	movw	r12, r22
    5794:	f8 94       	cli
    5796:	21 e0       	ldi	r18, 0x01	; 1
    5798:	ae 01       	movw	r20, r28
    579a:	4f 5f       	subi	r20, 0xFF	; 255
    579c:	5f 4f       	sbci	r21, 0xFF	; 255
    579e:	67 e1       	ldi	r22, 0x17	; 23
    57a0:	2b df       	rcall	.-426    	; 0x55f8 <_ZN8Nrf24l0118Read_Data_From_nRFEhPhh>
    57a2:	89 81       	ldd	r24, Y+1	; 0x01
    57a4:	98 2f       	mov	r25, r24
    57a6:	91 70       	andi	r25, 0x01	; 1
    57a8:	f9 2e       	mov	r15, r25
    57aa:	80 fd       	sbrc	r24, 0
    57ac:	05 c0       	rjmp	.+10     	; 0x57b8 <_ZN8Nrf24l0115Receive_PayloadEPh+0x3c>
    57ae:	b6 01       	movw	r22, r12
    57b0:	c8 01       	movw	r24, r16
    57b2:	b9 df       	rcall	.-142    	; 0x5726 <_ZN8Nrf24l0112Read_PayloadEPh>
    57b4:	78 94       	sei
    57b6:	1d c0       	rjmp	.+58     	; 0x57f2 <_ZN8Nrf24l0115Receive_PayloadEPh+0x76>
    57b8:	15 b8       	out	0x05, r1	; 5
    57ba:	8a e0       	ldi	r24, 0x0A	; 10
    57bc:	8a 95       	dec	r24
    57be:	f1 f7       	brne	.-4      	; 0x57bc <_ZN8Nrf24l0115Receive_PayloadEPh+0x40>
    57c0:	00 c0       	rjmp	.+0      	; 0x57c2 <_ZN8Nrf24l0115Receive_PayloadEPh+0x46>
    57c2:	62 ee       	ldi	r22, 0xE2	; 226
    57c4:	c8 01       	movw	r24, r16
    57c6:	4f de       	rcall	.-866    	; 0x5466 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>
    57c8:	82 e0       	ldi	r24, 0x02	; 2
    57ca:	85 b9       	out	0x05, r24	; 5
    57cc:	c8 01       	movw	r24, r16
    57ce:	71 df       	rcall	.-286    	; 0x56b2 <_ZN8Nrf24l019Reset_IRQEv>
    57d0:	81 e0       	ldi	r24, 0x01	; 1
    57d2:	85 b9       	out	0x05, r24	; 5
    57d4:	8f e3       	ldi	r24, 0x3F	; 63
    57d6:	9f e1       	ldi	r25, 0x1F	; 31
    57d8:	01 97       	sbiw	r24, 0x01	; 1
    57da:	f1 f7       	brne	.-4      	; 0x57d8 <_ZN8Nrf24l0115Receive_PayloadEPh+0x5c>
    57dc:	00 c0       	rjmp	.+0      	; 0x57de <_ZN8Nrf24l0115Receive_PayloadEPh+0x62>
    57de:	00 00       	nop
    57e0:	26 e0       	ldi	r18, 0x06	; 6
    57e2:	a6 01       	movw	r20, r12
    57e4:	60 e5       	ldi	r22, 0x50	; 80
    57e6:	c8 01       	movw	r24, r16
    57e8:	07 df       	rcall	.-498    	; 0x55f8 <_ZN8Nrf24l0118Read_Data_From_nRFEhPhh>
    57ea:	15 b8       	out	0x05, r1	; 5
    57ec:	78 94       	sei
    57ee:	ff 24       	eor	r15, r15
    57f0:	f3 94       	inc	r15
    57f2:	8f 2d       	mov	r24, r15
    57f4:	0f 90       	pop	r0
    57f6:	0f 90       	pop	r0
    57f8:	df 91       	pop	r29
    57fa:	cf 91       	pop	r28
    57fc:	1f 91       	pop	r17
    57fe:	0f 91       	pop	r16
    5800:	ff 90       	pop	r15
    5802:	df 90       	pop	r13
    5804:	cf 90       	pop	r12
    5806:	08 95       	ret

00005808 <_ZN8Nrf24l0116PayloadAvailableEv>:
bool Nrf24l01::PayloadAvailable()
{
    5808:	1f 93       	push	r17
    580a:	cf 93       	push	r28
    580c:	df 93       	push	r29
    580e:	ec 01       	movw	r28, r24
	unsigned char STATUS_reg;

	//stop listening
	Send_Signal = (0<<CE);
    5810:	15 b8       	out	0x05, r1	; 5
	
	//get STATUS register value
	STATUS_reg = SPI_Byte_TX_OR_RX(NOP);
    5812:	6f ef       	ldi	r22, 0xFF	; 255
    5814:	28 de       	rcall	.-944    	; 0x5466 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>
    5816:	18 2f       	mov	r17, r24
	
	//set CE to 1 for receiving data
	Send_Signal = (1<<CE);
    5818:	81 e0       	ldi	r24, 0x01	; 1
    581a:	85 b9       	out	0x05, r24	; 5
    581c:	8f e1       	ldi	r24, 0x1F	; 31
    581e:	9e e4       	ldi	r25, 0x4E	; 78
    5820:	01 97       	sbiw	r24, 0x01	; 1
    5822:	f1 f7       	brne	.-4      	; 0x5820 <_ZN8Nrf24l0116PayloadAvailableEv+0x18>
    5824:	00 c0       	rjmp	.+0      	; 0x5826 <_ZN8Nrf24l0116PayloadAvailableEv+0x1e>
    5826:	00 00       	nop
	
	//wait for data
	_delay_ms(5);
	Reset_IRQ();
    5828:	ce 01       	movw	r24, r28
    582a:	43 df       	rcall	.-378    	; 0x56b2 <_ZN8Nrf24l019Reset_IRQEv>
	
	//Check if RX_DR is = '0' he will return RX_DR value
	//that mean the interrupt have been active
	if(STATUS_reg & (1<<RX_DR))
    582c:	16 fd       	sbrc	r17, 6
    582e:	04 c0       	rjmp	.+8      	; 0x5838 <_ZN8Nrf24l0116PayloadAvailableEv+0x30>
	{
		return true;
	}
	//set CE to 1 for receiving data
	Send_Signal = (1<<CE);
    5830:	81 e0       	ldi	r24, 0x01	; 1
    5832:	85 b9       	out	0x05, r24	; 5
	return false;
    5834:	80 e0       	ldi	r24, 0x00	; 0
    5836:	01 c0       	rjmp	.+2      	; 0x583a <_ZN8Nrf24l0116PayloadAvailableEv+0x32>
	
	//Check if RX_DR is = '0' he will return RX_DR value
	//that mean the interrupt have been active
	if(STATUS_reg & (1<<RX_DR))
	{
		return true;
    5838:	81 e0       	ldi	r24, 0x01	; 1
	}
	//set CE to 1 for receiving data
	Send_Signal = (1<<CE);
	return false;
    583a:	df 91       	pop	r29
    583c:	cf 91       	pop	r28
    583e:	1f 91       	pop	r17
    5840:	08 95       	ret

00005842 <_ZN18Nrf24l01_HandShake15setToggleOptionEv>:
		readAckPayload();
		checkifAckPacketIsDummy();
		return true;
	}
	return false;
}
    5842:	cf 93       	push	r28
    5844:	df 93       	push	r29
    5846:	00 d0       	rcall	.+0      	; 0x5848 <_ZN18Nrf24l01_HandShake15setToggleOptionEv+0x6>
    5848:	cd b7       	in	r28, 0x3d	; 61
    584a:	de b7       	in	r29, 0x3e	; 62
    584c:	1a 82       	std	Y+2, r1	; 0x02
    584e:	19 82       	std	Y+1, r1	; 0x01
    5850:	22 e0       	ldi	r18, 0x02	; 2
    5852:	29 83       	std	Y+1, r18	; 0x01
    5854:	21 e0       	ldi	r18, 0x01	; 1
    5856:	ae 01       	movw	r20, r28
    5858:	4f 5f       	subi	r20, 0xFF	; 255
    585a:	5f 4f       	sbci	r21, 0xFF	; 255
    585c:	6d e1       	ldi	r22, 0x1D	; 29
    585e:	09 de       	rcall	.-1006   	; 0x5472 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh>
    5860:	0f 90       	pop	r0
    5862:	0f 90       	pop	r0
    5864:	df 91       	pop	r29
    5866:	cf 91       	pop	r28
    5868:	08 95       	ret

0000586a <_ZN18Nrf24l01_HandShake6setAckEPhh>:
    586a:	cf 92       	push	r12
    586c:	df 92       	push	r13
    586e:	ef 92       	push	r14
    5870:	ff 92       	push	r15
    5872:	0f 93       	push	r16
    5874:	1f 93       	push	r17
    5876:	cf 93       	push	r28
    5878:	df 93       	push	r29
    587a:	7b 01       	movw	r14, r22
    587c:	14 2f       	mov	r17, r20
    587e:	f8 94       	cli
    5880:	25 e3       	ldi	r18, 0x35	; 53
    5882:	2a 95       	dec	r18
    5884:	f1 f7       	brne	.-4      	; 0x5882 <_ZN18Nrf24l01_HandShake6setAckEPhh+0x18>
    5886:	00 00       	nop
    5888:	15 b8       	out	0x05, r1	; 5
    588a:	d8 2e       	mov	r13, r24
    588c:	c9 2e       	mov	r12, r25
    588e:	68 ea       	ldi	r22, 0xA8	; 168
    5890:	ea dd       	rcall	.-1068   	; 0x5466 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>
    5892:	85 e3       	ldi	r24, 0x35	; 53
    5894:	8a 95       	dec	r24
    5896:	f1 f7       	brne	.-4      	; 0x5894 <_ZN18Nrf24l01_HandShake6setAckEPhh+0x2a>
    5898:	00 00       	nop
    589a:	11 23       	and	r17, r17
    589c:	79 f0       	breq	.+30     	; 0x58bc <_ZN18Nrf24l01_HandShake6setAckEPhh+0x52>
    589e:	e7 01       	movw	r28, r14
    58a0:	11 50       	subi	r17, 0x01	; 1
    58a2:	01 2f       	mov	r16, r17
    58a4:	10 e0       	ldi	r17, 0x00	; 0
    58a6:	0f 5f       	subi	r16, 0xFF	; 255
    58a8:	1f 4f       	sbci	r17, 0xFF	; 255
    58aa:	0e 0d       	add	r16, r14
    58ac:	1f 1d       	adc	r17, r15
    58ae:	69 91       	ld	r22, Y+
    58b0:	8d 2d       	mov	r24, r13
    58b2:	9c 2d       	mov	r25, r12
    58b4:	d8 dd       	rcall	.-1104   	; 0x5466 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>
    58b6:	c0 17       	cp	r28, r16
    58b8:	d1 07       	cpc	r29, r17
    58ba:	c9 f7       	brne	.-14     	; 0x58ae <_ZN18Nrf24l01_HandShake6setAckEPhh+0x44>
    58bc:	82 e0       	ldi	r24, 0x02	; 2
    58be:	85 b9       	out	0x05, r24	; 5
    58c0:	25 e3       	ldi	r18, 0x35	; 53
    58c2:	2a 95       	dec	r18
    58c4:	f1 f7       	brne	.-4      	; 0x58c2 <_ZN18Nrf24l01_HandShake6setAckEPhh+0x58>
    58c6:	00 00       	nop
    58c8:	78 94       	sei
    58ca:	df 91       	pop	r29
    58cc:	cf 91       	pop	r28
    58ce:	1f 91       	pop	r17
    58d0:	0f 91       	pop	r16
    58d2:	ff 90       	pop	r15
    58d4:	ef 90       	pop	r14
    58d6:	df 90       	pop	r13
    58d8:	cf 90       	pop	r12
    58da:	08 95       	ret

000058dc <_ZN18Nrf24l01_HandShakeC1Ev>:
    58dc:	cf 93       	push	r28
    58de:	df 93       	push	r29
    58e0:	ec 01       	movw	r28, r24
    58e2:	d9 de       	rcall	.-590    	; 0x5696 <_ZN8Nrf24l01C1Ev>
    58e4:	ce 01       	movw	r24, r28
    58e6:	ad df       	rcall	.-166    	; 0x5842 <_ZN18Nrf24l01_HandShake15setToggleOptionEv>
    58e8:	1b 82       	std	Y+3, r1	; 0x03
    58ea:	1a 82       	std	Y+2, r1	; 0x02
    58ec:	19 82       	std	Y+1, r1	; 0x01
    58ee:	18 82       	st	Y, r1
    58f0:	df 91       	pop	r29
    58f2:	cf 91       	pop	r28
    58f4:	08 95       	ret

000058f6 <_ZN18Nrf24l01_HandShake15Receive_PayloadEPh>:
unsigned char *Nrf24l01_HandShake::Receive_Payload(unsigned char *dataToBeSendFromRX)
{
    58f6:	0f 93       	push	r16
    58f8:	1f 93       	push	r17
    58fa:	cf 93       	push	r28
    58fc:	df 93       	push	r29
    58fe:	ec 01       	movw	r28, r24
	setAck(dataToBeSendFromRX);
    5900:	46 e0       	ldi	r20, 0x06	; 6
    5902:	b3 df       	rcall	.-154    	; 0x586a <_ZN18Nrf24l01_HandShake6setAckEPhh>
	Nrf24l01::Receive_Payload(_Packet);
    5904:	8e 01       	movw	r16, r28
    5906:	06 5f       	subi	r16, 0xF6	; 246
    5908:	1f 4f       	sbci	r17, 0xFF	; 255
    590a:	b8 01       	movw	r22, r16
    590c:	ce 01       	movw	r24, r28
    590e:	36 df       	rcall	.-404    	; 0x577c <_ZN8Nrf24l0115Receive_PayloadEPh>
	return _Packet;
}
    5910:	c8 01       	movw	r24, r16
    5912:	df 91       	pop	r29
    5914:	cf 91       	pop	r28
    5916:	1f 91       	pop	r17
    5918:	0f 91       	pop	r16
    591a:	08 95       	ret

0000591c <_ZN8SoftUart19SoftUartReceiveDataEv>:
}
*/
char SoftUart::SoftUartReceiveData(void)
{
	char data = 0;
	while(bit_is_set(PINC,0));
    591c:	30 99       	sbic	0x06, 0	; 6
    591e:	fe cf       	rjmp	.-4      	; 0x591c <_ZN8SoftUart19SoftUartReceiveDataEv>
	if (!bit_is_set(PINC,0))
    5920:	30 99       	sbic	0x06, 0	; 6
    5922:	37 c0       	rjmp	.+110    	; 0x5992 <_ZN8SoftUart19SoftUartReceiveDataEv+0x76>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5924:	81 ea       	ldi	r24, 0xA1	; 161
    5926:	91 e0       	ldi	r25, 0x01	; 1
    5928:	01 97       	sbiw	r24, 0x01	; 1
    592a:	f1 f7       	brne	.-4      	; 0x5928 <_ZN8SoftUart19SoftUartReceiveDataEv+0xc>
    592c:	00 c0       	rjmp	.+0      	; 0x592e <_ZN8SoftUart19SoftUartReceiveDataEv+0x12>
    592e:	00 00       	nop
    5930:	20 e0       	ldi	r18, 0x00	; 0
    5932:	30 e0       	ldi	r19, 0x00	; 0
	
}
*/
char SoftUart::SoftUartReceiveData(void)
{
	char data = 0;
    5934:	80 e0       	ldi	r24, 0x00	; 0
	{
		_delay_us(104.5);
		for(char i = 0; i < 8; i++)
		{
			_delay_us(51);
			data |= bit_is_set(PINC,0) ? (1 << i) : (0 << i);
    5936:	e0 e0       	ldi	r30, 0x00	; 0
    5938:	90 e0       	ldi	r25, 0x00	; 0
    593a:	61 e0       	ldi	r22, 0x01	; 1
    593c:	70 e0       	ldi	r23, 0x00	; 0
    593e:	ab ec       	ldi	r26, 0xCB	; 203
    5940:	b0 e0       	ldi	r27, 0x00	; 0
    5942:	11 97       	sbiw	r26, 0x01	; 1
    5944:	f1 f7       	brne	.-4      	; 0x5942 <_ZN8SoftUart19SoftUartReceiveDataEv+0x26>
    5946:	00 c0       	rjmp	.+0      	; 0x5948 <_ZN8SoftUart19SoftUartReceiveDataEv+0x2c>
    5948:	00 00       	nop
    594a:	30 9b       	sbis	0x06, 0	; 6
    594c:	08 c0       	rjmp	.+16     	; 0x595e <_ZN8SoftUart19SoftUartReceiveDataEv+0x42>
    594e:	ab 01       	movw	r20, r22
    5950:	02 2e       	mov	r0, r18
    5952:	02 c0       	rjmp	.+4      	; 0x5958 <_ZN8SoftUart19SoftUartReceiveDataEv+0x3c>
    5954:	44 0f       	add	r20, r20
    5956:	55 1f       	adc	r21, r21
    5958:	0a 94       	dec	r0
    595a:	e2 f7       	brpl	.-8      	; 0x5954 <_ZN8SoftUart19SoftUartReceiveDataEv+0x38>
    595c:	01 c0       	rjmp	.+2      	; 0x5960 <_ZN8SoftUart19SoftUartReceiveDataEv+0x44>
    595e:	4e 2f       	mov	r20, r30
    5960:	84 2b       	or	r24, r20
    5962:	ab ec       	ldi	r26, 0xCB	; 203
    5964:	b0 e0       	ldi	r27, 0x00	; 0
    5966:	11 97       	sbiw	r26, 0x01	; 1
    5968:	f1 f7       	brne	.-4      	; 0x5966 <_ZN8SoftUart19SoftUartReceiveDataEv+0x4a>
    596a:	00 c0       	rjmp	.+0      	; 0x596c <_ZN8SoftUart19SoftUartReceiveDataEv+0x50>
    596c:	00 00       	nop
    596e:	2f 5f       	subi	r18, 0xFF	; 255
    5970:	3f 4f       	sbci	r19, 0xFF	; 255
	char data = 0;
	while(bit_is_set(PINC,0));
	if (!bit_is_set(PINC,0))
	{
		_delay_us(104.5);
		for(char i = 0; i < 8; i++)
    5972:	28 30       	cpi	r18, 0x08	; 8
    5974:	31 05       	cpc	r19, r1
    5976:	19 f7       	brne	.-58     	; 0x593e <_ZN8SoftUart19SoftUartReceiveDataEv+0x22>
    5978:	b5 e3       	ldi	r27, 0x35	; 53
    597a:	ba 95       	dec	r27
    597c:	f1 f7       	brne	.-4      	; 0x597a <_ZN8SoftUart19SoftUartReceiveDataEv+0x5e>
    597e:	00 00       	nop
			_delay_us(51);
			data |= bit_is_set(PINC,0) ? (1 << i) : (0 << i);
			_delay_us(51);
		}
		_delay_us(10);
		if (bit_is_set(PINC,0))
    5980:	30 9b       	sbis	0x06, 0	; 6
    5982:	09 c0       	rjmp	.+18     	; 0x5996 <_ZN8SoftUart19SoftUartReceiveDataEv+0x7a>
    5984:	e7 e7       	ldi	r30, 0x77	; 119
    5986:	f1 e0       	ldi	r31, 0x01	; 1
    5988:	31 97       	sbiw	r30, 0x01	; 1
    598a:	f1 f7       	brne	.-4      	; 0x5988 <_ZN8SoftUart19SoftUartReceiveDataEv+0x6c>
    598c:	00 c0       	rjmp	.+0      	; 0x598e <_ZN8SoftUart19SoftUartReceiveDataEv+0x72>
    598e:	00 00       	nop
		{
			_delay_us(94);
			return data;
    5990:	08 95       	ret
		}
	}
	return 0;
    5992:	80 e0       	ldi	r24, 0x00	; 0
    5994:	08 95       	ret
    5996:	80 e0       	ldi	r24, 0x00	; 0
}
    5998:	08 95       	ret

0000599a <_ZN4Uart11setBaudRateE8BaudRate>:
		_str[i] = UARTreceive();
		i++;
	}
	_str[i] = 0;
	return *_str;
}
    599a:	cb 01       	movw	r24, r22
    599c:	a0 e0       	ldi	r26, 0x00	; 0
    599e:	b0 e0       	ldi	r27, 0x00	; 0
    59a0:	88 0f       	add	r24, r24
    59a2:	99 1f       	adc	r25, r25
    59a4:	aa 1f       	adc	r26, r26
    59a6:	bb 1f       	adc	r27, r27
    59a8:	88 0f       	add	r24, r24
    59aa:	99 1f       	adc	r25, r25
    59ac:	aa 1f       	adc	r26, r26
    59ae:	bb 1f       	adc	r27, r27
    59b0:	9c 01       	movw	r18, r24
    59b2:	ad 01       	movw	r20, r26
    59b4:	22 0f       	add	r18, r18
    59b6:	33 1f       	adc	r19, r19
    59b8:	44 1f       	adc	r20, r20
    59ba:	55 1f       	adc	r21, r21
    59bc:	22 0f       	add	r18, r18
    59be:	33 1f       	adc	r19, r19
    59c0:	44 1f       	adc	r20, r20
    59c2:	55 1f       	adc	r21, r21
    59c4:	60 e0       	ldi	r22, 0x00	; 0
    59c6:	74 e2       	ldi	r23, 0x24	; 36
    59c8:	84 ef       	ldi	r24, 0xF4	; 244
    59ca:	90 e0       	ldi	r25, 0x00	; 0
    59cc:	44 d4       	rcall	.+2184   	; 0x6256 <__udivmodsi4>
    59ce:	21 50       	subi	r18, 0x01	; 1
    59d0:	31 09       	sbc	r19, r1
    59d2:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    59d6:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    59da:	88 e1       	ldi	r24, 0x18	; 24
    59dc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    59e0:	86 e0       	ldi	r24, 0x06	; 6
    59e2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    59e6:	08 95       	ret

000059e8 <_ZN4UartC1E8BaudRate>:
    59e8:	fc 01       	movw	r30, r24
    59ea:	ab 01       	movw	r20, r22
    59ec:	9b 01       	movw	r18, r22
    59ee:	22 0f       	add	r18, r18
    59f0:	23 2f       	mov	r18, r19
    59f2:	22 1f       	adc	r18, r18
    59f4:	33 0b       	sbc	r19, r19
    59f6:	31 95       	neg	r19
    59f8:	ab e6       	ldi	r26, 0x6B	; 107
    59fa:	b3 e0       	ldi	r27, 0x03	; 3
    59fc:	54 d4       	rcall	.+2216   	; 0x62a6 <__umulhisi3>
    59fe:	82 ab       	std	Z+50, r24	; 0x32
    5a00:	13 aa       	std	Z+51, r1	; 0x33
    5a02:	ba 01       	movw	r22, r20
    5a04:	cf 01       	movw	r24, r30
    5a06:	c9 cf       	rjmp	.-110    	; 0x599a <_ZN4Uart11setBaudRateE8BaudRate>
    5a08:	08 95       	ret

00005a0a <_ZN4Uart8maxDelayEv>:
    5a0a:	fc 01       	movw	r30, r24
    5a0c:	83 a9       	ldd	r24, Z+51	; 0x33
    5a0e:	8b 30       	cpi	r24, 0x0B	; 11
    5a10:	78 f5       	brcc	.+94     	; 0x5a70 <_ZN4Uart8maxDelayEv+0x66>
    5a12:	82 a9       	ldd	r24, Z+50	; 0x32
    5a14:	82 30       	cpi	r24, 0x02	; 2
    5a16:	99 f0       	breq	.+38     	; 0x5a3e <_ZN4Uart8maxDelayEv+0x34>
    5a18:	18 f4       	brcc	.+6      	; 0x5a20 <_ZN4Uart8maxDelayEv+0x16>
    5a1a:	81 30       	cpi	r24, 0x01	; 1
    5a1c:	31 f0       	breq	.+12     	; 0x5a2a <_ZN4Uart8maxDelayEv+0x20>
    5a1e:	23 c0       	rjmp	.+70     	; 0x5a66 <_ZN4Uart8maxDelayEv+0x5c>
    5a20:	83 30       	cpi	r24, 0x03	; 3
    5a22:	a1 f0       	breq	.+40     	; 0x5a4c <_ZN4Uart8maxDelayEv+0x42>
    5a24:	84 30       	cpi	r24, 0x04	; 4
    5a26:	c9 f0       	breq	.+50     	; 0x5a5a <_ZN4Uart8maxDelayEv+0x50>
    5a28:	1e c0       	rjmp	.+60     	; 0x5a66 <_ZN4Uart8maxDelayEv+0x5c>
    5a2a:	2f ef       	ldi	r18, 0xFF	; 255
    5a2c:	86 e7       	ldi	r24, 0x76	; 118
    5a2e:	91 e0       	ldi	r25, 0x01	; 1
    5a30:	21 50       	subi	r18, 0x01	; 1
    5a32:	80 40       	sbci	r24, 0x00	; 0
    5a34:	90 40       	sbci	r25, 0x00	; 0
    5a36:	e1 f7       	brne	.-8      	; 0x5a30 <_ZN4Uart8maxDelayEv+0x26>
    5a38:	00 c0       	rjmp	.+0      	; 0x5a3a <_ZN4Uart8maxDelayEv+0x30>
    5a3a:	00 00       	nop
    5a3c:	14 c0       	rjmp	.+40     	; 0x5a66 <_ZN4Uart8maxDelayEv+0x5c>
    5a3e:	8f e5       	ldi	r24, 0x5F	; 95
    5a40:	9a ee       	ldi	r25, 0xEA	; 234
    5a42:	01 97       	sbiw	r24, 0x01	; 1
    5a44:	f1 f7       	brne	.-4      	; 0x5a42 <_ZN4Uart8maxDelayEv+0x38>
    5a46:	00 c0       	rjmp	.+0      	; 0x5a48 <_ZN4Uart8maxDelayEv+0x3e>
    5a48:	00 00       	nop
    5a4a:	0d c0       	rjmp	.+26     	; 0x5a66 <_ZN4Uart8maxDelayEv+0x5c>
    5a4c:	8f e3       	ldi	r24, 0x3F	; 63
    5a4e:	9c e9       	ldi	r25, 0x9C	; 156
    5a50:	01 97       	sbiw	r24, 0x01	; 1
    5a52:	f1 f7       	brne	.-4      	; 0x5a50 <_ZN4Uart8maxDelayEv+0x46>
    5a54:	00 c0       	rjmp	.+0      	; 0x5a56 <_ZN4Uart8maxDelayEv+0x4c>
    5a56:	00 00       	nop
    5a58:	06 c0       	rjmp	.+12     	; 0x5a66 <_ZN4Uart8maxDelayEv+0x5c>
    5a5a:	8f e5       	ldi	r24, 0x5F	; 95
    5a5c:	9d e6       	ldi	r25, 0x6D	; 109
    5a5e:	01 97       	sbiw	r24, 0x01	; 1
    5a60:	f1 f7       	brne	.-4      	; 0x5a5e <_ZN4Uart8maxDelayEv+0x54>
    5a62:	00 c0       	rjmp	.+0      	; 0x5a64 <_ZN4Uart8maxDelayEv+0x5a>
    5a64:	00 00       	nop
    5a66:	83 a9       	ldd	r24, Z+51	; 0x33
    5a68:	8f 5f       	subi	r24, 0xFF	; 255
    5a6a:	83 ab       	std	Z+51, r24	; 0x33
    5a6c:	80 e0       	ldi	r24, 0x00	; 0
    5a6e:	08 95       	ret
    5a70:	81 e0       	ldi	r24, 0x01	; 1
    5a72:	08 95       	ret

00005a74 <_ZN4Uart12checkForDataEv>:
    5a74:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5a78:	88 23       	and	r24, r24
    5a7a:	94 f4       	brge	.+36     	; 0x5aa0 <_ZN4Uart12checkForDataEv+0x2c>
    5a7c:	0d c0       	rjmp	.+26     	; 0x5a98 <_ZN4Uart12checkForDataEv+0x24>
    5a7e:	20 81       	ld	r18, Z
    5a80:	22 23       	and	r18, r18
    5a82:	64 f0       	brlt	.+24     	; 0x5a9c <_ZN4Uart12checkForDataEv+0x28>
    5a84:	a7 e5       	ldi	r26, 0x57	; 87
    5a86:	b2 e0       	ldi	r27, 0x02	; 2
    5a88:	11 97       	sbiw	r26, 0x01	; 1
    5a8a:	f1 f7       	brne	.-4      	; 0x5a88 <_ZN4Uart12checkForDataEv+0x14>
    5a8c:	00 c0       	rjmp	.+0      	; 0x5a8e <_ZN4Uart12checkForDataEv+0x1a>
    5a8e:	00 00       	nop
    5a90:	01 97       	sbiw	r24, 0x01	; 1
    5a92:	a9 f7       	brne	.-22     	; 0x5a7e <_ZN4Uart12checkForDataEv+0xa>
    5a94:	80 e0       	ldi	r24, 0x00	; 0
    5a96:	08 95       	ret
    5a98:	81 e0       	ldi	r24, 0x01	; 1
    5a9a:	08 95       	ret
    5a9c:	81 e0       	ldi	r24, 0x01	; 1
    5a9e:	08 95       	ret
    5aa0:	87 e5       	ldi	r24, 0x57	; 87
    5aa2:	92 e0       	ldi	r25, 0x02	; 2
    5aa4:	01 97       	sbiw	r24, 0x01	; 1
    5aa6:	f1 f7       	brne	.-4      	; 0x5aa4 <_ZN4Uart12checkForDataEv+0x30>
    5aa8:	00 c0       	rjmp	.+0      	; 0x5aaa <_ZN4Uart12checkForDataEv+0x36>
    5aaa:	00 00       	nop
    5aac:	87 ec       	ldi	r24, 0xC7	; 199
    5aae:	90 e0       	ldi	r25, 0x00	; 0
    5ab0:	e0 ec       	ldi	r30, 0xC0	; 192
    5ab2:	f0 e0       	ldi	r31, 0x00	; 0
    5ab4:	e4 cf       	rjmp	.-56     	; 0x5a7e <_ZN4Uart12checkForDataEv+0xa>

00005ab6 <_ZN4Uart11UARTreceiveEv>:
    5ab6:	0f 93       	push	r16
    5ab8:	1f 93       	push	r17
    5aba:	cf 93       	push	r28
    5abc:	df 93       	push	r29
    5abe:	8c 01       	movw	r16, r24
    5ac0:	c0 ec       	ldi	r28, 0xC0	; 192
    5ac2:	d0 e0       	ldi	r29, 0x00	; 0
    5ac4:	88 81       	ld	r24, Y
    5ac6:	88 23       	and	r24, r24
    5ac8:	24 f0       	brlt	.+8      	; 0x5ad2 <_ZN4Uart11UARTreceiveEv+0x1c>
    5aca:	c8 01       	movw	r24, r16
    5acc:	9e df       	rcall	.-196    	; 0x5a0a <_ZN4Uart8maxDelayEv>
    5ace:	81 11       	cpse	r24, r1
    5ad0:	f9 cf       	rjmp	.-14     	; 0x5ac4 <_ZN4Uart11UARTreceiveEv+0xe>
    5ad2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    5ad6:	df 91       	pop	r29
    5ad8:	cf 91       	pop	r28
    5ada:	1f 91       	pop	r17
    5adc:	0f 91       	pop	r16
    5ade:	08 95       	ret

00005ae0 <_ZN4Uart8UARTsendEh>:
void Uart::UARTsend( unsigned char data)
{
	while(!(UCSR0A & (1<<UDRE0)));
    5ae0:	e0 ec       	ldi	r30, 0xC0	; 192
    5ae2:	f0 e0       	ldi	r31, 0x00	; 0
    5ae4:	80 81       	ld	r24, Z
    5ae6:	85 ff       	sbrs	r24, 5
    5ae8:	fd cf       	rjmp	.-6      	; 0x5ae4 <_ZN4Uart8UARTsendEh+0x4>
	UDR0 = data;
    5aea:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    5aee:	08 95       	ret

00005af0 <_ZN4Uart10UARTstringEPKcc>:
}
void Uart::UARTstring(const char *StringPtr ,char space)
{
    5af0:	ff 92       	push	r15
    5af2:	0f 93       	push	r16
    5af4:	1f 93       	push	r17
    5af6:	cf 93       	push	r28
    5af8:	df 93       	push	r29
    5afa:	8c 01       	movw	r16, r24
    5afc:	eb 01       	movw	r28, r22
    5afe:	f4 2e       	mov	r15, r20
	if (space)
    5b00:	44 23       	and	r20, r20
    5b02:	89 f0       	breq	.+34     	; 0x5b26 <_ZN4Uart10UARTstringEPKcc+0x36>
	{
		UARTsend((const char)*" ");
    5b04:	60 e2       	ldi	r22, 0x20	; 32
    5b06:	ec df       	rcall	.-40     	; 0x5ae0 <_ZN4Uart8UARTsendEh>
	}
	while(*StringPtr != '\0')
    5b08:	68 81       	ld	r22, Y
    5b0a:	66 23       	and	r22, r22
    5b0c:	41 f0       	breq	.+16     	; 0x5b1e <_ZN4Uart10UARTstringEPKcc+0x2e>
    5b0e:	21 96       	adiw	r28, 0x01	; 1
	{
		UARTsend(*StringPtr);
    5b10:	c8 01       	movw	r24, r16
    5b12:	e6 df       	rcall	.-52     	; 0x5ae0 <_ZN4Uart8UARTsendEh>
{
	if (space)
	{
		UARTsend((const char)*" ");
	}
	while(*StringPtr != '\0')
    5b14:	69 91       	ld	r22, Y+
    5b16:	61 11       	cpse	r22, r1
    5b18:	fb cf       	rjmp	.-10     	; 0x5b10 <_ZN4Uart10UARTstringEPKcc+0x20>
	{
		UARTsend(*StringPtr);
		StringPtr++;
	}
	if (space)
    5b1a:	ff 20       	and	r15, r15
    5b1c:	39 f0       	breq	.+14     	; 0x5b2c <_ZN4Uart10UARTstringEPKcc+0x3c>
	{
		UARTsend((const char)*" ");
    5b1e:	60 e2       	ldi	r22, 0x20	; 32
    5b20:	c8 01       	movw	r24, r16
    5b22:	de df       	rcall	.-68     	; 0x5ae0 <_ZN4Uart8UARTsendEh>
	}
}
    5b24:	03 c0       	rjmp	.+6      	; 0x5b2c <_ZN4Uart10UARTstringEPKcc+0x3c>
{
	if (space)
	{
		UARTsend((const char)*" ");
	}
	while(*StringPtr != '\0')
    5b26:	68 81       	ld	r22, Y
    5b28:	61 11       	cpse	r22, r1
    5b2a:	f1 cf       	rjmp	.-30     	; 0x5b0e <_ZN4Uart10UARTstringEPKcc+0x1e>
	}
	if (space)
	{
		UARTsend((const char)*" ");
	}
}
    5b2c:	df 91       	pop	r29
    5b2e:	cf 91       	pop	r28
    5b30:	1f 91       	pop	r17
    5b32:	0f 91       	pop	r16
    5b34:	ff 90       	pop	r15
    5b36:	08 95       	ret

00005b38 <__subsf3>:
    5b38:	50 58       	subi	r21, 0x80	; 128

00005b3a <__addsf3>:
    5b3a:	bb 27       	eor	r27, r27
    5b3c:	aa 27       	eor	r26, r26
    5b3e:	0e d0       	rcall	.+28     	; 0x5b5c <__addsf3x>
    5b40:	4d c1       	rjmp	.+666    	; 0x5ddc <__fp_round>
    5b42:	3e d1       	rcall	.+636    	; 0x5dc0 <__fp_pscA>
    5b44:	30 f0       	brcs	.+12     	; 0x5b52 <__addsf3+0x18>
    5b46:	43 d1       	rcall	.+646    	; 0x5dce <__fp_pscB>
    5b48:	20 f0       	brcs	.+8      	; 0x5b52 <__addsf3+0x18>
    5b4a:	31 f4       	brne	.+12     	; 0x5b58 <__addsf3+0x1e>
    5b4c:	9f 3f       	cpi	r25, 0xFF	; 255
    5b4e:	11 f4       	brne	.+4      	; 0x5b54 <__addsf3+0x1a>
    5b50:	1e f4       	brtc	.+6      	; 0x5b58 <__addsf3+0x1e>
    5b52:	33 c1       	rjmp	.+614    	; 0x5dba <__fp_nan>
    5b54:	0e f4       	brtc	.+2      	; 0x5b58 <__addsf3+0x1e>
    5b56:	e0 95       	com	r30
    5b58:	e7 fb       	bst	r30, 7
    5b5a:	29 c1       	rjmp	.+594    	; 0x5dae <__fp_inf>

00005b5c <__addsf3x>:
    5b5c:	e9 2f       	mov	r30, r25
    5b5e:	4f d1       	rcall	.+670    	; 0x5dfe <__fp_split3>
    5b60:	80 f3       	brcs	.-32     	; 0x5b42 <__addsf3+0x8>
    5b62:	ba 17       	cp	r27, r26
    5b64:	62 07       	cpc	r22, r18
    5b66:	73 07       	cpc	r23, r19
    5b68:	84 07       	cpc	r24, r20
    5b6a:	95 07       	cpc	r25, r21
    5b6c:	18 f0       	brcs	.+6      	; 0x5b74 <__addsf3x+0x18>
    5b6e:	71 f4       	brne	.+28     	; 0x5b8c <__addsf3x+0x30>
    5b70:	9e f5       	brtc	.+102    	; 0x5bd8 <__addsf3x+0x7c>
    5b72:	67 c1       	rjmp	.+718    	; 0x5e42 <__fp_zero>
    5b74:	0e f4       	brtc	.+2      	; 0x5b78 <__addsf3x+0x1c>
    5b76:	e0 95       	com	r30
    5b78:	0b 2e       	mov	r0, r27
    5b7a:	ba 2f       	mov	r27, r26
    5b7c:	a0 2d       	mov	r26, r0
    5b7e:	0b 01       	movw	r0, r22
    5b80:	b9 01       	movw	r22, r18
    5b82:	90 01       	movw	r18, r0
    5b84:	0c 01       	movw	r0, r24
    5b86:	ca 01       	movw	r24, r20
    5b88:	a0 01       	movw	r20, r0
    5b8a:	11 24       	eor	r1, r1
    5b8c:	ff 27       	eor	r31, r31
    5b8e:	59 1b       	sub	r21, r25
    5b90:	99 f0       	breq	.+38     	; 0x5bb8 <__addsf3x+0x5c>
    5b92:	59 3f       	cpi	r21, 0xF9	; 249
    5b94:	50 f4       	brcc	.+20     	; 0x5baa <__addsf3x+0x4e>
    5b96:	50 3e       	cpi	r21, 0xE0	; 224
    5b98:	68 f1       	brcs	.+90     	; 0x5bf4 <__addsf3x+0x98>
    5b9a:	1a 16       	cp	r1, r26
    5b9c:	f0 40       	sbci	r31, 0x00	; 0
    5b9e:	a2 2f       	mov	r26, r18
    5ba0:	23 2f       	mov	r18, r19
    5ba2:	34 2f       	mov	r19, r20
    5ba4:	44 27       	eor	r20, r20
    5ba6:	58 5f       	subi	r21, 0xF8	; 248
    5ba8:	f3 cf       	rjmp	.-26     	; 0x5b90 <__addsf3x+0x34>
    5baa:	46 95       	lsr	r20
    5bac:	37 95       	ror	r19
    5bae:	27 95       	ror	r18
    5bb0:	a7 95       	ror	r26
    5bb2:	f0 40       	sbci	r31, 0x00	; 0
    5bb4:	53 95       	inc	r21
    5bb6:	c9 f7       	brne	.-14     	; 0x5baa <__addsf3x+0x4e>
    5bb8:	7e f4       	brtc	.+30     	; 0x5bd8 <__addsf3x+0x7c>
    5bba:	1f 16       	cp	r1, r31
    5bbc:	ba 0b       	sbc	r27, r26
    5bbe:	62 0b       	sbc	r22, r18
    5bc0:	73 0b       	sbc	r23, r19
    5bc2:	84 0b       	sbc	r24, r20
    5bc4:	ba f0       	brmi	.+46     	; 0x5bf4 <__addsf3x+0x98>
    5bc6:	91 50       	subi	r25, 0x01	; 1
    5bc8:	a1 f0       	breq	.+40     	; 0x5bf2 <__addsf3x+0x96>
    5bca:	ff 0f       	add	r31, r31
    5bcc:	bb 1f       	adc	r27, r27
    5bce:	66 1f       	adc	r22, r22
    5bd0:	77 1f       	adc	r23, r23
    5bd2:	88 1f       	adc	r24, r24
    5bd4:	c2 f7       	brpl	.-16     	; 0x5bc6 <__addsf3x+0x6a>
    5bd6:	0e c0       	rjmp	.+28     	; 0x5bf4 <__addsf3x+0x98>
    5bd8:	ba 0f       	add	r27, r26
    5bda:	62 1f       	adc	r22, r18
    5bdc:	73 1f       	adc	r23, r19
    5bde:	84 1f       	adc	r24, r20
    5be0:	48 f4       	brcc	.+18     	; 0x5bf4 <__addsf3x+0x98>
    5be2:	87 95       	ror	r24
    5be4:	77 95       	ror	r23
    5be6:	67 95       	ror	r22
    5be8:	b7 95       	ror	r27
    5bea:	f7 95       	ror	r31
    5bec:	9e 3f       	cpi	r25, 0xFE	; 254
    5bee:	08 f0       	brcs	.+2      	; 0x5bf2 <__addsf3x+0x96>
    5bf0:	b3 cf       	rjmp	.-154    	; 0x5b58 <__addsf3+0x1e>
    5bf2:	93 95       	inc	r25
    5bf4:	88 0f       	add	r24, r24
    5bf6:	08 f0       	brcs	.+2      	; 0x5bfa <__addsf3x+0x9e>
    5bf8:	99 27       	eor	r25, r25
    5bfa:	ee 0f       	add	r30, r30
    5bfc:	97 95       	ror	r25
    5bfe:	87 95       	ror	r24
    5c00:	08 95       	ret

00005c02 <__divsf3>:
    5c02:	0c d0       	rcall	.+24     	; 0x5c1c <__divsf3x>
    5c04:	eb c0       	rjmp	.+470    	; 0x5ddc <__fp_round>
    5c06:	e3 d0       	rcall	.+454    	; 0x5dce <__fp_pscB>
    5c08:	40 f0       	brcs	.+16     	; 0x5c1a <__divsf3+0x18>
    5c0a:	da d0       	rcall	.+436    	; 0x5dc0 <__fp_pscA>
    5c0c:	30 f0       	brcs	.+12     	; 0x5c1a <__divsf3+0x18>
    5c0e:	21 f4       	brne	.+8      	; 0x5c18 <__divsf3+0x16>
    5c10:	5f 3f       	cpi	r21, 0xFF	; 255
    5c12:	19 f0       	breq	.+6      	; 0x5c1a <__divsf3+0x18>
    5c14:	cc c0       	rjmp	.+408    	; 0x5dae <__fp_inf>
    5c16:	51 11       	cpse	r21, r1
    5c18:	15 c1       	rjmp	.+554    	; 0x5e44 <__fp_szero>
    5c1a:	cf c0       	rjmp	.+414    	; 0x5dba <__fp_nan>

00005c1c <__divsf3x>:
    5c1c:	f0 d0       	rcall	.+480    	; 0x5dfe <__fp_split3>
    5c1e:	98 f3       	brcs	.-26     	; 0x5c06 <__divsf3+0x4>

00005c20 <__divsf3_pse>:
    5c20:	99 23       	and	r25, r25
    5c22:	c9 f3       	breq	.-14     	; 0x5c16 <__divsf3+0x14>
    5c24:	55 23       	and	r21, r21
    5c26:	b1 f3       	breq	.-20     	; 0x5c14 <__divsf3+0x12>
    5c28:	95 1b       	sub	r25, r21
    5c2a:	55 0b       	sbc	r21, r21
    5c2c:	bb 27       	eor	r27, r27
    5c2e:	aa 27       	eor	r26, r26
    5c30:	62 17       	cp	r22, r18
    5c32:	73 07       	cpc	r23, r19
    5c34:	84 07       	cpc	r24, r20
    5c36:	38 f0       	brcs	.+14     	; 0x5c46 <__divsf3_pse+0x26>
    5c38:	9f 5f       	subi	r25, 0xFF	; 255
    5c3a:	5f 4f       	sbci	r21, 0xFF	; 255
    5c3c:	22 0f       	add	r18, r18
    5c3e:	33 1f       	adc	r19, r19
    5c40:	44 1f       	adc	r20, r20
    5c42:	aa 1f       	adc	r26, r26
    5c44:	a9 f3       	breq	.-22     	; 0x5c30 <__divsf3_pse+0x10>
    5c46:	33 d0       	rcall	.+102    	; 0x5cae <__divsf3_pse+0x8e>
    5c48:	0e 2e       	mov	r0, r30
    5c4a:	3a f0       	brmi	.+14     	; 0x5c5a <__divsf3_pse+0x3a>
    5c4c:	e0 e8       	ldi	r30, 0x80	; 128
    5c4e:	30 d0       	rcall	.+96     	; 0x5cb0 <__divsf3_pse+0x90>
    5c50:	91 50       	subi	r25, 0x01	; 1
    5c52:	50 40       	sbci	r21, 0x00	; 0
    5c54:	e6 95       	lsr	r30
    5c56:	00 1c       	adc	r0, r0
    5c58:	ca f7       	brpl	.-14     	; 0x5c4c <__divsf3_pse+0x2c>
    5c5a:	29 d0       	rcall	.+82     	; 0x5cae <__divsf3_pse+0x8e>
    5c5c:	fe 2f       	mov	r31, r30
    5c5e:	27 d0       	rcall	.+78     	; 0x5cae <__divsf3_pse+0x8e>
    5c60:	66 0f       	add	r22, r22
    5c62:	77 1f       	adc	r23, r23
    5c64:	88 1f       	adc	r24, r24
    5c66:	bb 1f       	adc	r27, r27
    5c68:	26 17       	cp	r18, r22
    5c6a:	37 07       	cpc	r19, r23
    5c6c:	48 07       	cpc	r20, r24
    5c6e:	ab 07       	cpc	r26, r27
    5c70:	b0 e8       	ldi	r27, 0x80	; 128
    5c72:	09 f0       	breq	.+2      	; 0x5c76 <__divsf3_pse+0x56>
    5c74:	bb 0b       	sbc	r27, r27
    5c76:	80 2d       	mov	r24, r0
    5c78:	bf 01       	movw	r22, r30
    5c7a:	ff 27       	eor	r31, r31
    5c7c:	93 58       	subi	r25, 0x83	; 131
    5c7e:	5f 4f       	sbci	r21, 0xFF	; 255
    5c80:	2a f0       	brmi	.+10     	; 0x5c8c <__divsf3_pse+0x6c>
    5c82:	9e 3f       	cpi	r25, 0xFE	; 254
    5c84:	51 05       	cpc	r21, r1
    5c86:	68 f0       	brcs	.+26     	; 0x5ca2 <__divsf3_pse+0x82>
    5c88:	92 c0       	rjmp	.+292    	; 0x5dae <__fp_inf>
    5c8a:	dc c0       	rjmp	.+440    	; 0x5e44 <__fp_szero>
    5c8c:	5f 3f       	cpi	r21, 0xFF	; 255
    5c8e:	ec f3       	brlt	.-6      	; 0x5c8a <__divsf3_pse+0x6a>
    5c90:	98 3e       	cpi	r25, 0xE8	; 232
    5c92:	dc f3       	brlt	.-10     	; 0x5c8a <__divsf3_pse+0x6a>
    5c94:	86 95       	lsr	r24
    5c96:	77 95       	ror	r23
    5c98:	67 95       	ror	r22
    5c9a:	b7 95       	ror	r27
    5c9c:	f7 95       	ror	r31
    5c9e:	9f 5f       	subi	r25, 0xFF	; 255
    5ca0:	c9 f7       	brne	.-14     	; 0x5c94 <__divsf3_pse+0x74>
    5ca2:	88 0f       	add	r24, r24
    5ca4:	91 1d       	adc	r25, r1
    5ca6:	96 95       	lsr	r25
    5ca8:	87 95       	ror	r24
    5caa:	97 f9       	bld	r25, 7
    5cac:	08 95       	ret
    5cae:	e1 e0       	ldi	r30, 0x01	; 1
    5cb0:	66 0f       	add	r22, r22
    5cb2:	77 1f       	adc	r23, r23
    5cb4:	88 1f       	adc	r24, r24
    5cb6:	bb 1f       	adc	r27, r27
    5cb8:	62 17       	cp	r22, r18
    5cba:	73 07       	cpc	r23, r19
    5cbc:	84 07       	cpc	r24, r20
    5cbe:	ba 07       	cpc	r27, r26
    5cc0:	20 f0       	brcs	.+8      	; 0x5cca <__divsf3_pse+0xaa>
    5cc2:	62 1b       	sub	r22, r18
    5cc4:	73 0b       	sbc	r23, r19
    5cc6:	84 0b       	sbc	r24, r20
    5cc8:	ba 0b       	sbc	r27, r26
    5cca:	ee 1f       	adc	r30, r30
    5ccc:	88 f7       	brcc	.-30     	; 0x5cb0 <__divsf3_pse+0x90>
    5cce:	e0 95       	com	r30
    5cd0:	08 95       	ret

00005cd2 <__fixsfsi>:
    5cd2:	04 d0       	rcall	.+8      	; 0x5cdc <__fixunssfsi>
    5cd4:	68 94       	set
    5cd6:	b1 11       	cpse	r27, r1
    5cd8:	b5 c0       	rjmp	.+362    	; 0x5e44 <__fp_szero>
    5cda:	08 95       	ret

00005cdc <__fixunssfsi>:
    5cdc:	98 d0       	rcall	.+304    	; 0x5e0e <__fp_splitA>
    5cde:	88 f0       	brcs	.+34     	; 0x5d02 <__fixunssfsi+0x26>
    5ce0:	9f 57       	subi	r25, 0x7F	; 127
    5ce2:	90 f0       	brcs	.+36     	; 0x5d08 <__fixunssfsi+0x2c>
    5ce4:	b9 2f       	mov	r27, r25
    5ce6:	99 27       	eor	r25, r25
    5ce8:	b7 51       	subi	r27, 0x17	; 23
    5cea:	a0 f0       	brcs	.+40     	; 0x5d14 <__fixunssfsi+0x38>
    5cec:	d1 f0       	breq	.+52     	; 0x5d22 <__fixunssfsi+0x46>
    5cee:	66 0f       	add	r22, r22
    5cf0:	77 1f       	adc	r23, r23
    5cf2:	88 1f       	adc	r24, r24
    5cf4:	99 1f       	adc	r25, r25
    5cf6:	1a f0       	brmi	.+6      	; 0x5cfe <__fixunssfsi+0x22>
    5cf8:	ba 95       	dec	r27
    5cfa:	c9 f7       	brne	.-14     	; 0x5cee <__fixunssfsi+0x12>
    5cfc:	12 c0       	rjmp	.+36     	; 0x5d22 <__fixunssfsi+0x46>
    5cfe:	b1 30       	cpi	r27, 0x01	; 1
    5d00:	81 f0       	breq	.+32     	; 0x5d22 <__fixunssfsi+0x46>
    5d02:	9f d0       	rcall	.+318    	; 0x5e42 <__fp_zero>
    5d04:	b1 e0       	ldi	r27, 0x01	; 1
    5d06:	08 95       	ret
    5d08:	9c c0       	rjmp	.+312    	; 0x5e42 <__fp_zero>
    5d0a:	67 2f       	mov	r22, r23
    5d0c:	78 2f       	mov	r23, r24
    5d0e:	88 27       	eor	r24, r24
    5d10:	b8 5f       	subi	r27, 0xF8	; 248
    5d12:	39 f0       	breq	.+14     	; 0x5d22 <__fixunssfsi+0x46>
    5d14:	b9 3f       	cpi	r27, 0xF9	; 249
    5d16:	cc f3       	brlt	.-14     	; 0x5d0a <__fixunssfsi+0x2e>
    5d18:	86 95       	lsr	r24
    5d1a:	77 95       	ror	r23
    5d1c:	67 95       	ror	r22
    5d1e:	b3 95       	inc	r27
    5d20:	d9 f7       	brne	.-10     	; 0x5d18 <__fixunssfsi+0x3c>
    5d22:	3e f4       	brtc	.+14     	; 0x5d32 <__fixunssfsi+0x56>
    5d24:	90 95       	com	r25
    5d26:	80 95       	com	r24
    5d28:	70 95       	com	r23
    5d2a:	61 95       	neg	r22
    5d2c:	7f 4f       	sbci	r23, 0xFF	; 255
    5d2e:	8f 4f       	sbci	r24, 0xFF	; 255
    5d30:	9f 4f       	sbci	r25, 0xFF	; 255
    5d32:	08 95       	ret

00005d34 <__floatunsisf>:
    5d34:	e8 94       	clt
    5d36:	09 c0       	rjmp	.+18     	; 0x5d4a <__floatsisf+0x12>

00005d38 <__floatsisf>:
    5d38:	97 fb       	bst	r25, 7
    5d3a:	3e f4       	brtc	.+14     	; 0x5d4a <__floatsisf+0x12>
    5d3c:	90 95       	com	r25
    5d3e:	80 95       	com	r24
    5d40:	70 95       	com	r23
    5d42:	61 95       	neg	r22
    5d44:	7f 4f       	sbci	r23, 0xFF	; 255
    5d46:	8f 4f       	sbci	r24, 0xFF	; 255
    5d48:	9f 4f       	sbci	r25, 0xFF	; 255
    5d4a:	99 23       	and	r25, r25
    5d4c:	a9 f0       	breq	.+42     	; 0x5d78 <__floatsisf+0x40>
    5d4e:	f9 2f       	mov	r31, r25
    5d50:	96 e9       	ldi	r25, 0x96	; 150
    5d52:	bb 27       	eor	r27, r27
    5d54:	93 95       	inc	r25
    5d56:	f6 95       	lsr	r31
    5d58:	87 95       	ror	r24
    5d5a:	77 95       	ror	r23
    5d5c:	67 95       	ror	r22
    5d5e:	b7 95       	ror	r27
    5d60:	f1 11       	cpse	r31, r1
    5d62:	f8 cf       	rjmp	.-16     	; 0x5d54 <__floatsisf+0x1c>
    5d64:	fa f4       	brpl	.+62     	; 0x5da4 <__floatsisf+0x6c>
    5d66:	bb 0f       	add	r27, r27
    5d68:	11 f4       	brne	.+4      	; 0x5d6e <__floatsisf+0x36>
    5d6a:	60 ff       	sbrs	r22, 0
    5d6c:	1b c0       	rjmp	.+54     	; 0x5da4 <__floatsisf+0x6c>
    5d6e:	6f 5f       	subi	r22, 0xFF	; 255
    5d70:	7f 4f       	sbci	r23, 0xFF	; 255
    5d72:	8f 4f       	sbci	r24, 0xFF	; 255
    5d74:	9f 4f       	sbci	r25, 0xFF	; 255
    5d76:	16 c0       	rjmp	.+44     	; 0x5da4 <__floatsisf+0x6c>
    5d78:	88 23       	and	r24, r24
    5d7a:	11 f0       	breq	.+4      	; 0x5d80 <__floatsisf+0x48>
    5d7c:	96 e9       	ldi	r25, 0x96	; 150
    5d7e:	11 c0       	rjmp	.+34     	; 0x5da2 <__floatsisf+0x6a>
    5d80:	77 23       	and	r23, r23
    5d82:	21 f0       	breq	.+8      	; 0x5d8c <__floatsisf+0x54>
    5d84:	9e e8       	ldi	r25, 0x8E	; 142
    5d86:	87 2f       	mov	r24, r23
    5d88:	76 2f       	mov	r23, r22
    5d8a:	05 c0       	rjmp	.+10     	; 0x5d96 <__floatsisf+0x5e>
    5d8c:	66 23       	and	r22, r22
    5d8e:	71 f0       	breq	.+28     	; 0x5dac <__floatsisf+0x74>
    5d90:	96 e8       	ldi	r25, 0x86	; 134
    5d92:	86 2f       	mov	r24, r22
    5d94:	70 e0       	ldi	r23, 0x00	; 0
    5d96:	60 e0       	ldi	r22, 0x00	; 0
    5d98:	2a f0       	brmi	.+10     	; 0x5da4 <__floatsisf+0x6c>
    5d9a:	9a 95       	dec	r25
    5d9c:	66 0f       	add	r22, r22
    5d9e:	77 1f       	adc	r23, r23
    5da0:	88 1f       	adc	r24, r24
    5da2:	da f7       	brpl	.-10     	; 0x5d9a <__floatsisf+0x62>
    5da4:	88 0f       	add	r24, r24
    5da6:	96 95       	lsr	r25
    5da8:	87 95       	ror	r24
    5daa:	97 f9       	bld	r25, 7
    5dac:	08 95       	ret

00005dae <__fp_inf>:
    5dae:	97 f9       	bld	r25, 7
    5db0:	9f 67       	ori	r25, 0x7F	; 127
    5db2:	80 e8       	ldi	r24, 0x80	; 128
    5db4:	70 e0       	ldi	r23, 0x00	; 0
    5db6:	60 e0       	ldi	r22, 0x00	; 0
    5db8:	08 95       	ret

00005dba <__fp_nan>:
    5dba:	9f ef       	ldi	r25, 0xFF	; 255
    5dbc:	80 ec       	ldi	r24, 0xC0	; 192
    5dbe:	08 95       	ret

00005dc0 <__fp_pscA>:
    5dc0:	00 24       	eor	r0, r0
    5dc2:	0a 94       	dec	r0
    5dc4:	16 16       	cp	r1, r22
    5dc6:	17 06       	cpc	r1, r23
    5dc8:	18 06       	cpc	r1, r24
    5dca:	09 06       	cpc	r0, r25
    5dcc:	08 95       	ret

00005dce <__fp_pscB>:
    5dce:	00 24       	eor	r0, r0
    5dd0:	0a 94       	dec	r0
    5dd2:	12 16       	cp	r1, r18
    5dd4:	13 06       	cpc	r1, r19
    5dd6:	14 06       	cpc	r1, r20
    5dd8:	05 06       	cpc	r0, r21
    5dda:	08 95       	ret

00005ddc <__fp_round>:
    5ddc:	09 2e       	mov	r0, r25
    5dde:	03 94       	inc	r0
    5de0:	00 0c       	add	r0, r0
    5de2:	11 f4       	brne	.+4      	; 0x5de8 <__fp_round+0xc>
    5de4:	88 23       	and	r24, r24
    5de6:	52 f0       	brmi	.+20     	; 0x5dfc <__fp_round+0x20>
    5de8:	bb 0f       	add	r27, r27
    5dea:	40 f4       	brcc	.+16     	; 0x5dfc <__fp_round+0x20>
    5dec:	bf 2b       	or	r27, r31
    5dee:	11 f4       	brne	.+4      	; 0x5df4 <__fp_round+0x18>
    5df0:	60 ff       	sbrs	r22, 0
    5df2:	04 c0       	rjmp	.+8      	; 0x5dfc <__fp_round+0x20>
    5df4:	6f 5f       	subi	r22, 0xFF	; 255
    5df6:	7f 4f       	sbci	r23, 0xFF	; 255
    5df8:	8f 4f       	sbci	r24, 0xFF	; 255
    5dfa:	9f 4f       	sbci	r25, 0xFF	; 255
    5dfc:	08 95       	ret

00005dfe <__fp_split3>:
    5dfe:	57 fd       	sbrc	r21, 7
    5e00:	90 58       	subi	r25, 0x80	; 128
    5e02:	44 0f       	add	r20, r20
    5e04:	55 1f       	adc	r21, r21
    5e06:	59 f0       	breq	.+22     	; 0x5e1e <__fp_splitA+0x10>
    5e08:	5f 3f       	cpi	r21, 0xFF	; 255
    5e0a:	71 f0       	breq	.+28     	; 0x5e28 <__fp_splitA+0x1a>
    5e0c:	47 95       	ror	r20

00005e0e <__fp_splitA>:
    5e0e:	88 0f       	add	r24, r24
    5e10:	97 fb       	bst	r25, 7
    5e12:	99 1f       	adc	r25, r25
    5e14:	61 f0       	breq	.+24     	; 0x5e2e <__fp_splitA+0x20>
    5e16:	9f 3f       	cpi	r25, 0xFF	; 255
    5e18:	79 f0       	breq	.+30     	; 0x5e38 <__fp_splitA+0x2a>
    5e1a:	87 95       	ror	r24
    5e1c:	08 95       	ret
    5e1e:	12 16       	cp	r1, r18
    5e20:	13 06       	cpc	r1, r19
    5e22:	14 06       	cpc	r1, r20
    5e24:	55 1f       	adc	r21, r21
    5e26:	f2 cf       	rjmp	.-28     	; 0x5e0c <__fp_split3+0xe>
    5e28:	46 95       	lsr	r20
    5e2a:	f1 df       	rcall	.-30     	; 0x5e0e <__fp_splitA>
    5e2c:	08 c0       	rjmp	.+16     	; 0x5e3e <__fp_splitA+0x30>
    5e2e:	16 16       	cp	r1, r22
    5e30:	17 06       	cpc	r1, r23
    5e32:	18 06       	cpc	r1, r24
    5e34:	99 1f       	adc	r25, r25
    5e36:	f1 cf       	rjmp	.-30     	; 0x5e1a <__fp_splitA+0xc>
    5e38:	86 95       	lsr	r24
    5e3a:	71 05       	cpc	r23, r1
    5e3c:	61 05       	cpc	r22, r1
    5e3e:	08 94       	sec
    5e40:	08 95       	ret

00005e42 <__fp_zero>:
    5e42:	e8 94       	clt

00005e44 <__fp_szero>:
    5e44:	bb 27       	eor	r27, r27
    5e46:	66 27       	eor	r22, r22
    5e48:	77 27       	eor	r23, r23
    5e4a:	cb 01       	movw	r24, r22
    5e4c:	97 f9       	bld	r25, 7
    5e4e:	08 95       	ret

00005e50 <__gesf2>:
    5e50:	e3 d0       	rcall	.+454    	; 0x6018 <__fp_cmp>
    5e52:	08 f4       	brcc	.+2      	; 0x5e56 <__gesf2+0x6>
    5e54:	8f ef       	ldi	r24, 0xFF	; 255
    5e56:	08 95       	ret

00005e58 <__mulsf3>:
    5e58:	0b d0       	rcall	.+22     	; 0x5e70 <__mulsf3x>
    5e5a:	c0 cf       	rjmp	.-128    	; 0x5ddc <__fp_round>
    5e5c:	b1 df       	rcall	.-158    	; 0x5dc0 <__fp_pscA>
    5e5e:	28 f0       	brcs	.+10     	; 0x5e6a <__mulsf3+0x12>
    5e60:	b6 df       	rcall	.-148    	; 0x5dce <__fp_pscB>
    5e62:	18 f0       	brcs	.+6      	; 0x5e6a <__mulsf3+0x12>
    5e64:	95 23       	and	r25, r21
    5e66:	09 f0       	breq	.+2      	; 0x5e6a <__mulsf3+0x12>
    5e68:	a2 cf       	rjmp	.-188    	; 0x5dae <__fp_inf>
    5e6a:	a7 cf       	rjmp	.-178    	; 0x5dba <__fp_nan>
    5e6c:	11 24       	eor	r1, r1
    5e6e:	ea cf       	rjmp	.-44     	; 0x5e44 <__fp_szero>

00005e70 <__mulsf3x>:
    5e70:	c6 df       	rcall	.-116    	; 0x5dfe <__fp_split3>
    5e72:	a0 f3       	brcs	.-24     	; 0x5e5c <__mulsf3+0x4>

00005e74 <__mulsf3_pse>:
    5e74:	95 9f       	mul	r25, r21
    5e76:	d1 f3       	breq	.-12     	; 0x5e6c <__mulsf3+0x14>
    5e78:	95 0f       	add	r25, r21
    5e7a:	50 e0       	ldi	r21, 0x00	; 0
    5e7c:	55 1f       	adc	r21, r21
    5e7e:	62 9f       	mul	r22, r18
    5e80:	f0 01       	movw	r30, r0
    5e82:	72 9f       	mul	r23, r18
    5e84:	bb 27       	eor	r27, r27
    5e86:	f0 0d       	add	r31, r0
    5e88:	b1 1d       	adc	r27, r1
    5e8a:	63 9f       	mul	r22, r19
    5e8c:	aa 27       	eor	r26, r26
    5e8e:	f0 0d       	add	r31, r0
    5e90:	b1 1d       	adc	r27, r1
    5e92:	aa 1f       	adc	r26, r26
    5e94:	64 9f       	mul	r22, r20
    5e96:	66 27       	eor	r22, r22
    5e98:	b0 0d       	add	r27, r0
    5e9a:	a1 1d       	adc	r26, r1
    5e9c:	66 1f       	adc	r22, r22
    5e9e:	82 9f       	mul	r24, r18
    5ea0:	22 27       	eor	r18, r18
    5ea2:	b0 0d       	add	r27, r0
    5ea4:	a1 1d       	adc	r26, r1
    5ea6:	62 1f       	adc	r22, r18
    5ea8:	73 9f       	mul	r23, r19
    5eaa:	b0 0d       	add	r27, r0
    5eac:	a1 1d       	adc	r26, r1
    5eae:	62 1f       	adc	r22, r18
    5eb0:	83 9f       	mul	r24, r19
    5eb2:	a0 0d       	add	r26, r0
    5eb4:	61 1d       	adc	r22, r1
    5eb6:	22 1f       	adc	r18, r18
    5eb8:	74 9f       	mul	r23, r20
    5eba:	33 27       	eor	r19, r19
    5ebc:	a0 0d       	add	r26, r0
    5ebe:	61 1d       	adc	r22, r1
    5ec0:	23 1f       	adc	r18, r19
    5ec2:	84 9f       	mul	r24, r20
    5ec4:	60 0d       	add	r22, r0
    5ec6:	21 1d       	adc	r18, r1
    5ec8:	82 2f       	mov	r24, r18
    5eca:	76 2f       	mov	r23, r22
    5ecc:	6a 2f       	mov	r22, r26
    5ece:	11 24       	eor	r1, r1
    5ed0:	9f 57       	subi	r25, 0x7F	; 127
    5ed2:	50 40       	sbci	r21, 0x00	; 0
    5ed4:	8a f0       	brmi	.+34     	; 0x5ef8 <__mulsf3_pse+0x84>
    5ed6:	e1 f0       	breq	.+56     	; 0x5f10 <__mulsf3_pse+0x9c>
    5ed8:	88 23       	and	r24, r24
    5eda:	4a f0       	brmi	.+18     	; 0x5eee <__mulsf3_pse+0x7a>
    5edc:	ee 0f       	add	r30, r30
    5ede:	ff 1f       	adc	r31, r31
    5ee0:	bb 1f       	adc	r27, r27
    5ee2:	66 1f       	adc	r22, r22
    5ee4:	77 1f       	adc	r23, r23
    5ee6:	88 1f       	adc	r24, r24
    5ee8:	91 50       	subi	r25, 0x01	; 1
    5eea:	50 40       	sbci	r21, 0x00	; 0
    5eec:	a9 f7       	brne	.-22     	; 0x5ed8 <__mulsf3_pse+0x64>
    5eee:	9e 3f       	cpi	r25, 0xFE	; 254
    5ef0:	51 05       	cpc	r21, r1
    5ef2:	70 f0       	brcs	.+28     	; 0x5f10 <__mulsf3_pse+0x9c>
    5ef4:	5c cf       	rjmp	.-328    	; 0x5dae <__fp_inf>
    5ef6:	a6 cf       	rjmp	.-180    	; 0x5e44 <__fp_szero>
    5ef8:	5f 3f       	cpi	r21, 0xFF	; 255
    5efa:	ec f3       	brlt	.-6      	; 0x5ef6 <__mulsf3_pse+0x82>
    5efc:	98 3e       	cpi	r25, 0xE8	; 232
    5efe:	dc f3       	brlt	.-10     	; 0x5ef6 <__mulsf3_pse+0x82>
    5f00:	86 95       	lsr	r24
    5f02:	77 95       	ror	r23
    5f04:	67 95       	ror	r22
    5f06:	b7 95       	ror	r27
    5f08:	f7 95       	ror	r31
    5f0a:	e7 95       	ror	r30
    5f0c:	9f 5f       	subi	r25, 0xFF	; 255
    5f0e:	c1 f7       	brne	.-16     	; 0x5f00 <__mulsf3_pse+0x8c>
    5f10:	fe 2b       	or	r31, r30
    5f12:	88 0f       	add	r24, r24
    5f14:	91 1d       	adc	r25, r1
    5f16:	96 95       	lsr	r25
    5f18:	87 95       	ror	r24
    5f1a:	97 f9       	bld	r25, 7
    5f1c:	08 95       	ret

00005f1e <pow>:
    5f1e:	fa 01       	movw	r30, r20
    5f20:	ee 0f       	add	r30, r30
    5f22:	ff 1f       	adc	r31, r31
    5f24:	30 96       	adiw	r30, 0x00	; 0
    5f26:	21 05       	cpc	r18, r1
    5f28:	31 05       	cpc	r19, r1
    5f2a:	99 f1       	breq	.+102    	; 0x5f92 <pow+0x74>
    5f2c:	61 15       	cp	r22, r1
    5f2e:	71 05       	cpc	r23, r1
    5f30:	61 f4       	brne	.+24     	; 0x5f4a <pow+0x2c>
    5f32:	80 38       	cpi	r24, 0x80	; 128
    5f34:	bf e3       	ldi	r27, 0x3F	; 63
    5f36:	9b 07       	cpc	r25, r27
    5f38:	49 f1       	breq	.+82     	; 0x5f8c <pow+0x6e>
    5f3a:	68 94       	set
    5f3c:	90 38       	cpi	r25, 0x80	; 128
    5f3e:	81 05       	cpc	r24, r1
    5f40:	61 f0       	breq	.+24     	; 0x5f5a <pow+0x3c>
    5f42:	80 38       	cpi	r24, 0x80	; 128
    5f44:	bf ef       	ldi	r27, 0xFF	; 255
    5f46:	9b 07       	cpc	r25, r27
    5f48:	41 f0       	breq	.+16     	; 0x5f5a <pow+0x3c>
    5f4a:	99 23       	and	r25, r25
    5f4c:	42 f5       	brpl	.+80     	; 0x5f9e <pow+0x80>
    5f4e:	ff 3f       	cpi	r31, 0xFF	; 255
    5f50:	e1 05       	cpc	r30, r1
    5f52:	31 05       	cpc	r19, r1
    5f54:	21 05       	cpc	r18, r1
    5f56:	11 f1       	breq	.+68     	; 0x5f9c <pow+0x7e>
    5f58:	e8 94       	clt
    5f5a:	08 94       	sec
    5f5c:	e7 95       	ror	r30
    5f5e:	d9 01       	movw	r26, r18
    5f60:	aa 23       	and	r26, r26
    5f62:	29 f4       	brne	.+10     	; 0x5f6e <pow+0x50>
    5f64:	ab 2f       	mov	r26, r27
    5f66:	be 2f       	mov	r27, r30
    5f68:	f8 5f       	subi	r31, 0xF8	; 248
    5f6a:	d0 f3       	brcs	.-12     	; 0x5f60 <pow+0x42>
    5f6c:	10 c0       	rjmp	.+32     	; 0x5f8e <pow+0x70>
    5f6e:	ff 5f       	subi	r31, 0xFF	; 255
    5f70:	70 f4       	brcc	.+28     	; 0x5f8e <pow+0x70>
    5f72:	a6 95       	lsr	r26
    5f74:	e0 f7       	brcc	.-8      	; 0x5f6e <pow+0x50>
    5f76:	f7 39       	cpi	r31, 0x97	; 151
    5f78:	50 f0       	brcs	.+20     	; 0x5f8e <pow+0x70>
    5f7a:	19 f0       	breq	.+6      	; 0x5f82 <pow+0x64>
    5f7c:	ff 3a       	cpi	r31, 0xAF	; 175
    5f7e:	38 f4       	brcc	.+14     	; 0x5f8e <pow+0x70>
    5f80:	9f 77       	andi	r25, 0x7F	; 127
    5f82:	9f 93       	push	r25
    5f84:	0c d0       	rcall	.+24     	; 0x5f9e <pow+0x80>
    5f86:	0f 90       	pop	r0
    5f88:	07 fc       	sbrc	r0, 7
    5f8a:	90 58       	subi	r25, 0x80	; 128
    5f8c:	08 95       	ret
    5f8e:	3e f0       	brts	.+14     	; 0x5f9e <pow+0x80>
    5f90:	14 cf       	rjmp	.-472    	; 0x5dba <__fp_nan>
    5f92:	60 e0       	ldi	r22, 0x00	; 0
    5f94:	70 e0       	ldi	r23, 0x00	; 0
    5f96:	80 e8       	ldi	r24, 0x80	; 128
    5f98:	9f e3       	ldi	r25, 0x3F	; 63
    5f9a:	08 95       	ret
    5f9c:	4f e7       	ldi	r20, 0x7F	; 127
    5f9e:	9f 77       	andi	r25, 0x7F	; 127
    5fa0:	5f 93       	push	r21
    5fa2:	4f 93       	push	r20
    5fa4:	3f 93       	push	r19
    5fa6:	2f 93       	push	r18
    5fa8:	c2 d0       	rcall	.+388    	; 0x612e <log>
    5faa:	2f 91       	pop	r18
    5fac:	3f 91       	pop	r19
    5fae:	4f 91       	pop	r20
    5fb0:	5f 91       	pop	r21
    5fb2:	52 df       	rcall	.-348    	; 0x5e58 <__mulsf3>
    5fb4:	05 c0       	rjmp	.+10     	; 0x5fc0 <exp>
    5fb6:	19 f4       	brne	.+6      	; 0x5fbe <pow+0xa0>
    5fb8:	0e f0       	brts	.+2      	; 0x5fbc <pow+0x9e>
    5fba:	f9 ce       	rjmp	.-526    	; 0x5dae <__fp_inf>
    5fbc:	42 cf       	rjmp	.-380    	; 0x5e42 <__fp_zero>
    5fbe:	fd ce       	rjmp	.-518    	; 0x5dba <__fp_nan>

00005fc0 <exp>:
    5fc0:	26 df       	rcall	.-436    	; 0x5e0e <__fp_splitA>
    5fc2:	c8 f3       	brcs	.-14     	; 0x5fb6 <pow+0x98>
    5fc4:	96 38       	cpi	r25, 0x86	; 134
    5fc6:	c0 f7       	brcc	.-16     	; 0x5fb8 <pow+0x9a>
    5fc8:	07 f8       	bld	r0, 7
    5fca:	0f 92       	push	r0
    5fcc:	e8 94       	clt
    5fce:	2b e3       	ldi	r18, 0x3B	; 59
    5fd0:	3a ea       	ldi	r19, 0xAA	; 170
    5fd2:	48 eb       	ldi	r20, 0xB8	; 184
    5fd4:	5f e7       	ldi	r21, 0x7F	; 127
    5fd6:	4e df       	rcall	.-356    	; 0x5e74 <__mulsf3_pse>
    5fd8:	0f 92       	push	r0
    5fda:	0f 92       	push	r0
    5fdc:	0f 92       	push	r0
    5fde:	4d b7       	in	r20, 0x3d	; 61
    5fe0:	5e b7       	in	r21, 0x3e	; 62
    5fe2:	0f 92       	push	r0
    5fe4:	e4 d0       	rcall	.+456    	; 0x61ae <modf>
    5fe6:	e8 e6       	ldi	r30, 0x68	; 104
    5fe8:	f0 e0       	ldi	r31, 0x00	; 0
    5fea:	3a d0       	rcall	.+116    	; 0x6060 <__fp_powser>
    5fec:	4f 91       	pop	r20
    5fee:	5f 91       	pop	r21
    5ff0:	ef 91       	pop	r30
    5ff2:	ff 91       	pop	r31
    5ff4:	e5 95       	asr	r30
    5ff6:	ee 1f       	adc	r30, r30
    5ff8:	ff 1f       	adc	r31, r31
    5ffa:	49 f0       	breq	.+18     	; 0x600e <exp+0x4e>
    5ffc:	fe 57       	subi	r31, 0x7E	; 126
    5ffe:	e0 68       	ori	r30, 0x80	; 128
    6000:	44 27       	eor	r20, r20
    6002:	ee 0f       	add	r30, r30
    6004:	44 1f       	adc	r20, r20
    6006:	fa 95       	dec	r31
    6008:	e1 f7       	brne	.-8      	; 0x6002 <exp+0x42>
    600a:	41 95       	neg	r20
    600c:	55 0b       	sbc	r21, r21
    600e:	56 d0       	rcall	.+172    	; 0x60bc <ldexp>
    6010:	0f 90       	pop	r0
    6012:	07 fe       	sbrs	r0, 7
    6014:	4a c0       	rjmp	.+148    	; 0x60aa <inverse>
    6016:	08 95       	ret

00006018 <__fp_cmp>:
    6018:	99 0f       	add	r25, r25
    601a:	00 08       	sbc	r0, r0
    601c:	55 0f       	add	r21, r21
    601e:	aa 0b       	sbc	r26, r26
    6020:	e0 e8       	ldi	r30, 0x80	; 128
    6022:	fe ef       	ldi	r31, 0xFE	; 254
    6024:	16 16       	cp	r1, r22
    6026:	17 06       	cpc	r1, r23
    6028:	e8 07       	cpc	r30, r24
    602a:	f9 07       	cpc	r31, r25
    602c:	c0 f0       	brcs	.+48     	; 0x605e <__fp_cmp+0x46>
    602e:	12 16       	cp	r1, r18
    6030:	13 06       	cpc	r1, r19
    6032:	e4 07       	cpc	r30, r20
    6034:	f5 07       	cpc	r31, r21
    6036:	98 f0       	brcs	.+38     	; 0x605e <__fp_cmp+0x46>
    6038:	62 1b       	sub	r22, r18
    603a:	73 0b       	sbc	r23, r19
    603c:	84 0b       	sbc	r24, r20
    603e:	95 0b       	sbc	r25, r21
    6040:	39 f4       	brne	.+14     	; 0x6050 <__fp_cmp+0x38>
    6042:	0a 26       	eor	r0, r26
    6044:	61 f0       	breq	.+24     	; 0x605e <__fp_cmp+0x46>
    6046:	23 2b       	or	r18, r19
    6048:	24 2b       	or	r18, r20
    604a:	25 2b       	or	r18, r21
    604c:	21 f4       	brne	.+8      	; 0x6056 <__fp_cmp+0x3e>
    604e:	08 95       	ret
    6050:	0a 26       	eor	r0, r26
    6052:	09 f4       	brne	.+2      	; 0x6056 <__fp_cmp+0x3e>
    6054:	a1 40       	sbci	r26, 0x01	; 1
    6056:	a6 95       	lsr	r26
    6058:	8f ef       	ldi	r24, 0xFF	; 255
    605a:	81 1d       	adc	r24, r1
    605c:	81 1d       	adc	r24, r1
    605e:	08 95       	ret

00006060 <__fp_powser>:
    6060:	df 93       	push	r29
    6062:	cf 93       	push	r28
    6064:	1f 93       	push	r17
    6066:	0f 93       	push	r16
    6068:	ff 92       	push	r15
    606a:	ef 92       	push	r14
    606c:	df 92       	push	r13
    606e:	7b 01       	movw	r14, r22
    6070:	8c 01       	movw	r16, r24
    6072:	68 94       	set
    6074:	05 c0       	rjmp	.+10     	; 0x6080 <__fp_powser+0x20>
    6076:	da 2e       	mov	r13, r26
    6078:	ef 01       	movw	r28, r30
    607a:	fa de       	rcall	.-524    	; 0x5e70 <__mulsf3x>
    607c:	fe 01       	movw	r30, r28
    607e:	e8 94       	clt
    6080:	a5 91       	lpm	r26, Z+
    6082:	25 91       	lpm	r18, Z+
    6084:	35 91       	lpm	r19, Z+
    6086:	45 91       	lpm	r20, Z+
    6088:	55 91       	lpm	r21, Z+
    608a:	ae f3       	brts	.-22     	; 0x6076 <__fp_powser+0x16>
    608c:	ef 01       	movw	r28, r30
    608e:	66 dd       	rcall	.-1332   	; 0x5b5c <__addsf3x>
    6090:	fe 01       	movw	r30, r28
    6092:	97 01       	movw	r18, r14
    6094:	a8 01       	movw	r20, r16
    6096:	da 94       	dec	r13
    6098:	79 f7       	brne	.-34     	; 0x6078 <__fp_powser+0x18>
    609a:	df 90       	pop	r13
    609c:	ef 90       	pop	r14
    609e:	ff 90       	pop	r15
    60a0:	0f 91       	pop	r16
    60a2:	1f 91       	pop	r17
    60a4:	cf 91       	pop	r28
    60a6:	df 91       	pop	r29
    60a8:	08 95       	ret

000060aa <inverse>:
    60aa:	9b 01       	movw	r18, r22
    60ac:	ac 01       	movw	r20, r24
    60ae:	60 e0       	ldi	r22, 0x00	; 0
    60b0:	70 e0       	ldi	r23, 0x00	; 0
    60b2:	80 e8       	ldi	r24, 0x80	; 128
    60b4:	9f e3       	ldi	r25, 0x3F	; 63
    60b6:	a5 cd       	rjmp	.-1206   	; 0x5c02 <__divsf3>
    60b8:	7a ce       	rjmp	.-780    	; 0x5dae <__fp_inf>
    60ba:	ac c0       	rjmp	.+344    	; 0x6214 <__fp_mpack>

000060bc <ldexp>:
    60bc:	a8 de       	rcall	.-688    	; 0x5e0e <__fp_splitA>
    60be:	e8 f3       	brcs	.-6      	; 0x60ba <inverse+0x10>
    60c0:	99 23       	and	r25, r25
    60c2:	d9 f3       	breq	.-10     	; 0x60ba <inverse+0x10>
    60c4:	94 0f       	add	r25, r20
    60c6:	51 1d       	adc	r21, r1
    60c8:	bb f3       	brvs	.-18     	; 0x60b8 <inverse+0xe>
    60ca:	91 50       	subi	r25, 0x01	; 1
    60cc:	50 40       	sbci	r21, 0x00	; 0
    60ce:	94 f0       	brlt	.+36     	; 0x60f4 <ldexp+0x38>
    60d0:	59 f0       	breq	.+22     	; 0x60e8 <ldexp+0x2c>
    60d2:	88 23       	and	r24, r24
    60d4:	32 f0       	brmi	.+12     	; 0x60e2 <ldexp+0x26>
    60d6:	66 0f       	add	r22, r22
    60d8:	77 1f       	adc	r23, r23
    60da:	88 1f       	adc	r24, r24
    60dc:	91 50       	subi	r25, 0x01	; 1
    60de:	50 40       	sbci	r21, 0x00	; 0
    60e0:	c1 f7       	brne	.-16     	; 0x60d2 <ldexp+0x16>
    60e2:	9e 3f       	cpi	r25, 0xFE	; 254
    60e4:	51 05       	cpc	r21, r1
    60e6:	44 f7       	brge	.-48     	; 0x60b8 <inverse+0xe>
    60e8:	88 0f       	add	r24, r24
    60ea:	91 1d       	adc	r25, r1
    60ec:	96 95       	lsr	r25
    60ee:	87 95       	ror	r24
    60f0:	97 f9       	bld	r25, 7
    60f2:	08 95       	ret
    60f4:	5f 3f       	cpi	r21, 0xFF	; 255
    60f6:	ac f0       	brlt	.+42     	; 0x6122 <ldexp+0x66>
    60f8:	98 3e       	cpi	r25, 0xE8	; 232
    60fa:	9c f0       	brlt	.+38     	; 0x6122 <ldexp+0x66>
    60fc:	bb 27       	eor	r27, r27
    60fe:	86 95       	lsr	r24
    6100:	77 95       	ror	r23
    6102:	67 95       	ror	r22
    6104:	b7 95       	ror	r27
    6106:	08 f4       	brcc	.+2      	; 0x610a <ldexp+0x4e>
    6108:	b1 60       	ori	r27, 0x01	; 1
    610a:	93 95       	inc	r25
    610c:	c1 f7       	brne	.-16     	; 0x60fe <ldexp+0x42>
    610e:	bb 0f       	add	r27, r27
    6110:	58 f7       	brcc	.-42     	; 0x60e8 <ldexp+0x2c>
    6112:	11 f4       	brne	.+4      	; 0x6118 <ldexp+0x5c>
    6114:	60 ff       	sbrs	r22, 0
    6116:	e8 cf       	rjmp	.-48     	; 0x60e8 <ldexp+0x2c>
    6118:	6f 5f       	subi	r22, 0xFF	; 255
    611a:	7f 4f       	sbci	r23, 0xFF	; 255
    611c:	8f 4f       	sbci	r24, 0xFF	; 255
    611e:	9f 4f       	sbci	r25, 0xFF	; 255
    6120:	e3 cf       	rjmp	.-58     	; 0x60e8 <ldexp+0x2c>
    6122:	90 ce       	rjmp	.-736    	; 0x5e44 <__fp_szero>
    6124:	0e f0       	brts	.+2      	; 0x6128 <ldexp+0x6c>
    6126:	76 c0       	rjmp	.+236    	; 0x6214 <__fp_mpack>
    6128:	48 ce       	rjmp	.-880    	; 0x5dba <__fp_nan>
    612a:	68 94       	set
    612c:	40 ce       	rjmp	.-896    	; 0x5dae <__fp_inf>

0000612e <log>:
    612e:	6f de       	rcall	.-802    	; 0x5e0e <__fp_splitA>
    6130:	c8 f3       	brcs	.-14     	; 0x6124 <ldexp+0x68>
    6132:	99 23       	and	r25, r25
    6134:	d1 f3       	breq	.-12     	; 0x612a <ldexp+0x6e>
    6136:	c6 f3       	brts	.-16     	; 0x6128 <ldexp+0x6c>
    6138:	df 93       	push	r29
    613a:	cf 93       	push	r28
    613c:	1f 93       	push	r17
    613e:	0f 93       	push	r16
    6140:	ff 92       	push	r15
    6142:	c9 2f       	mov	r28, r25
    6144:	dd 27       	eor	r29, r29
    6146:	88 23       	and	r24, r24
    6148:	2a f0       	brmi	.+10     	; 0x6154 <log+0x26>
    614a:	21 97       	sbiw	r28, 0x01	; 1
    614c:	66 0f       	add	r22, r22
    614e:	77 1f       	adc	r23, r23
    6150:	88 1f       	adc	r24, r24
    6152:	da f7       	brpl	.-10     	; 0x614a <log+0x1c>
    6154:	20 e0       	ldi	r18, 0x00	; 0
    6156:	30 e0       	ldi	r19, 0x00	; 0
    6158:	40 e8       	ldi	r20, 0x80	; 128
    615a:	5f eb       	ldi	r21, 0xBF	; 191
    615c:	9f e3       	ldi	r25, 0x3F	; 63
    615e:	88 39       	cpi	r24, 0x98	; 152
    6160:	20 f0       	brcs	.+8      	; 0x616a <log+0x3c>
    6162:	80 3e       	cpi	r24, 0xE0	; 224
    6164:	30 f0       	brcs	.+12     	; 0x6172 <log+0x44>
    6166:	21 96       	adiw	r28, 0x01	; 1
    6168:	8f 77       	andi	r24, 0x7F	; 127
    616a:	e7 dc       	rcall	.-1586   	; 0x5b3a <__addsf3>
    616c:	e0 e9       	ldi	r30, 0x90	; 144
    616e:	f0 e0       	ldi	r31, 0x00	; 0
    6170:	03 c0       	rjmp	.+6      	; 0x6178 <log+0x4a>
    6172:	e3 dc       	rcall	.-1594   	; 0x5b3a <__addsf3>
    6174:	ed eb       	ldi	r30, 0xBD	; 189
    6176:	f0 e0       	ldi	r31, 0x00	; 0
    6178:	73 df       	rcall	.-282    	; 0x6060 <__fp_powser>
    617a:	8b 01       	movw	r16, r22
    617c:	be 01       	movw	r22, r28
    617e:	ec 01       	movw	r28, r24
    6180:	fb 2e       	mov	r15, r27
    6182:	6f 57       	subi	r22, 0x7F	; 127
    6184:	71 09       	sbc	r23, r1
    6186:	75 95       	asr	r23
    6188:	77 1f       	adc	r23, r23
    618a:	88 0b       	sbc	r24, r24
    618c:	99 0b       	sbc	r25, r25
    618e:	d4 dd       	rcall	.-1112   	; 0x5d38 <__floatsisf>
    6190:	28 e1       	ldi	r18, 0x18	; 24
    6192:	32 e7       	ldi	r19, 0x72	; 114
    6194:	41 e3       	ldi	r20, 0x31	; 49
    6196:	5f e3       	ldi	r21, 0x3F	; 63
    6198:	6b de       	rcall	.-810    	; 0x5e70 <__mulsf3x>
    619a:	af 2d       	mov	r26, r15
    619c:	98 01       	movw	r18, r16
    619e:	ae 01       	movw	r20, r28
    61a0:	ff 90       	pop	r15
    61a2:	0f 91       	pop	r16
    61a4:	1f 91       	pop	r17
    61a6:	cf 91       	pop	r28
    61a8:	df 91       	pop	r29
    61aa:	d8 dc       	rcall	.-1616   	; 0x5b5c <__addsf3x>
    61ac:	17 ce       	rjmp	.-978    	; 0x5ddc <__fp_round>

000061ae <modf>:
    61ae:	fa 01       	movw	r30, r20
    61b0:	dc 01       	movw	r26, r24
    61b2:	aa 0f       	add	r26, r26
    61b4:	bb 1f       	adc	r27, r27
    61b6:	9b 01       	movw	r18, r22
    61b8:	ac 01       	movw	r20, r24
    61ba:	bf 57       	subi	r27, 0x7F	; 127
    61bc:	28 f4       	brcc	.+10     	; 0x61c8 <modf+0x1a>
    61be:	22 27       	eor	r18, r18
    61c0:	33 27       	eor	r19, r19
    61c2:	44 27       	eor	r20, r20
    61c4:	50 78       	andi	r21, 0x80	; 128
    61c6:	1f c0       	rjmp	.+62     	; 0x6206 <modf+0x58>
    61c8:	b7 51       	subi	r27, 0x17	; 23
    61ca:	88 f4       	brcc	.+34     	; 0x61ee <modf+0x40>
    61cc:	ab 2f       	mov	r26, r27
    61ce:	00 24       	eor	r0, r0
    61d0:	46 95       	lsr	r20
    61d2:	37 95       	ror	r19
    61d4:	27 95       	ror	r18
    61d6:	01 1c       	adc	r0, r1
    61d8:	a3 95       	inc	r26
    61da:	d2 f3       	brmi	.-12     	; 0x61d0 <modf+0x22>
    61dc:	00 20       	and	r0, r0
    61de:	69 f0       	breq	.+26     	; 0x61fa <modf+0x4c>
    61e0:	22 0f       	add	r18, r18
    61e2:	33 1f       	adc	r19, r19
    61e4:	44 1f       	adc	r20, r20
    61e6:	b3 95       	inc	r27
    61e8:	da f3       	brmi	.-10     	; 0x61e0 <modf+0x32>
    61ea:	0d d0       	rcall	.+26     	; 0x6206 <modf+0x58>
    61ec:	a5 cc       	rjmp	.-1718   	; 0x5b38 <__subsf3>
    61ee:	61 30       	cpi	r22, 0x01	; 1
    61f0:	71 05       	cpc	r23, r1
    61f2:	a0 e8       	ldi	r26, 0x80	; 128
    61f4:	8a 07       	cpc	r24, r26
    61f6:	b9 46       	sbci	r27, 0x69	; 105
    61f8:	30 f4       	brcc	.+12     	; 0x6206 <modf+0x58>
    61fa:	9b 01       	movw	r18, r22
    61fc:	ac 01       	movw	r20, r24
    61fe:	66 27       	eor	r22, r22
    6200:	77 27       	eor	r23, r23
    6202:	88 27       	eor	r24, r24
    6204:	90 78       	andi	r25, 0x80	; 128
    6206:	30 96       	adiw	r30, 0x00	; 0
    6208:	21 f0       	breq	.+8      	; 0x6212 <modf+0x64>
    620a:	20 83       	st	Z, r18
    620c:	31 83       	std	Z+1, r19	; 0x01
    620e:	42 83       	std	Z+2, r20	; 0x02
    6210:	53 83       	std	Z+3, r21	; 0x03
    6212:	08 95       	ret

00006214 <__fp_mpack>:
    6214:	9f 3f       	cpi	r25, 0xFF	; 255
    6216:	31 f0       	breq	.+12     	; 0x6224 <__fp_mpack_finite+0xc>

00006218 <__fp_mpack_finite>:
    6218:	91 50       	subi	r25, 0x01	; 1
    621a:	20 f4       	brcc	.+8      	; 0x6224 <__fp_mpack_finite+0xc>
    621c:	87 95       	ror	r24
    621e:	77 95       	ror	r23
    6220:	67 95       	ror	r22
    6222:	b7 95       	ror	r27
    6224:	88 0f       	add	r24, r24
    6226:	91 1d       	adc	r25, r1
    6228:	96 95       	lsr	r25
    622a:	87 95       	ror	r24
    622c:	97 f9       	bld	r25, 7
    622e:	08 95       	ret

00006230 <__divmodhi4>:
    6230:	97 fb       	bst	r25, 7
    6232:	07 2e       	mov	r0, r23
    6234:	16 f4       	brtc	.+4      	; 0x623a <__divmodhi4+0xa>
    6236:	00 94       	com	r0
    6238:	06 d0       	rcall	.+12     	; 0x6246 <__divmodhi4_neg1>
    623a:	77 fd       	sbrc	r23, 7
    623c:	08 d0       	rcall	.+16     	; 0x624e <__divmodhi4_neg2>
    623e:	42 d0       	rcall	.+132    	; 0x62c4 <__udivmodhi4>
    6240:	07 fc       	sbrc	r0, 7
    6242:	05 d0       	rcall	.+10     	; 0x624e <__divmodhi4_neg2>
    6244:	3e f4       	brtc	.+14     	; 0x6254 <__divmodhi4_exit>

00006246 <__divmodhi4_neg1>:
    6246:	90 95       	com	r25
    6248:	81 95       	neg	r24
    624a:	9f 4f       	sbci	r25, 0xFF	; 255
    624c:	08 95       	ret

0000624e <__divmodhi4_neg2>:
    624e:	70 95       	com	r23
    6250:	61 95       	neg	r22
    6252:	7f 4f       	sbci	r23, 0xFF	; 255

00006254 <__divmodhi4_exit>:
    6254:	08 95       	ret

00006256 <__udivmodsi4>:
    6256:	a1 e2       	ldi	r26, 0x21	; 33
    6258:	1a 2e       	mov	r1, r26
    625a:	aa 1b       	sub	r26, r26
    625c:	bb 1b       	sub	r27, r27
    625e:	fd 01       	movw	r30, r26
    6260:	0d c0       	rjmp	.+26     	; 0x627c <__udivmodsi4_ep>

00006262 <__udivmodsi4_loop>:
    6262:	aa 1f       	adc	r26, r26
    6264:	bb 1f       	adc	r27, r27
    6266:	ee 1f       	adc	r30, r30
    6268:	ff 1f       	adc	r31, r31
    626a:	a2 17       	cp	r26, r18
    626c:	b3 07       	cpc	r27, r19
    626e:	e4 07       	cpc	r30, r20
    6270:	f5 07       	cpc	r31, r21
    6272:	20 f0       	brcs	.+8      	; 0x627c <__udivmodsi4_ep>
    6274:	a2 1b       	sub	r26, r18
    6276:	b3 0b       	sbc	r27, r19
    6278:	e4 0b       	sbc	r30, r20
    627a:	f5 0b       	sbc	r31, r21

0000627c <__udivmodsi4_ep>:
    627c:	66 1f       	adc	r22, r22
    627e:	77 1f       	adc	r23, r23
    6280:	88 1f       	adc	r24, r24
    6282:	99 1f       	adc	r25, r25
    6284:	1a 94       	dec	r1
    6286:	69 f7       	brne	.-38     	; 0x6262 <__udivmodsi4_loop>
    6288:	60 95       	com	r22
    628a:	70 95       	com	r23
    628c:	80 95       	com	r24
    628e:	90 95       	com	r25
    6290:	9b 01       	movw	r18, r22
    6292:	ac 01       	movw	r20, r24
    6294:	bd 01       	movw	r22, r26
    6296:	cf 01       	movw	r24, r30
    6298:	08 95       	ret

0000629a <__tablejump2__>:
    629a:	ee 0f       	add	r30, r30
    629c:	ff 1f       	adc	r31, r31
    629e:	05 90       	lpm	r0, Z+
    62a0:	f4 91       	lpm	r31, Z
    62a2:	e0 2d       	mov	r30, r0
    62a4:	09 94       	ijmp

000062a6 <__umulhisi3>:
    62a6:	a2 9f       	mul	r26, r18
    62a8:	b0 01       	movw	r22, r0
    62aa:	b3 9f       	mul	r27, r19
    62ac:	c0 01       	movw	r24, r0
    62ae:	a3 9f       	mul	r26, r19
    62b0:	70 0d       	add	r23, r0
    62b2:	81 1d       	adc	r24, r1
    62b4:	11 24       	eor	r1, r1
    62b6:	91 1d       	adc	r25, r1
    62b8:	b2 9f       	mul	r27, r18
    62ba:	70 0d       	add	r23, r0
    62bc:	81 1d       	adc	r24, r1
    62be:	11 24       	eor	r1, r1
    62c0:	91 1d       	adc	r25, r1
    62c2:	08 95       	ret

000062c4 <__udivmodhi4>:
    62c4:	aa 1b       	sub	r26, r26
    62c6:	bb 1b       	sub	r27, r27
    62c8:	51 e1       	ldi	r21, 0x11	; 17
    62ca:	07 c0       	rjmp	.+14     	; 0x62da <__udivmodhi4_ep>

000062cc <__udivmodhi4_loop>:
    62cc:	aa 1f       	adc	r26, r26
    62ce:	bb 1f       	adc	r27, r27
    62d0:	a6 17       	cp	r26, r22
    62d2:	b7 07       	cpc	r27, r23
    62d4:	10 f0       	brcs	.+4      	; 0x62da <__udivmodhi4_ep>
    62d6:	a6 1b       	sub	r26, r22
    62d8:	b7 0b       	sbc	r27, r23

000062da <__udivmodhi4_ep>:
    62da:	88 1f       	adc	r24, r24
    62dc:	99 1f       	adc	r25, r25
    62de:	5a 95       	dec	r21
    62e0:	a9 f7       	brne	.-22     	; 0x62cc <__udivmodhi4_loop>
    62e2:	80 95       	com	r24
    62e4:	90 95       	com	r25
    62e6:	bc 01       	movw	r22, r24
    62e8:	cd 01       	movw	r24, r26
    62ea:	08 95       	ret

000062ec <strcpy>:
    62ec:	fb 01       	movw	r30, r22
    62ee:	dc 01       	movw	r26, r24
    62f0:	01 90       	ld	r0, Z+
    62f2:	0d 92       	st	X+, r0
    62f4:	00 20       	and	r0, r0
    62f6:	e1 f7       	brne	.-8      	; 0x62f0 <strcpy+0x4>
    62f8:	08 95       	ret

000062fa <__do_global_dtors>:
    62fa:	10 e0       	ldi	r17, 0x00	; 0
    62fc:	c7 e7       	ldi	r28, 0x77	; 119
    62fe:	d0 e0       	ldi	r29, 0x00	; 0
    6300:	03 c0       	rjmp	.+6      	; 0x6308 <__do_global_dtors+0xe>
    6302:	fe 01       	movw	r30, r28
    6304:	ca df       	rcall	.-108    	; 0x629a <__tablejump2__>
    6306:	21 96       	adiw	r28, 0x01	; 1
    6308:	c8 37       	cpi	r28, 0x78	; 120
    630a:	d1 07       	cpc	r29, r17
    630c:	d1 f7       	brne	.-12     	; 0x6302 <__do_global_dtors+0x8>
    630e:	f8 94       	cli

00006310 <__stop_program>:
    6310:	ff cf       	rjmp	.-2      	; 0x6310 <__stop_program>
